#!/usr/bin/env ruby
require 'epitools'

############################################################################
POOL_SIZE=12
############################################################################

def run(cmd)
  IO.popen(cmd, err: [:child, :out]) { |io| io.read }
end

#
# TODO: Move this to epitools
#
module Enumerable

  def parallel_map(num_workers=8, &block)
    require 'thread'

    queue = Queue.new
    each { |e| queue.push e }

    Enumerator.new do |y|
      workers = (0...num_workers).map do
        Thread.new do
          begin
            while e = queue.pop(true)
              y << block.call(e)
            end
          rescue ThreadError
          end
        end
      end

      workers.map(&:join)
    end
  end

end

############################################################################

if ARGV.any?
  repos = ARGV.map(&:to_Path)
else
  repos = Path["*/.git"].map(&:parent)
end

puts "<8>* <11>Updating <15>#{repos.size} <11>repos <8>(<9>using <15>#{POOL_SIZE} <9>parallel workers<8>)".colorize

############################################################################
# Update all the repos and gather the results

results = repos.parallel_map(POOL_SIZE) do |repo|
  begin
    if not repo.exists?
      [repo, false, "Error: path does not exist", false]
    elsif repo.file?
      [repo, false, "Error: repo must be a directory", false]
    else
      Path.cd(repo) do
        if Path[".git"].dir?

          # Regular repo
          output  = run "git pull"
          updated = !output["Already up-to-date."]

        elsif Path["HEAD"].exists?

          # Bare repo
          output  = run "git fetch"
          updated = !output.blank?

        elsif (pull_script = Path["pull"]).exists? and pull_script.executable?

          # ./pull script
          output = run "./pull"
          updated = !output.blank?

        else
          raise "I don't recognize this type of repo: #{repo}"
        end

        [repo, updated, output, $?.success?]
      end
    end
  rescue => e
    [repo, false, e.to_s, false]
  end
end


############################################################################
# Summarize the results

updated_repos = []
errors  = []

results.each do |repo, updated, output, success|
  if not success # output[/^(fatal: .+)$/] || output[/^(error: Your local changes.+)$/] || output[/no such ref was fetched./]
    print ".".light_red
    errors << [repo, output]
  elsif updated
    puts
    puts "<3>========== <11>#{repo} <3>===============".colorize
    puts
    puts output
    puts
    updated_repos << repo
  else
    print ".".grey
  end
end

puts
puts
puts "----------------------------------------------------------------".grey
puts " Errors:".light_red
puts "----------------------------------------------------------------".grey
errors.each do |repo, error|
  puts "#{repo}".light_red
  puts error.indent(4)
end
puts

puts "----------------------------------------------------------------".grey
puts " Updated:".light_green
puts "----------------------------------------------------------------".grey
updated_repos.each { |repo| puts "#{repo}".light_cyan }
puts
