#!/usr/bin/env ruby
# encoding: utf-8
###################################################################
# TODOs:
# - redirect on "alternative form"s
# - parse/display the data properly
# - compress dict
# - default to multilingual dict
# - make --lang work
# - search in tags w/ grep (eg: "|fantasy|")
###################################################################
require 'epitools'
###################################################################

CACHE_DIR  = File.expand_path("~/.cache/wikt")
INDEX_FILE = File.join CACHE_DIR, "wikt.idx"
TSV_FILE   = File.join CACHE_DIR, "wikt.tsv"

###################################################################

def parse_options
  gem "slop", "~> 3.6"
  require 'slop' # lazy loaded

  opts = Slop.parse(help: true, strict: true) do
    banner 'Usage: wict [options] <word(s)...>'

    on 'u',  'update',  'Download the English wikipedia dictionary'
    on 'a',  'all',     'Download the wikipedia dictionary for all languages'
    on 'c',  'clean',   'Remove current database in .cache dir'
    on 's',  'stats',   'Dictionary statistics'
    on 'l=', 'lang',    'Language (2-letter code, or substring; defaults to all)'
  end

  [opts, ARGV]
end

###################################################################
# Utils

def ensure_database!
  unless File.exist? TSV_FILE and File.exist? INDEX_FILE
    $stderr.puts "You must first download a database. Run 'wict -u'."
    exit 1
  end
end

def backup(src)
  if File.exists? src
    counter = 1
    dest = "#{src}.bak"

    while File.exists? dest
      counter += 1
      dest = "#{src}.bak#{counter}"
    end

    puts "  |_ database backed up to: #{dest.inspect}"

    File.rename(src, dest)
  end
end

def strip_diacritics(str)
  result = ""
  str.each_codepoint do |cp|
    loop do
      # keep stripping diacritics until none remain
      break unless stripped = DIACRITIC_REMOVAL_MAP[cp]
      cp = stripped
    end
    result << cp
  end
  result
end

# a hash mapping each unicode codepoint with diacritics to its non-diacriticed counterpart (when there are multiple diacritics, each mapping removes one diacritic)
DIACRITIC_REMOVAL_MAP = {
	192=>65, 193=>65, 194=>65, 195=>65, 196=>65, 197=>65, 199=>67, 200=>69,
	201=>69, 202=>69, 203=>69, 204=>73, 205=>73, 206=>73, 207=>73, 209=>78,
	210=>79, 211=>79, 212=>79, 213=>79, 214=>79, 217=>85, 218=>85, 219=>85,
	220=>85, 221=>89, 224=>97, 225=>97, 226=>97, 227=>97, 228=>97, 229=>97,
	231=>99, 232=>101, 233=>101, 234=>101, 235=>101, 236=>105, 237=>105, 238=>105,
	239=>105, 241=>110, 242=>111, 243=>111, 244=>111, 245=>111, 246=>111, 249=>117,
	250=>117, 251=>117, 252=>117, 253=>121, 255=>121, 256=>65, 257=>97, 258=>65,
	259=>97, 260=>65, 261=>97, 262=>67, 263=>99, 264=>67, 265=>99, 266=>67,
	267=>99, 268=>67, 269=>99, 270=>68, 271=>100, 274=>69, 275=>101, 276=>69,
	277=>101, 278=>69, 279=>101, 280=>69, 281=>101, 282=>69, 283=>101, 284=>71,
	285=>103, 286=>71, 287=>103, 288=>71, 289=>103, 290=>71, 291=>103, 292=>72,
	293=>104, 296=>73, 297=>105, 298=>73, 299=>105, 300=>73, 301=>105, 302=>73,
	303=>105, 304=>73, 308=>74, 309=>106, 310=>75, 311=>107, 313=>76, 314=>108,
	315=>76, 316=>108, 317=>76, 318=>108, 323=>78, 324=>110, 325=>78, 326=>110,
	327=>78, 328=>110, 332=>79, 333=>111, 334=>79, 335=>111, 336=>79, 337=>111,
	340=>82, 341=>114, 342=>82, 343=>114, 344=>82, 345=>114, 346=>83, 347=>115,
	348=>83, 349=>115, 350=>83, 351=>115, 352=>83, 353=>115, 354=>84, 355=>116,
	356=>84, 357=>116, 360=>85, 361=>117, 362=>85, 363=>117, 364=>85, 365=>117,
	366=>85, 367=>117, 368=>85, 369=>117, 370=>85, 371=>117, 372=>87, 373=>119,
	374=>89, 375=>121, 376=>89, 377=>90, 378=>122, 379=>90, 380=>122, 381=>90,
	382=>122, 416=>79, 417=>111, 431=>85, 432=>117, 461=>65, 462=>97, 463=>73,
	464=>105, 465=>79, 466=>111, 467=>85, 468=>117, 469=>220, 470=>252, 471=>220,
	472=>252, 473=>220, 474=>252, 475=>220, 476=>252, 478=>196, 479=>228, 480=>550,
	481=>551, 482=>198, 483=>230, 486=>71, 487=>103, 488=>75, 489=>107, 490=>79,
	491=>111, 492=>490, 493=>491, 494=>439, 495=>658, 496=>106, 500=>71, 501=>103,
	504=>78, 505=>110, 506=>197, 507=>229, 508=>198, 509=>230, 510=>216, 511=>248,
	512=>65, 513=>97, 514=>65, 515=>97, 516=>69, 517=>101, 518=>69, 519=>101,
	520=>73, 521=>105, 522=>73, 523=>105, 524=>79, 525=>111, 526=>79, 527=>111,
	528=>82, 529=>114, 530=>82, 531=>114, 532=>85, 533=>117, 534=>85, 535=>117,
	536=>83, 537=>115, 538=>84, 539=>116, 542=>72, 543=>104, 550=>65, 551=>97,
	552=>69, 553=>101, 554=>214, 555=>246, 556=>213, 557=>245, 558=>79, 559=>111,
	560=>558, 561=>559, 562=>89, 563=>121, 832=>768, 833=>769, 835=>787, 836=>776,
	884=>697, 894=>59, 901=>168, 902=>913, 903=>183, 904=>917, 905=>919, 906=>921,
	908=>927, 910=>933, 911=>937, 912=>970, 938=>921, 939=>933, 940=>945, 941=>949,
	942=>951, 943=>953, 944=>971, 970=>953, 971=>965, 972=>959, 973=>965, 974=>969,
	979=>978, 980=>978, 1024=>1045, 1025=>1045, 1027=>1043, 1031=>1030, 1036=>1050, 1037=>1048,
	1038=>1059, 1049=>1048, 1081=>1080, 1104=>1077, 1105=>1077, 1107=>1075, 1111=>1110, 1116=>1082,
	1117=>1080, 1118=>1091, 1142=>1140, 1143=>1141, 1217=>1046, 1218=>1078, 1232=>1040, 1233=>1072,
	1234=>1040, 1235=>1072, 1238=>1045, 1239=>1077, 1242=>1240, 1243=>1241, 1244=>1046, 1245=>1078,
	1246=>1047, 1247=>1079, 1250=>1048, 1251=>1080, 1252=>1048, 1253=>1080, 1254=>1054, 1255=>1086,
	1258=>1256, 1259=>1257, 1260=>1069, 1261=>1101, 1262=>1059, 1263=>1091, 1264=>1059, 1265=>1091,
	1266=>1059, 1267=>1091, 1268=>1063, 1269=>1095, 1272=>1067, 1273=>1099, 1570=>1575, 1571=>1575,
	1572=>1608, 1573=>1575, 1574=>1610, 1728=>1749, 1730=>1729, 1747=>1746, 2345=>2344, 2353=>2352,
	2356=>2355, 2392=>2325, 2393=>2326, 2394=>2327, 2395=>2332, 2396=>2337, 2397=>2338, 2398=>2347,
	2399=>2351, 2507=>2503, 2508=>2503, 2524=>2465, 2525=>2466, 2527=>2479, 2611=>2610, 2614=>2616,
	2649=>2582, 2650=>2583, 2651=>2588, 2654=>2603, 2888=>2887, 2891=>2887, 2892=>2887, 2908=>2849,
	2909=>2850, 2964=>2962, 3018=>3014, 3019=>3015, 3020=>3014, 3144=>3142, 3264=>3263, 3271=>3270,
	3272=>3270, 3274=>3270, 3275=>3274, 3402=>3398, 3403=>3399, 3404=>3398, 3546=>3545, 3548=>3545,
	3549=>3548, 3550=>3545, 3907=>3906, 3917=>3916, 3922=>3921, 3927=>3926, 3932=>3931, 3945=>3904,
	3955=>3953, 3957=>3953, 3958=>4018, 3960=>4019, 3969=>3953, 3987=>3986, 3997=>3996, 4002=>4001,
	4007=>4006, 4012=>4011, 4025=>3984, 4134=>4133, 6918=>6917, 6920=>6919, 6922=>6921, 6924=>6923,
	6926=>6925, 6930=>6929, 6971=>6970, 6973=>6972, 6976=>6974, 6977=>6975, 6979=>6978, 7680=>65,
	7681=>97, 7682=>66, 7683=>98, 7684=>66, 7685=>98, 7686=>66, 7687=>98, 7688=>199,
	7689=>231, 7690=>68, 7691=>100, 7692=>68, 7693=>100, 7694=>68, 7695=>100, 7696=>68,
	7697=>100, 7698=>68, 7699=>100, 7700=>274, 7701=>275, 7702=>274, 7703=>275, 7704=>69,
	7705=>101, 7706=>69, 7707=>101, 7708=>552, 7709=>553, 7710=>70, 7711=>102, 7712=>71,
	7713=>103, 7714=>72, 7715=>104, 7716=>72, 7717=>104, 7718=>72, 7719=>104, 7720=>72,
	7721=>104, 7722=>72, 7723=>104, 7724=>73, 7725=>105, 7726=>207, 7727=>239, 7728=>75,
	7729=>107, 7730=>75, 7731=>107, 7732=>75, 7733=>107, 7734=>76, 7735=>108, 7736=>7734,
	7737=>7735, 7738=>76, 7739=>108, 7740=>76, 7741=>108, 7742=>77, 7743=>109, 7744=>77,
	7745=>109, 7746=>77, 7747=>109, 7748=>78, 7749=>110, 7750=>78, 7751=>110, 7752=>78,
	7753=>110, 7754=>78, 7755=>110, 7756=>213, 7757=>245, 7758=>213, 7759=>245, 7760=>332,
	7761=>333, 7762=>332, 7763=>333, 7764=>80, 7765=>112, 7766=>80, 7767=>112, 7768=>82,
	7769=>114, 7770=>82, 7771=>114, 7772=>7770, 7773=>7771, 7774=>82, 7775=>114, 7776=>83,
	7777=>115, 7778=>83, 7779=>115, 7780=>346, 7781=>347, 7782=>352, 7783=>353, 7784=>7778,
	7785=>7779, 7786=>84, 7787=>116, 7788=>84, 7789=>116, 7790=>84, 7791=>116, 7792=>84,
	7793=>116, 7794=>85, 7795=>117, 7796=>85, 7797=>117, 7798=>85, 7799=>117, 7800=>360,
	7801=>361, 7802=>362, 7803=>363, 7804=>86, 7805=>118, 7806=>86, 7807=>118, 7808=>87,
	7809=>119, 7810=>87, 7811=>119, 7812=>87, 7813=>119, 7814=>87, 7815=>119, 7816=>87,
	7817=>119, 7818=>88, 7819=>120, 7820=>88, 7821=>120, 7822=>89, 7823=>121, 7824=>90,
	7825=>122, 7826=>90, 7827=>122, 7828=>90, 7829=>122, 7830=>104, 7831=>116, 7832=>119,
	7833=>121, 7835=>383, 7840=>65, 7841=>97, 7842=>65, 7843=>97, 7844=>194, 7845=>226,
	7846=>194, 7847=>226, 7848=>194, 7849=>226, 7850=>194, 7851=>226, 7852=>7840, 7853=>7841,
	7854=>258, 7855=>259, 7856=>258, 7857=>259, 7858=>258, 7859=>259, 7860=>258, 7861=>259,
	7862=>7840, 7863=>7841, 7864=>69, 7865=>101, 7866=>69, 7867=>101, 7868=>69, 7869=>101,
	7870=>202, 7871=>234, 7872=>202, 7873=>234, 7874=>202, 7875=>234, 7876=>202, 7877=>234,
	7878=>7864, 7879=>7865, 7880=>73, 7881=>105, 7882=>73, 7883=>105, 7884=>79, 7885=>111,
	7886=>79, 7887=>111, 7888=>212, 7889=>244, 7890=>212, 7891=>244, 7892=>212, 7893=>244,
	7894=>212, 7895=>244, 7896=>7884, 7897=>7885, 7898=>416, 7899=>417, 7900=>416, 7901=>417,
	7902=>416, 7903=>417, 7904=>416, 7905=>417, 7906=>416, 7907=>417, 7908=>85, 7909=>117,
	7910=>85, 7911=>117, 7912=>431, 7913=>432, 7914=>431, 7915=>432, 7916=>431, 7917=>432,
	7918=>431, 7919=>432, 7920=>431, 7921=>432, 7922=>89, 7923=>121, 7924=>89, 7925=>121,
	7926=>89, 7927=>121, 7928=>89, 7929=>121, 7936=>945, 7937=>945, 7938=>7936, 7939=>7937,
	7940=>7936, 7941=>7937, 7942=>7936, 7943=>7937, 7944=>913, 7945=>913, 7946=>7944, 7947=>7945,
	7948=>7944, 7949=>7945, 7950=>7944, 7951=>7945, 7952=>949, 7953=>949, 7954=>7952, 7955=>7953,
	7956=>7952, 7957=>7953, 7960=>917, 7961=>917, 7962=>7960, 7963=>7961, 7964=>7960, 7965=>7961,
	7968=>951, 7969=>951, 7970=>7968, 7971=>7969, 7972=>7968, 7973=>7969, 7974=>7968, 7975=>7969,
	7976=>919, 7977=>919, 7978=>7976, 7979=>7977, 7980=>7976, 7981=>7977, 7982=>7976, 7983=>7977,
	7984=>953, 7985=>953, 7986=>7984, 7987=>7985, 7988=>7984, 7989=>7985, 7990=>7984, 7991=>7985,
	7992=>921, 7993=>921, 7994=>7992, 7995=>7993, 7996=>7992, 7997=>7993, 7998=>7992, 7999=>7993,
	8000=>959, 8001=>959, 8002=>8000, 8003=>8001, 8004=>8000, 8005=>8001, 8008=>927, 8009=>927,
	8010=>8008, 8011=>8009, 8012=>8008, 8013=>8009, 8016=>965, 8017=>965, 8018=>8016, 8019=>8017,
	8020=>8016, 8021=>8017, 8022=>8016, 8023=>8017, 8025=>933, 8027=>8025, 8029=>8025, 8031=>8025,
	8032=>969, 8033=>969, 8034=>8032, 8035=>8033, 8036=>8032, 8037=>8033, 8038=>8032, 8039=>8033,
	8040=>937, 8041=>937, 8042=>8040, 8043=>8041, 8044=>8040, 8045=>8041, 8046=>8040, 8047=>8041,
	8048=>945, 8049=>940, 8050=>949, 8051=>941, 8052=>951, 8053=>942, 8054=>953, 8055=>943,
	8056=>959, 8057=>972, 8058=>965, 8059=>973, 8060=>969, 8061=>974, 8064=>7936, 8065=>7937,
	8066=>7938, 8067=>7939, 8068=>7940, 8069=>7941, 8070=>7942, 8071=>7943, 8072=>7944, 8073=>7945,
	8074=>7946, 8075=>7947, 8076=>7948, 8077=>7949, 8078=>7950, 8079=>7951, 8080=>7968, 8081=>7969,
	8082=>7970, 8083=>7971, 8084=>7972, 8085=>7973, 8086=>7974, 8087=>7975, 8088=>7976, 8089=>7977,
	8090=>7978, 8091=>7979, 8092=>7980, 8093=>7981, 8094=>7982, 8095=>7983, 8096=>8032, 8097=>8033,
	8098=>8034, 8099=>8035, 8100=>8036, 8101=>8037, 8102=>8038, 8103=>8039, 8104=>8040, 8105=>8041,
	8106=>8042, 8107=>8043, 8108=>8044, 8109=>8045, 8110=>8046, 8111=>8047, 8112=>945, 8113=>945,
	8114=>8048, 8115=>945, 8116=>940, 8118=>945, 8119=>8118, 8120=>913, 8121=>913, 8122=>913,
	8123=>902, 8124=>913, 8126=>953, 8129=>168, 8130=>8052, 8131=>951, 8132=>942, 8134=>951,
	8135=>8134, 8136=>917, 8137=>904, 8138=>919, 8139=>905, 8140=>919, 8141=>8127, 8142=>8127,
	8143=>8127, 8144=>953, 8145=>953, 8146=>970, 8147=>912, 8150=>953, 8151=>970, 8152=>921,
	8153=>921, 8154=>921, 8155=>906, 8157=>8190, 8158=>8190, 8159=>8190, 8160=>965, 8161=>965,
	8162=>971, 8163=>944, 8164=>961, 8165=>961, 8166=>965, 8167=>971, 8168=>933, 8169=>933,
	8170=>933, 8171=>910, 8172=>929, 8173=>168, 8174=>901, 8175=>96, 8178=>8060, 8179=>969,
	8180=>974, 8182=>969, 8183=>8182, 8184=>927, 8185=>908, 8186=>937, 8187=>911, 8188=>937,
	8189=>180, 8192=>8194, 8193=>8195, 8486=>937, 8490=>75, 8491=>197, 8602=>8592, 8603=>8594,
	8622=>8596, 8653=>8656, 8654=>8660, 8655=>8658, 8708=>8707, 8713=>8712, 8716=>8715, 8740=>8739,
	8742=>8741, 8769=>8764, 8772=>8771, 8775=>8773, 8777=>8776, 8800=>61, 8802=>8801, 8813=>8781,
	8814=>60, 8815=>62, 8816=>8804, 8817=>8805, 8820=>8818, 8821=>8819, 8824=>8822, 8825=>8823,
	8832=>8826, 8833=>8827, 8836=>8834, 8837=>8835, 8840=>8838, 8841=>8839, 8876=>8866, 8877=>8872,
	8878=>8873, 8879=>8875, 8928=>8828, 8929=>8829, 8930=>8849, 8931=>8850, 8938=>8882, 8939=>8883,
	8940=>8884, 8941=>8885, 9001=>12296, 9002=>12297, 10972=>10973, 12364=>12363, 12366=>12365, 12368=>12367,
	12370=>12369, 12372=>12371, 12374=>12373, 12376=>12375, 12378=>12377, 12380=>12379, 12382=>12381, 12384=>12383,
	12386=>12385, 12389=>12388, 12391=>12390, 12393=>12392, 12400=>12399, 12401=>12399, 12403=>12402, 12404=>12402,
	12406=>12405, 12407=>12405, 12409=>12408, 12410=>12408, 12412=>12411, 12413=>12411, 12436=>12358, 12446=>12445,
	12460=>12459, 12462=>12461, 12464=>12463, 12466=>12465, 12468=>12467, 12470=>12469, 12472=>12471, 12474=>12473,
	12476=>12475, 12478=>12477, 12480=>12479, 12482=>12481, 12485=>12484, 12487=>12486, 12489=>12488, 12496=>12495,
	12497=>12495, 12499=>12498, 12500=>12498, 12502=>12501, 12503=>12501, 12505=>12504, 12506=>12504, 12508=>12507,
	12509=>12507, 12532=>12454, 12535=>12527, 12536=>12528, 12537=>12529, 12538=>12530, 12542=>12541, 63744=>35912,
	63745=>26356, 63746=>36554, 63747=>36040, 63748=>28369, 63749=>20018, 63750=>21477, 63751=>40860, 63752=>40860,
	63753=>22865, 63754=>37329, 63755=>21895, 63756=>22856, 63757=>25078, 63758=>30313, 63759=>32645, 63760=>34367,
	63761=>34746, 63762=>35064, 63763=>37007, 63764=>27138, 63765=>27931, 63766=>28889, 63767=>29662, 63768=>33853,
	63769=>37226, 63770=>39409, 63771=>20098, 63772=>21365, 63773=>27396, 63774=>29211, 63775=>34349, 63776=>40478,
	63777=>23888, 63778=>28651, 63779=>34253, 63780=>35172, 63781=>25289, 63782=>33240, 63783=>34847, 63784=>24266,
	63785=>26391, 63786=>28010, 63787=>29436, 63788=>37070, 63789=>20358, 63790=>20919, 63791=>21214, 63792=>25796,
	63793=>27347, 63794=>29200, 63795=>30439, 63796=>32769, 63797=>34310, 63798=>34396, 63799=>36335, 63800=>38706,
	63801=>39791, 63802=>40442, 63803=>30860, 63804=>31103, 63805=>32160, 63806=>33737, 63807=>37636, 63808=>40575,
	63809=>35542, 63810=>22751, 63811=>24324, 63812=>31840, 63813=>32894, 63814=>29282, 63815=>30922, 63816=>36034,
	63817=>38647, 63818=>22744, 63819=>23650, 63820=>27155, 63821=>28122, 63822=>28431, 63823=>32047, 63824=>32311,
	63825=>38475, 63826=>21202, 63827=>32907, 63828=>20956, 63829=>20940, 63830=>31260, 63831=>32190, 63832=>33777,
	63833=>38517, 63834=>35712, 63835=>25295, 63836=>27138, 63837=>35582, 63838=>20025, 63839=>23527, 63840=>24594,
	63841=>29575, 63842=>30064, 63843=>21271, 63844=>30971, 63845=>20415, 63846=>24489, 63847=>19981, 63848=>27852,
	63849=>25976, 63850=>32034, 63851=>21443, 63852=>22622, 63853=>30465, 63854=>33865, 63855=>35498, 63856=>27578,
	63857=>36784, 63858=>27784, 63859=>25342, 63860=>33509, 63861=>25504, 63862=>30053, 63863=>20142, 63864=>20841,
	63865=>20937, 63866=>26753, 63867=>31975, 63868=>33391, 63869=>35538, 63870=>37327, 63871=>21237, 63872=>21570,
	63873=>22899, 63874=>24300, 63875=>26053, 63876=>28670, 63877=>31018, 63878=>38317, 63879=>39530, 63880=>40599,
	63881=>40654, 63882=>21147, 63883=>26310, 63884=>27511, 63885=>36706, 63886=>24180, 63887=>24976, 63888=>25088,
	63889=>25754, 63890=>28451, 63891=>29001, 63892=>29833, 63893=>31178, 63894=>32244, 63895=>32879, 63896=>36646,
	63897=>34030, 63898=>36899, 63899=>37706, 63900=>21015, 63901=>21155, 63902=>21693, 63903=>28872, 63904=>35010,
	63905=>35498, 63906=>24265, 63907=>24565, 63908=>25467, 63909=>27566, 63910=>31806, 63911=>29557, 63912=>20196,
	63913=>22265, 63914=>23527, 63915=>23994, 63916=>24604, 63917=>29618, 63918=>29801, 63919=>32666, 63920=>32838,
	63921=>37428, 63922=>38646, 63923=>38728, 63924=>38936, 63925=>20363, 63926=>31150, 63927=>37300, 63928=>38584,
	63929=>24801, 63930=>20102, 63931=>20698, 63932=>23534, 63933=>23615, 63934=>26009, 63935=>27138, 63936=>29134,
	63937=>30274, 63938=>34044, 63939=>36988, 63940=>40845, 63941=>26248, 63942=>38446, 63943=>21129, 63944=>26491,
	63945=>26611, 63946=>27969, 63947=>28316, 63948=>29705, 63949=>30041, 63950=>30827, 63951=>32016, 63952=>39006,
	63953=>20845, 63954=>25134, 63955=>38520, 63956=>20523, 63957=>23833, 63958=>28138, 63959=>36650, 63960=>24459,
	63961=>24900, 63962=>26647, 63963=>29575, 63964=>38534, 63965=>21033, 63966=>21519, 63967=>23653, 63968=>26131,
	63969=>26446, 63970=>26792, 63971=>27877, 63972=>29702, 63973=>30178, 63974=>32633, 63975=>35023, 63976=>35041,
	63977=>37324, 63978=>38626, 63979=>21311, 63980=>28346, 63981=>21533, 63982=>29136, 63983=>29848, 63984=>34298,
	63985=>38563, 63986=>40023, 63987=>40607, 63988=>26519, 63989=>28107, 63990=>33256, 63991=>31435, 63992=>31520,
	63993=>31890, 63994=>29376, 63995=>28825, 63996=>35672, 63997=>20160, 63998=>33590, 63999=>21050, 64000=>20999,
	64001=>24230, 64002=>25299, 64003=>31958, 64004=>23429, 64005=>27934, 64006=>26292, 64007=>36667, 64008=>34892,
	64009=>38477, 64010=>35211, 64011=>24275, 64012=>20800, 64013=>21952, 64016=>22618, 64018=>26228, 64021=>20958,
	64022=>29482, 64023=>30410, 64024=>31036, 64025=>31070, 64026=>31077, 64027=>31119, 64028=>38742, 64029=>31934,
	64030=>32701, 64032=>34322, 64034=>35576, 64037=>36920, 64038=>37117, 64042=>39151, 64043=>39164, 64044=>39208,
	64045=>40372, 64046=>37086, 64047=>38583, 64048=>20398, 64049=>20711, 64050=>20813, 64051=>21193, 64052=>21220,
	64053=>21329, 64054=>21917, 64055=>22022, 64056=>22120, 64057=>22592, 64058=>22696, 64059=>23652, 64060=>23662,
	64061=>24724, 64062=>24936, 64063=>24974, 64064=>25074, 64065=>25935, 64066=>26082, 64067=>26257, 64068=>26757,
	64069=>28023, 64070=>28186, 64071=>28450, 64072=>29038, 64073=>29227, 64074=>29730, 64075=>30865, 64076=>31038,
	64077=>31049, 64078=>31048, 64079=>31056, 64080=>31062, 64081=>31069, 64082=>31117, 64083=>31118, 64084=>31296,
	64085=>31361, 64086=>31680, 64087=>32244, 64088=>32265, 64089=>32321, 64090=>32626, 64091=>32773, 64092=>33261,
	64093=>33401, 64094=>33401, 64095=>33879, 64096=>35088, 64097=>35222, 64098=>35585, 64099=>35641, 64100=>36051,
	64101=>36104, 64102=>36790, 64103=>36920, 64104=>38627, 64105=>38911, 64106=>38971, 64107=>24693, 64108=>148206,
	64109=>33304, 64112=>20006, 64113=>20917, 64114=>20840, 64115=>20352, 64116=>20805, 64117=>20864, 64118=>21191,
	64119=>21242, 64120=>21917, 64121=>21845, 64122=>21913, 64123=>21986, 64124=>22618, 64125=>22707, 64126=>22852,
	64127=>22868, 64128=>23138, 64129=>23336, 64130=>24274, 64131=>24281, 64132=>24425, 64133=>24493, 64134=>24792,
	64135=>24910, 64136=>24840, 64137=>24974, 64138=>24928, 64139=>25074, 64140=>25140, 64141=>25540, 64142=>25628,
	64143=>25682, 64144=>25942, 64145=>26228, 64146=>26391, 64147=>26395, 64148=>26454, 64149=>27513, 64150=>27578,
	64151=>27969, 64152=>28379, 64153=>28363, 64154=>28450, 64155=>28702, 64156=>29038, 64157=>30631, 64158=>29237,
	64159=>29359, 64160=>29482, 64161=>29809, 64162=>29958, 64163=>30011, 64164=>30237, 64165=>30239, 64166=>30410,
	64167=>30427, 64168=>30452, 64169=>30538, 64170=>30528, 64171=>30924, 64172=>31409, 64173=>31680, 64174=>31867,
	64175=>32091, 64176=>32244, 64177=>32574, 64178=>32773, 64179=>33618, 64180=>33775, 64181=>34681, 64182=>35137,
	64183=>35206, 64184=>35222, 64185=>35519, 64186=>35576, 64187=>35531, 64188=>35585, 64189=>35582, 64190=>35565,
	64191=>35641, 64192=>35722, 64193=>36104, 64194=>36664, 64195=>36978, 64196=>37273, 64197=>37494, 64198=>38524,
	64199=>38627, 64200=>38742, 64201=>38875, 64202=>38911, 64203=>38923, 64204=>38971, 64205=>39698, 64206=>40860,
	64207=>141386, 64208=>141380, 64209=>144341, 64210=>15261, 64211=>16408, 64212=>16441, 64213=>152137, 64214=>154832,
	64215=>163539, 64216=>40771, 64217=>40846, 64285=>1497, 64287=>1522, 64298=>1513, 64299=>1513, 64300=>64329,
	64301=>64329, 64302=>1488, 64303=>1488, 64304=>1488, 64305=>1489, 64306=>1490, 64307=>1491, 64308=>1492,
	64309=>1493, 64310=>1494, 64312=>1496, 64313=>1497, 64314=>1498, 64315=>1499, 64316=>1500, 64318=>1502,
	64320=>1504, 64321=>1505, 64323=>1507, 64324=>1508, 64326=>1510, 64327=>1511, 64328=>1512, 64329=>1513,
	64330=>1514, 64331=>1493, 64332=>1489, 64333=>1499, 64334=>1508, 69786=>69785, 69788=>69787, 69803=>69797,
	69934=>69937, 69935=>69938, 119134=>119127, 119135=>119128, 119136=>119135, 119137=>119135, 119138=>119135, 119139=>119135,
	119140=>119135, 119227=>119225, 119228=>119226, 119229=>119227, 119230=>119228, 119231=>119227, 119232=>119228, 194560=>20029,
	194561=>20024, 194562=>20033, 194563=>131362, 194564=>20320, 194565=>20398, 194566=>20411, 194567=>20482, 194568=>20602,
	194569=>20633, 194570=>20711, 194571=>20687, 194572=>13470, 194573=>132666, 194574=>20813, 194575=>20820, 194576=>20836,
	194577=>20855, 194578=>132380, 194579=>13497, 194580=>20839, 194581=>20877, 194582=>132427, 194583=>20887, 194584=>20900,
	194585=>20172, 194586=>20908, 194587=>20917, 194588=>168415, 194589=>20981, 194590=>20995, 194591=>13535, 194592=>21051,
	194593=>21062, 194594=>21106, 194595=>21111, 194596=>13589, 194597=>21191, 194598=>21193, 194599=>21220, 194600=>21242,
	194601=>21253, 194602=>21254, 194603=>21271, 194604=>21321, 194605=>21329, 194606=>21338, 194607=>21363, 194608=>21373,
	194609=>21375, 194610=>21375, 194611=>21375, 194612=>133676, 194613=>28784, 194614=>21450, 194615=>21471, 194616=>133987,
	194617=>21483, 194618=>21489, 194619=>21510, 194620=>21662, 194621=>21560, 194622=>21576, 194623=>21608, 194624=>21666,
	194625=>21750, 194626=>21776, 194627=>21843, 194628=>21859, 194629=>21892, 194630=>21892, 194631=>21913, 194632=>21931,
	194633=>21939, 194634=>21954, 194635=>22294, 194636=>22022, 194637=>22295, 194638=>22097, 194639=>22132, 194640=>20999,
	194641=>22766, 194642=>22478, 194643=>22516, 194644=>22541, 194645=>22411, 194646=>22578, 194647=>22577, 194648=>22700,
	194649=>136420, 194650=>22770, 194651=>22775, 194652=>22790, 194653=>22810, 194654=>22818, 194655=>22882, 194656=>136872,
	194657=>136938, 194658=>23020, 194659=>23067, 194660=>23079, 194661=>23000, 194662=>23142, 194663=>14062, 194664=>14076,
	194665=>23304, 194666=>23358, 194667=>23358, 194668=>137672, 194669=>23491, 194670=>23512, 194671=>23527, 194672=>23539,
	194673=>138008, 194674=>23551, 194675=>23558, 194676=>24403, 194677=>23586, 194678=>14209, 194679=>23648, 194680=>23662,
	194681=>23744, 194682=>23693, 194683=>138724, 194684=>23875, 194685=>138726, 194686=>23918, 194687=>23915, 194688=>23932,
	194689=>24033, 194690=>24034, 194691=>14383, 194692=>24061, 194693=>24104, 194694=>24125, 194695=>24169, 194696=>14434,
	194697=>139651, 194698=>14460, 194699=>24240, 194700=>24243, 194701=>24246, 194702=>24266, 194703=>172946, 194704=>24318,
	194705=>140081, 194706=>140081, 194707=>33281, 194708=>24354, 194709=>24354, 194710=>14535, 194711=>144056, 194712=>156122,
	194713=>24418, 194714=>24427, 194715=>14563, 194716=>24474, 194717=>24525, 194718=>24535, 194719=>24569, 194720=>24705,
	194721=>14650, 194722=>14620, 194723=>24724, 194724=>141012, 194725=>24775, 194726=>24904, 194727=>24908, 194728=>24910,
	194729=>24908, 194730=>24954, 194731=>24974, 194732=>25010, 194733=>24996, 194734=>25007, 194735=>25054, 194736=>25074,
	194737=>25078, 194738=>25104, 194739=>25115, 194740=>25181, 194741=>25265, 194742=>25300, 194743=>25424, 194744=>142092,
	194745=>25405, 194746=>25340, 194747=>25448, 194748=>25475, 194749=>25572, 194750=>142321, 194751=>25634, 194752=>25541,
	194753=>25513, 194754=>14894, 194755=>25705, 194756=>25726, 194757=>25757, 194758=>25719, 194759=>14956, 194760=>25935,
	194761=>25964, 194762=>143370, 194763=>26083, 194764=>26360, 194765=>26185, 194766=>15129, 194767=>26257, 194768=>15112,
	194769=>15076, 194770=>20882, 194771=>20885, 194772=>26368, 194773=>26268, 194774=>32941, 194775=>17369, 194776=>26391,
	194777=>26395, 194778=>26401, 194779=>26462, 194780=>26451, 194781=>144323, 194782=>15177, 194783=>26618, 194784=>26501,
	194785=>26706, 194786=>26757, 194787=>144493, 194788=>26766, 194789=>26655, 194790=>26900, 194791=>15261, 194792=>26946,
	194793=>27043, 194794=>27114, 194795=>27304, 194796=>145059, 194797=>27355, 194798=>15384, 194799=>27425, 194800=>145575,
	194801=>27476, 194802=>15438, 194803=>27506, 194804=>27551, 194805=>27578, 194806=>27579, 194807=>146061, 194808=>138507,
	194809=>146170, 194810=>27726, 194811=>146620, 194812=>27839, 194813=>27853, 194814=>27751, 194815=>27926, 194816=>27966,
	194817=>28023, 194818=>27969, 194819=>28009, 194820=>28024, 194821=>28037, 194822=>146718, 194823=>27956, 194824=>28207,
	194825=>28270, 194826=>15667, 194827=>28363, 194828=>28359, 194829=>147153, 194830=>28153, 194831=>28526, 194832=>147294,
	194833=>147342, 194834=>28614, 194835=>28729, 194836=>28702, 194837=>28699, 194838=>15766, 194839=>28746, 194840=>28797,
	194841=>28791, 194842=>28845, 194843=>132389, 194844=>28997, 194845=>148067, 194846=>29084, 194847=>148395, 194848=>29224,
	194849=>29237, 194850=>29264, 194851=>149000, 194852=>29312, 194853=>29333, 194854=>149301, 194855=>149524, 194856=>29562,
	194857=>29579, 194858=>16044, 194859=>29605, 194860=>16056, 194861=>16056, 194862=>29767, 194863=>29788, 194864=>29809,
	194865=>29829, 194866=>29898, 194867=>16155, 194868=>29988, 194869=>150582, 194870=>30014, 194871=>150674, 194872=>30064,
	194873=>139679, 194874=>30224, 194875=>151457, 194876=>151480, 194877=>151620, 194878=>16380, 194879=>16392, 194880=>30452,
	194881=>151795, 194882=>151794, 194883=>151833, 194884=>151859, 194885=>30494, 194886=>30495, 194887=>30495, 194888=>30538,
	194889=>16441, 194890=>30603, 194891=>16454, 194892=>16534, 194893=>152605, 194894=>30798, 194895=>30860, 194896=>30924,
	194897=>16611, 194898=>153126, 194899=>31062, 194900=>153242, 194901=>153285, 194902=>31119, 194903=>31211, 194904=>16687,
	194905=>31296, 194906=>31306, 194907=>31311, 194908=>153980, 194909=>154279, 194910=>154279, 194911=>31470, 194912=>16898,
	194913=>154539, 194914=>31686, 194915=>31689, 194916=>16935, 194917=>154752, 194918=>31954, 194919=>17056, 194920=>31976,
	194921=>31971, 194922=>32000, 194923=>155526, 194924=>32099, 194925=>17153, 194926=>32199, 194927=>32258, 194928=>32325,
	194929=>17204, 194930=>156200, 194931=>156231, 194932=>17241, 194933=>156377, 194934=>32634, 194935=>156478, 194936=>32661,
	194937=>32762, 194938=>32773, 194939=>156890, 194940=>156963, 194941=>32864, 194942=>157096, 194943=>32880, 194944=>144223,
	194945=>17365, 194946=>32946, 194947=>33027, 194948=>17419, 194949=>33086, 194950=>23221, 194951=>157607, 194952=>157621,
	194953=>144275, 194954=>144284, 194955=>33281, 194956=>33284, 194957=>36766, 194958=>17515, 194959=>33425, 194960=>33419,
	194961=>33437, 194962=>21171, 194963=>33457, 194964=>33459, 194965=>33469, 194966=>33510, 194967=>158524, 194968=>33509,
	194969=>33565, 194970=>33635, 194971=>33709, 194972=>33571, 194973=>33725, 194974=>33767, 194975=>33879, 194976=>33619,
	194977=>33738, 194978=>33740, 194979=>33756, 194980=>158774, 194981=>159083, 194982=>158933, 194983=>17707, 194984=>34033,
	194985=>34035, 194986=>34070, 194987=>160714, 194988=>34148, 194989=>159532, 194990=>17757, 194991=>17761, 194992=>159665,
	194993=>159954, 194994=>17771, 194995=>34384, 194996=>34396, 194997=>34407, 194998=>34409, 194999=>34473, 195000=>34440,
	195001=>34574, 195002=>34530, 195003=>34681, 195004=>34600, 195005=>34667, 195006=>34694, 195007=>17879, 195008=>34785,
	195009=>34817, 195010=>17913, 195011=>34912, 195012=>34915, 195013=>161383, 195014=>35031, 195015=>35038, 195016=>17973,
	195017=>35066, 195018=>13499, 195019=>161966, 195020=>162150, 195021=>18110, 195022=>18119, 195023=>35488, 195024=>35565,
	195025=>35722, 195026=>35925, 195027=>162984, 195028=>36011, 195029=>36033, 195030=>36123, 195031=>36215, 195032=>163631,
	195033=>133124, 195034=>36299, 195035=>36284, 195036=>36336, 195037=>133342, 195038=>36564, 195039=>36664, 195040=>165330,
	195041=>165357, 195042=>37012, 195043=>37105, 195044=>37137, 195045=>165678, 195046=>37147, 195047=>37432, 195048=>37591,
	195049=>37592, 195050=>37500, 195051=>37881, 195052=>37909, 195053=>166906, 195054=>38283, 195055=>18837, 195056=>38327,
	195057=>167287, 195058=>18918, 195059=>38595, 195060=>23986, 195061=>38691, 195062=>168261, 195063=>168474, 195064=>19054,
	195065=>19062, 195066=>38880, 195067=>168970, 195068=>19122, 195069=>169110, 195070=>38923, 195071=>38923, 195072=>38953,
	195073=>169398, 195074=>39138, 195075=>19251, 195076=>39209, 195077=>39335, 195078=>39362, 195079=>39422, 195080=>19406,
	195081=>170800, 195082=>39698, 195083=>40000, 195084=>40189, 195085=>19662, 195086=>19693, 195087=>40295, 195088=>172238,
	195089=>19704, 195090=>172293, 195091=>172558, 195092=>172689, 195093=>40635, 195094=>19798, 195095=>40697, 195096=>40702,
	195097=>40709, 195098=>40719, 195099=>40726, 195100=>40763, 195101=>173568
}

###################################################################
# Update TSV and generate index

def latest_tsv_url(lang="en")
  #
  # Old URLs:
  # http://toolserver.org/~enwikt/definitions/?sortby=7
  # http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-en.tsv.gz
  # http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-all.tsv.gz
  #
  # New URLs:
  # https://archive.org/download/enwikt-tsv/enwikt-defs-20180420-en.tsv.gz
  # https://archive.org/download/enwikt-tsv/enwikt-defs-20180420-all.tsv.gz
  #
  json = `curl -s https://archive.org/details/wikt-tsv?output=json`.from_json
  files = json["files"].map(&:first).select { |fn| fn[%r{^/wikt-defs-\d+-#{lang}\.tsv\.gz$}] }
  latest = files.sort.last
  "https://archive.org/download/wikt-tsv#{latest}"
end

###################################################################

def update_lowmem(lang="en")
  puts "* Updating Wictionary..."
  print "  |_ latest dump: "
  url = latest_tsv_url(lang)
  puts url.inspect

  FileUtils.mkdir_p CACHE_DIR unless File.exists? CACHE_DIR
  backup(INDEX_FILE)
  backup(TSV_FILE)

  unsorted_index_file = INDEX_FILE + "-unsorted"
  unsorted_index = open(unsorted_index_file, "wb")

  count      = 0
  last_word  = nil

  open(TSV_FILE, "w") do |out|
    IO.popen("curl -s -L #{url} | gunzip -c", "rb") do |tsv|
      tsv.each_line_with_offset do |line, offset|
        out.write(line)
        lang, word, type, definition = line.strip.split("\t")

        next if last_word == word

        unsorted_index.write "#{word}\t#{offset}\n"

        last_word = word
        count    += 1

        print "\e[1G  |_ words retrieved: #{count.commatize}\e[J" if count % 473 == 0
      end

      puts "\e[1G  |_ words retrieved: #{count.commatize}\e[J"
    end
  end

  unsorted_index.close

  print "  |_ sorting index..."
  system("sort", "-f", unsorted_index_file, "-o", INDEX_FILE)
  File.unlink(unsorted_index_file)

  puts
  puts "* Done!"
end

###################################################################

def update(lang="en")
  puts "* Updating Wictionary..."
  print "  |_ latest dump: "
  url = latest_tsv_url(lang)
  puts url.inspect

  FileUtils.mkdir_p CACHE_DIR unless File.exists? CACHE_DIR
  backup(INDEX_FILE)
  backup(TSV_FILE)

  begin
    require 'rbtree'
    word_index = RBTree.new
  rescue LoadError
    word_index = []
    def word_index.store(k,v); self << [k,v]; end
  end

  count      = 0
  last_word  = nil

  open(TSV_FILE, "w") do |out|
    IO.popen("curl -s -L #{url} | gunzip -c", "rb") do |tsv|
      tsv.each_line_with_offset do |line, offset|
        out.write(line)
        lang, word, type, definition = line.strip.split("\t")

        next if last_word == word

        word_index.store word, offset

        last_word = word
        count    += 1

        print "\e[1G  |_ words retrieved: #{count.commatize}\e[J" if count % 137 == 0
      end

      puts "\e[1G  |_ words retrieved: #{count.commatize}\e[J"
    end
  end

  if word_index.is_a? Array
    print "  |_ sorting index..."
    word_index.sort_by! { |word, offset| word.downcase }
    puts
  end

  puts "  |_ writing index to #{INDEX_FILE}..."
  open(INDEX_FILE, "w") do |index|
    word_index.each { |word, offset| index.write "#{word}\t#{offset}\n" }
  end

  puts
  puts "* Done!"
end

###################################################################

def clean
  cache_root = File.expand_path("~/.cache")
  puts "* Clearing #{CACHE_DIR}"
  system("df", "-h", cache_root)
  if system("rm", "-r", CACHE_DIR)
    system("df", "-h", cache_root)
  end
end
  
###################################################################
# Lookup words

def highlight(defn)

  s = defn.dup

  xforms = {
    /^#\s*/ => proc { "<8>*</8> " },

    # p [:squiggle, $1]
    /\{\{([^\|\}]+?)\}\}/ => proc { "<9>[#{$1}]</9>" },

    # p [:squiggle_pair, $1, $2]
    /\{\{([^\|\}]+?)\|([^\}]+?)\}\}/ => proc { "<9>[#{$1}]</9> #{highlight $2}" },

    # p [:brackets, $1, $2]
    /\[\[([^\|]+?)\]\]/ => proc { "<15>#{$1}</15>" },

    # p [:alternate_brackets, $1, $2]
    /\[\[([^\|\]]+?)\|([^\|\]]+?)\]\]/ => proc { highlight "[[#{$2}]]" },

    # p [:emphasis, $1]
    /''([^']+?)''/ => proc { highlight "<15>#{$1}</15>" },
  }

  xforms.each do |pattern,block|
    s.gsub! pattern, &block
  end

  "<7>#{s}</7>"
end

def test_highlighter
  defs = '''
    # {{non-gloss definition|A [[greeting]] ([[salutation]]) said when [[meet]]ing someone or [[acknowledge|acknowledging]] someone’s [[arrival]] or [[presence]].}}
    # {{non-gloss definition|A greeting used when [[answer]]ing the [[telephone]].}}
    # {{non-gloss definition|A call for [[response]] if it is not clear if anyone is present or listening, or if a telephone conversation may have been [[disconnect]]ed.}}
    # {{colloquial}} {{non-gloss definition|Used [[sarcastic]]ally to imply that the person addressed or referred to has done something the speaker or writer considers to be [[foolish]].}}
    # {{non-gloss definition|An expression of [[puzzlement]] or [[discovery]].}}
    # "[[hello#Interjection|Hello]]!" or an equivalent greeting.
    #{{dated}} A female [[telephone operator]]
    # A semi-formal form of [[hello]].
    # {{offensive|but now often|_|humorous}} {{non-gloss definition|A response to being greeted with "[[hello]]".}}
    # [[bright]]/[[light]] [[orange]]
    # {{plural of|hello}}
  '''.lines.map(&:strip).reject(&:blank?)

  defs.each do |defn|
    puts "="*50
    puts highlight(defn).colorize
  end

  exit
end

def greparound(io, pos, query)
  index_lines = []

  grep_proc = proc do |line|
    if line[/^#{query}/]
      index_lines << line
    else
      raise :done
    end
  end

  io.seek pos
  io.reverse_each_from_current_pos(&grep_proc) rescue nil

  index_lines.reverse!

  io.seek pos
  io.gets
  io.each_line(&grep_proc) rescue nil

  index_lines
end

# ------------------------------------------------------ #

def lookup_bsearch(args)
  query = args.join.downcase
  f     = open(INDEX_FILE, "r")
  range = (0...f.size)

  loop do
    return if range.size < 5

    f.seek(range.middle)
    f.seek_backwards_to("\n", 80)

    line                 = f.each_line.first
    current_word, offset = line.split("\t")

    if current_word[/^#{query}/]
      # EXIT POINT
      return index_lines = greparound(f, range.middle, query)
    elsif query < current_word
      range = range.first...range.middle
    else
      range = range.middle...range.last
    end
  end

ensure
  f.close
end

# ------------------------------------------------------ #

def lookup_grep(args)
  query = args.join(" ")
  `grep -iE '^#{query}' #{INDEX_FILE}`
end

def lookup_look(args, last_time: false)
  query = args.join(" ")
  # IO.popen(["look", query, INDEX_FILE], &:read)
  IO.popen(["look", "-f", "--", query, INDEX_FILE], &:read)
end

def lookup(args)
  if which("look")
    lookup_look(args)
  else
    # lookup_bsearch(args)
    lookup_grep(args)
  end
end

# ------------------------------------------------------ #

def load_definitions(matches)
  open(TSV_FILE, "r") do |tsv|
    matches.map do |word, offset|
      defs = []
      tsv.seek(offset)
      last_word = nil
      loop do
        lang, tsv_word, type, definition = tsv.gets.split("\t")
        break if word != tsv_word
        definition.sub!(/^# /, "# <8>[#{lang}] <7>") if lang != "English"
        defs << definition.chomp
      end
      [word, defs]
    end
  end
end

def print_results(index_lines)
  index_lines = index_lines.each_line.to_a if index_lines.is_a?(String)

  if index_lines.empty?
    puts "No results found."
    return
  end

  word_offsets = index_lines.map do |line|
    word, offset = line.split("\t")
    offset = offset.to_i
    [word, offset]
  end

  results = load_definitions(word_offsets)

  lesspipe(wrap: true) do |less|
    results.each do |word, defs|
      less.puts "<14>#{word}</14>".colorize
      defs.each { |defn| less.puts "   #{highlight(defn).colorize}" }
      less.puts
    end
  end
end


###################################################################

def stats
  puts "----------------------------------"
  puts "   Wiktionary Statistics:"
  puts "----------------------------------"

  index_size = File.size INDEX_FILE
  tsv_size   = File.size TSV_FILE

  puts "    TSV size: #{tsv_size.commatize} bytes"
  puts "  Index size: #{index_size.commatize} bytes"

  words = open(INDEX_FILE) { |f| f.each_line.count }
  puts "Unique words: #{words.commatize}"
end

###################################################################


if $0 == __FILE__

  opts, args = parse_options

  if opts[:update] or opts[:all]

    lang = opts[:all] ? "all" : "en"
    #update(lang)
    update_lowmem(lang)

  elsif opts[:clean]

    clean

  else

    ensure_database!

    if opts.stats?
      stats
    elsif args.empty?
      puts "Pass the word(s) you want to look up as (an) argument(s)."
    else
      indexes = lookup(args)
      if indexes.strip.empty?
        # retry without diacritics (accents and stuff)
        args = args.map { |arg| strip_diacritics(arg) }
        indexes = lookup(args)
      end
      print_results(indexes)
    end

  end

end
