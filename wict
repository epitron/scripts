#!/usr/bin/env ruby
# encoding: utf-8
###################################################################
require 'epitools'
###################################################################

CACHE_DIR  = File.expand_path("~/.cache/wict")
INDEX_FILE = File.join CACHE_DIR, "wikt.idx"
TSV_FILE   = File.join CACHE_DIR, "wikt.tsv"

###################################################################

def parse_options
  gem "slop", "~> 3.6"
  require 'slop' # lazy loaded

  opts = Slop.parse(help: true, strict: true) do
    banner 'Usage: wict [options] <word(s)...>'

    on 'u',  'update',  'Download the English wikipedia dictionary'
    on 'a',  'all',     'Download the wikipedia dictionary for all languages'
    on 's',  'stats',   'Dictionary statistics'
  end

  [opts, ARGV]
end

###################################################################
# Utils

def ensure_database!
  unless File.exist? TSV_FILE and File.exist? INDEX_FILE
    $stderr.puts "You must first download a database. Run 'wict -u'."
    exit 1
  end
end

def backup(src)
  if File.exists? src
    counter = 1
    dest = "#{src}.bak"

    while File.exists? dest
      counter += 1
      dest = "#{src}.bak#{counter}"
    end

    puts "  |_ database backed up to: #{dest.inspect}"

    File.rename(src, dest)
  end
end

###################################################################
# Update TSV and generate index

def latest_tsv_url(lang="en")
  #
  # Old URLs:
  # http://toolserver.org/~enwikt/definitions/?sortby=7
  # http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-en.tsv.gz
  # http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-all.tsv.gz
  #
  # New URLs:
  # https://archive.org/download/enwikt-tsv/enwikt-defs-20180420-en.tsv.gz
  # https://archive.org/download/enwikt-tsv/enwikt-defs-20180420-all.tsv.gz
  #
  json = `curl -s https://archive.org/details/wikt-tsv?output=json`.from_json
  files = json["files"].map(&:first).select { |fn| fn[%r{^/wikt-defs-\d+-#{lang}\.tsv\.gz$}] }
  latest = files.sort.last
  "https://archive.org/download/wikt-tsv#{latest}"
end

def update(lang="en")
  puts "* Updating Wictionary..."
  print "  |_ latest dump: "
  url = latest_tsv_url(lang="en")
  puts url.inspect

  FileUtils.mkdir_p CACHE_DIR unless File.exists? CACHE_DIR
  backup(INDEX_FILE)
  backup(TSV_FILE)

  begin
    require 'rbtree'
    word_index = RBTree.new
  rescue LoadError
    word_index = []
    def word_index.store(k,v); self << [k,v]; end
  end

  count      = 0
  last_word  = nil

  open(TSV_FILE, "w") do |out|
    IO.popen("curl -s -L #{url} | gunzip -c", "rb") do |tsv|
      tsv.each_line_with_offset do |line, offset|
        out.write(line)
        lang, word, type, definition = line.strip.split("\t")

        next if last_word == word

        word_index.store word, offset

        last_word = word
        count    += 1

        print "\e[1G  |_ words retrieved: #{count.commatize}\e[J" if count % 137 == 0
      end

      puts "\e[1G  |_ words retrieved: #{count.commatize}\e[J"
    end
  end

  if word_index.is_a? Array
    print "  |_ sorting index..."
    word_index.sort!
    puts
  end

  puts "  |_ writing index to #{INDEX_FILE}..."
  open(INDEX_FILE, "w") do |index|
    word_index.each { |word, offset| index.write "#{word}\t#{offset}\n" }
  end

  puts
  puts "* Done!"
end

###################################################################
# Lookup words

def highlight(defn)

  s = defn.dup

  xforms = {
    /^#\s*/ => proc { "<8>*</8> " },

    # p [:squiggle, $1]
    /\{\{([^\|\}]+?)\}\}/ => proc { "<9>[#{$1}]</9>" },

    # p [:squiggle_pair, $1, $2]
    /\{\{([^\|\}]+?)\|([^\}]+?)\}\}/ => proc { "<9>[#{$1}]</9> #{highlight $2}" },

    # p [:brackets, $1, $2]
    /\[\[([^\|]+?)\]\]/ => proc { "<15>#{$1}</15>" },

    # p [:alternate_brackets, $1, $2]
    /\[\[([^\|\]]+?)\|([^\|\]]+?)\]\]/ => proc { highlight "[[#{$2}]]" },

    # p [:emphasis, $1]
    /''([^']+?)''/ => proc { highlight "<15>#{$1}</15>" },
  }

  xforms.each do |pattern,block|
    s.gsub! pattern, &block
  end

  "<7>#{s}</7>"
end

def test_highlighter
  defs = '''
    # {{non-gloss definition|A [[greeting]] ([[salutation]]) said when [[meet]]ing someone or [[acknowledge|acknowledging]] someoneâ€™s [[arrival]] or [[presence]].}}
    # {{non-gloss definition|A greeting used when [[answer]]ing the [[telephone]].}}
    # {{non-gloss definition|A call for [[response]] if it is not clear if anyone is present or listening, or if a telephone conversation may have been [[disconnect]]ed.}}
    # {{colloquial}} {{non-gloss definition|Used [[sarcastic]]ally to imply that the person addressed or referred to has done something the speaker or writer considers to be [[foolish]].}}
    # {{non-gloss definition|An expression of [[puzzlement]] or [[discovery]].}}
    # "[[hello#Interjection|Hello]]!" or an equivalent greeting.
    #{{dated}} A female [[telephone operator]]
    # A semi-formal form of [[hello]].
    # {{offensive|but now often|_|humorous}} {{non-gloss definition|A response to being greeted with "[[hello]]".}}
    # [[bright]]/[[light]] [[orange]]
    # {{plural of|hello}}
  '''.lines.map(&:strip).reject(&:blank?)

  defs.each do |defn|
    puts "="*50
    puts highlight(defn).colorize
  end

  exit
end

def greparound(io, pos, query)
  index_lines = []

  grep_proc = proc do |line|
    if line[/^#{query}/]
      index_lines << line
    else
      raise :done
    end
  end

  io.seek pos
  io.reverse_each_from_current_pos(&grep_proc) rescue nil

  index_lines.reverse!

  io.seek pos
  io.gets
  io.each_line(&grep_proc) rescue nil

  index_lines
end

# ------------------------------------------------------ #

def lookup_bsearch(args)
  query = args.join.downcase
  f     = open(INDEX_FILE, "r")
  range = (0...f.size)

  loop do
    return if range.size < 5

    f.seek(range.middle)
    f.seek_backwards_to("\n", 80)

    line                 = f.each_line.first
    current_word, offset = line.split("\t")

    if current_word[/^#{query}/]
      # EXIT POINT
      return index_lines = greparound(f, range.middle, query) 
    elsif query < current_word
      range = range.first...range.middle
    else
      range = range.middle...range.last
    end
  end
 
ensure
  f.close
end
 
# ------------------------------------------------------ #

def lookup_grep(args)
  query = args.join
  `grep -iE '^#{query}' #{INDEX_FILE}`
end

# ------------------------------------------------------ #

def lookup_look(args)
  query = args.join
  # IO.popen(["look", query, INDEX_FILE], &:read)
  IO.popen(["look", "-f", query, INDEX_FILE], &:read)
end

# ------------------------------------------------------ #

def lookup(args)
  if which("look")
    lookup_look(args)
  else
    # lookup_bsearch(args)
    lookup_grep(args)
  end
end

# ------------------------------------------------------ #

def load_definitions(matches)
  open(TSV_FILE, "r") do |tsv|
    matches.map do |word, offset|
      defs = []
      tsv.seek(offset)
      last_word = nil
      loop do
        lang, tsv_word, type, definition = tsv.gets.split("\t")
        break if word != tsv_word
        defs << definition.chomp
      end
      [word, defs]
    end
  end
end

def print_results(index_lines)
  index_lines = index_lines.each_line.to_a if index_lines.is_a?(String)

  if index_lines.empty?
    puts "No results found."
    return
  end

  word_offsets = index_lines.map do |line|
    word, offset = line.split("\t")
    offset = offset.to_i
    [word, offset]
  end

  results = load_definitions(word_offsets)

  lesspipe(wrap: true) do |less|
    results.each do |word, defs|
      less.puts "<14>#{word}</14>".colorize
      defs.each { |defn| less.puts "   #{highlight(defn).colorize}" }
      less.puts
    end
  end
end


###################################################################

def stats
  puts "----------------------------------"
  puts "   Wiktionary Statistics:"
  puts "----------------------------------"

  index_size = File.size INDEX_FILE
  tsv_size   = File.size TSV_FILE

  puts "    TSV size: #{tsv_size.commatize} bytes"
  puts "  Index size: #{index_size.commatize} bytes"

  words = open(INDEX_FILE) { |f| f.each_line.count }
  puts "Unique words: #{words.commatize}"
end

###################################################################


if $0 == __FILE__

  opts, args = parse_options

  if opts[:update] or opts[:all]

    lang = opts[:all] ? "all" : "en"
    update(lang)

  else

    ensure_database!

    if opts.stats?
      stats
    elsif args.empty?
      puts "Pass the word(s) you want to look up as (an) argument(s)."
    else
      indexes = lookup(args)
      print_results(indexes)
    end

  end

end
