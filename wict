#!/usr/bin/env ruby
# encoding: utf-8

require 'epitools'
require "tokyocabinet"

include TokyoCabinet

###################################################################

# http://toolserver.org/~enwikt/definitions/?sortby=7
# ENGLISH   = "http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-en.tsv.gz"
# ALL       = "http://tools.wmflabs.org/enwiktdefns/enwikt-defs-latest-all.tsv.gz"
ENGLISH   = "http://chris.ill-logic.com/files/enwikt-defs-latest-en.tsv.gz"
ALL       = "http://chris.ill-logic.com/files/enwikt-defs-latest-all.tsv.gz"

CACHE_DIR = File.expand_path("~/.cache/wict")
INDEX     = File.join CACHE_DIR, "enwikt-defs.idx"

###################################################################

def options
  gem "slop", "~> 3.6"
  require 'slop' # lazy loaded

  @opts ||= Slop.parse(help: true, strict: true) do
    banner 'Usage: wict [options] <word(s)...>'

    on 'u',  'update',  'Download the English wikipedia dictionary'
    on 'a',  'all',     'Download the wikipedia dictionary for all languages'
  end
end

def bdb_open(filename, opts=nil)
  bdb = BDB::new  # B-Tree database; keys may have multiple values

  if !bdb.open(filename, opts)
    raise "open error: #{bdb.errmsg(bdb.ecode)} (filename: #{filename.inspect})"
  end

  if block_given?
    result = yield bdb
    bdb.close
    result
  else
    bdb
  end
end

def backup(src)
  if File.exists? src
    counter = 1
    dest = "#{src}.bak"

    while File.exists? dest
      counter += 1
      dest = "#{src}.bak#{counter}"
    end

    puts "  |_ database backed up to: #{dest.inspect}"

    File.rename(src, dest)
  end
end

###################################################################

def update

  url = options.a? ? ALL : ENGLISH

  puts "* Re-importing database..."
  puts "  |_ source: #{url.inspect}"

  backup(INDEX)

  IO.popen("curl -s #{url} | gunzip -c", "r") do |tsv|

    bdb_open(INDEX, BDB::OWRITER | BDB::OCREAT) do |bdb|

      tsv.each.with_index do |line, n|
        lang, word, type, definition = line.strip.split("\t")
        #p [:lang, lang, :word, word, :type, type, :definition, definition]

        # TODO: figure out how to do case-insensitive searches without downcasing the actual key
        bdb.putdup(word.downcase, definition)

        print "\e[1G  |_ words imported: #{n.commatize}\e[J" if n % 137 == 0
      end

      puts
      puts "* Done!"

    end
  end

end  

###################################################################

def lookup(args)

  bdb_open(INDEX) do |bdb|
    lesspipe(wrap: true) do |less|

      args.map(&:downcase).each do |arg|

        words = bdb.fwmkeys(arg)
        
        words.each do |word|
          defs = bdb.getlist(word)
          if defs.any?
            less.puts "<14>#{word}</14>".colorize
            defs.each { |defn| less.puts "   #{highlight(defn).colorize}" }
            less.puts
          end
        end

      end

    end
  end

end

def wordcount
  bdb_open(INDEX) { |bdb| bdb.size }
end

def highlight(defn)

  s = defn.dup

  xforms = {
    /^#\s*/ => proc { "<8>*</8> " },
    /\{\{([^\|\}]+?)\}\}/ => proc do
      # p [:squiggle, $1]
      "<9>[#{$1}]</9>"
    end,
    /\{\{([^\|\}]+?)\|([^\}]+?)\}\}/ => proc do
      # p [:squiggle_pair, $1, $2]
      "<9>[#{$1}]</9> #{highlight $2}"
    end,
    /\[\[([^\|]+?)\]\]/ => proc do
      # p [:brackets, $1, $2]
      "<15>#{$1}</15>"
    end,
    /\[\[([^\|\]]+?)\|([^\|\]]+?)\]\]/ => proc do
      # p [:alternate_brackets, $1, $2]
      highlight "[[#{$2}]]"
    end,
  }

  xforms.each do |pattern,block|
    s.gsub! pattern, &block
  end

  "<7>#{s}</7>"
end

def test_highlighter
  defs = '''
    # {{non-gloss definition|A [[greeting]] ([[salutation]]) said when [[meet]]ing someone or [[acknowledge|acknowledging]] someoneâ€™s [[arrival]] or [[presence]].}}
    # {{non-gloss definition|A greeting used when [[answer]]ing the [[telephone]].}}
    # {{non-gloss definition|A call for [[response]] if it is not clear if anyone is present or listening, or if a telephone conversation may have been [[disconnect]]ed.}}
    # {{colloquial}} {{non-gloss definition|Used [[sarcastic]]ally to imply that the person addressed or referred to has done something the speaker or writer considers to be [[foolish]].}}
    # {{non-gloss definition|An expression of [[puzzlement]] or [[discovery]].}}
    # "[[hello#Interjection|Hello]]!" or an equivalent greeting.
    #{{dated}} A female [[telephone operator]]
    # A semi-formal form of [[hello]].
    # {{offensive|but now often|_|humorous}} {{non-gloss definition|A response to being greeted with "[[hello]]".}}
    # [[bright]]/[[light]] [[orange]]
    # {{plural of|hello}}
  '''.lines.map(&:strip).reject(&:blank?)

  defs.each do |defn|
    puts "="*50
    puts highlight(defn).colorize
  end

  exit
end

###################################################################


if $0 == __FILE__

  # test_highlighter

  Dir.mkdir CACHE_DIR unless File.exists? CACHE_DIR

  if options.u? or options.a?

    update

  else

    if not File.exists? INDEX
      puts "You must first download a database. Run 'wict -u'."
      exit 1
    elsif ARGV.empty?
      puts "Pass the word(s) you want to look up as (an) argument(s)."
      puts "(#{wordcount} words in dictionary)"
    else
      lookup(ARGV)
    end
    
  end

end
