#!/usr/bin/env ruby
################################################################
require 'digest'
################################################################

HASHERS = {
  "--md5"    => Digest::MD5,
  "--sha1"   => Digest::SHA1,
  "--sha256" => Digest::SHA256,
  "--sha512" => Digest::SHA512,
}

BLOCKSIZE=2**14 # 16k read size

################################################################

def usage
  puts "Usage:"
  puts "  pipesum [options...]"
  puts
  puts "Purpose:"
  puts "  Insert this into a pipeline to hash data on the fly, and output"
  puts "  the computed hash(es) to STDERR."
  puts
  puts "Options:"
  puts "  --all     => Compute all hash functions"
  HASHERS.each do |opt, klass|
    puts "  #{opt.ljust(9)} => #{klass}"
  end
  puts
  puts "(Note: Defaults to --sha1 if no options specified)"
  puts
  puts "Example:"
  puts "  curl http://hostname.website/file.iso | pipesum --sha1 > file.iso"
  puts
end

################################################################

opts, args = ARGV.partition { |arg| arg[/^--?\w/] }

if opts.delete("--help") or opts.delete("-h")
  usage
  exit
end

opts += ["--md5", "--sha1", "--sha256"] if opts.empty?

if opts.delete("--all")
  opts += HASHERS.keys
end

################################################################

digests = []

opts.uniq.each do |opt|
  if klass = HASHERS[opt]
    digests << klass.new
  else
    puts "Unrecognized option: #{opt}"
    exit 1
  end
end

################################################################

def sum(digests, input, output=nil, messages=$stderr)
  while data = input.read(BLOCKSIZE)
    digests.each {|digest| digest << data }
    output.write(data) if output
  end

  digests.each do |digest|
    algo = digest.class.to_s.split("::").last
    messages.puts "#{algo.rjust(9)}: #{digest}"
  end
  output.close if output
end

if args.any?
  args.each do |arg|
    # puts "=== #{arg} ========================================="
    puts arg

    begin
      open(arg, "rb") { |f| sum(digests, f, nil, $stdout) }
    rescue => e
      puts "   #{e.inspect}"
    end

    puts
  end
else
  sum(digests, $stdin, $stdout)
end
