#!/usr/bin/env ruby
gem "slop", "~> 3.6"
require 'slop'
require 'epitools'

VIDEO_EXTS = %[mp4 mkv avi mov mpg mpeg m4v webm]
AUDIO_EXTS = %[mp3 aac m4a]

def parse_options
  #@opts ||= Slop.new
  @opts = Slop.parse(help: true, strict: true) do
    banner 'Usage: clip [options] <videos...>'

    on 'o=', 'output',   'The file to write the clip to.'
    on 'a=', 'acodec',   'Output audio codec (eg: mp3, aac)', default: "copy"
    on 'v=', 'vcodec',   'Output video codec', default: "copy"
    on 'c',  'codecs',   'List the availiable codecs'
    on 'b',  'bob',      'Bob deinterlace (using yadif)'
    on 'q=', 'quantizer','How quantized do you like it? (only matters when using vcodec)'
    on 's=', 'start',    'Start of clip (HH:MM:SS or SS format)'
    on 'e=', 'end',      'End of clip'
    on 'l=', 'length',   'Length of clip'
    on 'u=', 'use',      'Tool to use (ffmpeg, mencoder)', default: "ffmpeg"
    on 't=', 'tracks',   'Which tracks to copy (comma-separated, eg: "-t 0,3" or "-t a:0,v:2")'
  end
end

## Time diffing

COEFFS = [24*60*60, 60*60, 60, 1]

def to_sec(t)
  bits = t.split(":").map{|x| x.to_i}
  bits.reverse.zip(COEFFS.reverse).map{|c,n| c*n}.sum
end

def to_time(s)
  result = COEFFS.map do |c|
    num, s = s.divmod(c)
    num
  end

  result.shift      while result.first == 0
  result.unshift 0  while result.size < 2

  result.map{|n| "%0.2d" % n}.join(":")
end

def timediff(a,b)
  to_time(to_sec(b) - to_sec(a))
end


#############################################################################


if $0 == __FILE__

  opts = parse_options
  files = ARGV

  if opts.codecs?

    case opts[:use]
    when "ffmpeg"
      system("ffmpeg", "-codecs")

    when "mencoder"
      %w[oac ovc].each do |oac_or_ovc|
        system("mencoder", "-#{oac_or_ovc}", "help")
      end
    end

    exit

  end

  ## Files

  if files.size != 1
    if files.any?
      puts "ERROR: More than one input file specified."
    else
      puts "ERROR: No input file specified."
    end
    exit 1
  end

  infile  = Path[files.first]
  outfile = Path[opts[:output]]

  unless infile.exists? or infile.url?
    puts "ERROR: Input file not found: #{infile}"
    exit 1
  end


  ## Compute length

  start  = opts[:start]
  length = opts[:length]

  if length.nil? and opts[:end]
    if start
      length = timediff(start, opts[:end])
    else
      length = opts[:end]
    end
  end


  ## Create commandline

  unless outfile
    outfile = infile.url? ? Path[infile.filename] : infile
    outfile = outfile.with(basename: outfile.basename + "_clip-#{start}-#{length}")
  end

  if (VIDEO_EXTS+AUDIO_EXTS).include? infile.ext

    case opts[:use]
    when "ffmpeg"
      cmd = ["ffmpeg", "-i", infile.to_s]
      cmd += ["-codec:v", opts[:vcodec]]
      cmd += ["-crf", opts[:quantizer]] if opts.quantizer?
      cmd += ["-codec:a", opts[:acodec]]
      cmd += ["-ss", start] if start
      cmd += ["-t", length] if length
      cmd += ["-vf", "yadif=1"] if opts.bob?


      if tracks = opts[:tracks]
        cmd += tracks.split(",").map {|t| ["-map", "0:#{t}"] }.flatten
      end

      cmd << outfile

    when "mencoder"
      cmd = [
        "mencoder", infile,
        "-o", outfile,
        "-ss", start,
        "-of", "lavf", "-lavfopts", "format=#{outfile.ext}"
      ]

      cmd += ["-endpos", length] if length
      cmd += ["-ovc", opts[:vcodec]]

      case opts[:acodec]
      when "mp3"
        # -oac mp3lame -lameopts vbr=2:q=0:aq=0 or preset=standard (170-210kbps)
        cmd += ["-oac", "mp3lame"]
      else
        cmd += ["-oac", opts[:acodec]]
      end

    else
      raise "Unknown tool: #{opts[:use]}"
    end

  else
    raise "Unknown file type"
  end

  if outfile.exists? and opts[:use] != "ffmpeg"
    if prompt("Overwrite #{outfile}?", "yN") == "n"
      puts "Aborting..."
      exit
    end
  end


  ## Rip it!
  p cmd
  system(*cmd)

end