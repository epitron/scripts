#!/usr/bin/env ruby
##################################################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'
##################################################################################

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: hex [options] <filename>"

    on 's',  'sectors',  'Highlight sectors (512-byte chunks)'
    on 'a',  'all',      "Show all chars (don't skip NULLs)"
    on 'c=', 'chunks',   'Highlight chunks of the specified size'
  end

  [opts, ARGV]
end

##################################################################################

opts, args = parse_options

##################################################################################
#
# Constants in the calculation of bytes_per_line:
#   3 chars per hex byte
#   8 chars for the offset
#   6 chars total for padding
#   2 chars for margins
#   (the rest is the bytes_per_line)
#
bytes_per_line = (Term.width - 16) / 4  # Derived from: bytes_per_line = Term.width - 3*bytes_per_line - 8 - 6 - 2
empty_line     = ["\0"] * bytes_per_line
skip_begins_at = nil

sector_size =
  if opts[:sectors]
    512
  elsif opts[:chunks]
    opts[:chunks].to_i
  else
    nil
  end

##################################################################################

highlight_colors = {
  hex:  [7, 15],
  text: [7, 15]
}

highlight = proc do |type, chars, offset|
  colors               = highlight_colors[type]
  sector_num, underlap = offset.divmod(sector_size)
  overlap              = sector_size - underlap

  chunks = []

  if underlap >= 0
    color = colors[sector_num % 2]
    chunks << [ "<#{color}>", chars[0...overlap] ]
  end

  (overlap..chars.size).step(sector_size).with_index do |chunk_offset, index|
    color = colors[(sector_num + index + 1) % 2]
    chunks << [ "<#{color}>", chars[chunk_offset...chunk_offset+sector_size] ]
  end

  chunks.flatten
end

# #
# # Super awesome `highlight` test
# #
# sector_size = 4
# 1000.times do  |offset|
#   print "\e[2J"
#   puts highlight.(:hex, "highlight.the.shit.out.of.me", offset)
#   sleep 0.1
# end
# exit

##################################################################################

lesspipe do |less|

  print_line = proc do |chars, line|
    offset = bytes_per_line * line

    # Skip nulls
    if chars == empty_line
      skip_begins_at = offset unless skip_begins_at
      next
    end

    if skip_begins_at
      skip_length = offset - skip_begins_at
      less.puts "         <8>[ <4>skipped <12>#{skip_length.commatize} <4>bytes of NULLs <8>(<12>#{skip_begins_at.commatize}<4> to <12>#{offset.commatize}<8>) <8>] ".colorize
      skip_begins_at = nil
    end

    hex = chars.map { |b| "%0.2x " % b.ord }
    underflow = bytes_per_line - hex.size
    hex += ['   ']*underflow if underflow > 0

    # Offset
    a = "<3>%0.8x</3>" % offset

    # Hex
    b = sector_size ? highlight.(:hex, hex, offset) :  hex

    # Chars
    c = sector_size ? highlight.(:text, chars, offset) : chars

    # Replace unprintable characters
    c = c.map do |c|
      case c.ord
      when 32..126
        c
      when 0
        "<8>_</8>"
      else
        "<8>.</8>"
      end
    end

    less.puts "#{a} #{b.join} <8>|<7>#{c.join}</7><8>|".colorize
  end

  ##################################################################################

  args.each do |arg|
    less.puts "<8>=== <11>#{arg} <8>============".colorize
    less.puts

    skip_begins_at = nil

    open(arg, "rb") do |io|
      io.each_char.each_slice(bytes_per_line).with_index(&print_line)
    end
  end
end

##################################################################################