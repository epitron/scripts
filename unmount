#!/usr/bin/env ruby
require 'epitools'

# /dev/sda2 on / type ext4 (rw,errors=remount-ro,commit=0)

class Mount < Struct.new(:dev, :path, :type, :options)

  def self.from_line(line)
    if line =~ %r{^(\S+) on (\S+) type (\S+) \((\S+)\)$}
      new($1, $2, $3, $4)
    end
  end

end

fuser_types = {
 "c"=>"current directory",
 "e"=>"executable being run",
 "f"=>"open file",
 "F"=>"open file for writing",
 "r"=>"root directory",
 "m"=>"mmap'ed file or shared library"
}

def processes_holding(mountpoint)
  # procs = Sys.ps
  # /maverick:            1865 10335c 14155c 14156c 14157c 14165c 14178c
  # if `fuser -M -m #{mountpoint}` =~ /#{mointpoint}:\s+(.+)/
  #   pids, types = $1.scan(/(\d+)(.*)/).transpose
  #   Sys.ps.zip types
  # end

  system("fuser", "-v", "-m", mountpoint)
  # system("lsof", "+D", mountpoint)
end

def kill_processes_holding(mountpoint)
  system("fuser", "-k", mountpoint)
end

def mounts
  `mount`.lines.map{|line| Mount.from_line(line) }.compact
end

def unmount(arg)

  print "unmount #{arg.inspect}: "

  unless File.directory? arg
    puts "FAIL! (not a directory)"
    return false
  end

  realpath = File.realpath(arg)

  mount = mounts.
            select { |mount| realpath[/^#{Regexp.escape mount.path}/] }.
            sort_by { |m| m.path.size }.
            last

  unless mount
    puts "FAIL! (not mounted)"
    return false
  end

  # Do the unmount
  success = if mount.type[/^fuse/]
              if bin = which("fusermount", "fusermount3", "fusermount2")
                system(bin, "-u", mount.path)
              else
                puts "ERROR: Couldn't find 'fusermount' binary in the path"
                exit 1
              end
            else
              system("sudoifnotroot", "umount", mount.path)
            end

  if success
    puts "SUCCESS!"
  else
    puts "FAIL!"

    puts
    puts "Processes holding the filesystem open:"
    processes_holding(mount.path)
    puts

    if prompt("Kill these processes?") == "y"
      kill_processes_holding(mount.path)
      unmount(arg)
    else
      puts "Skipping..."
      puts
    end
  end
end

args = ARGV

unless args.any?
  puts "usage: unmount <directory> [ <directory> [ ... ] ]"
  exit 1
end

for arg in args
  unmount(arg)
end
