#!/usr/bin/env ruby
#################################################################################################

gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'

#################################################################################################

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: pulse-set-output [options] <output audio device number>"

    on "t",  "toggle",  "Toggle output of apps between two devices (takes 2 audio devices)"
  end

  [opts, ARGV]
end

#################################################################################################

def apps
  @apps ||= `pacmd list-sink-inputs`.each_line.split_before(/ index: /).map do |lines|
    pairs = lines.map do |line|
      if line =~ /\s+(\S+): (\S+)/
        [$1, $2]
      elsif line =~ /\s+(\S+) = "([^"]+)"/
        [$1, $2]
      end
    end.compact

    pairs.empty? ? nil : pairs.to_h
  end.compact
end

#################################################################################################

def sinks
  @sinks ||= `pacmd list-sinks`.each_line.split_before(/ index: /).map do |lines|
    pairs = lines.map do |line|
      if line =~ /(\*?) index: (\d+)/
        [[:default, $1 == "*"], [:index, $2]]
      elsif line =~ /\s+(\S+): (\S+)/
        [$1, $2]
      elsif line =~ /\s+(\S+) = "([^"]+)"/
        [$1, $2]
      end
    end.compact

    pairs.empty? ? nil : pairs.flatten.each_slice(2).to_h
  end.compact
end

#################################################################################################
#
# Type: :error, :info, :video
#
def notify(type, title, body, time: 5)
  require 'cgi'

  puts "[#{type}] #{title}"
  puts "  #{body}"

  time_in_ms = time * 1000

  cmd = ["notify-send"]
  cmd << "--expire-time=#{time_in_ms}"
  cmd << "--app-name=play"
  cmd << "--icon=#{type}"
  cmd += [title, body].map {|s| CGI.escapeHTML s }

  system *cmd
end

#################################################################################################

opts, args = parse_options

unless (opts.toggle? and args.size == 2) or (args.size == 1)

  # Show help
  puts opts
  puts
  puts "Purpose: Redirect all programs' audio to a specific device"
  puts
  puts "Available Devices:"
  `pactl list sinks`.scan(/(?:Sink #(\d+)|Description: (.+))/).flatten.compact.each_slice(2) do |sink, desc|
    puts "  Device ##{sink}: #{desc}"
  end

  exit 1

else

  if opts.toggle?
    # Use current default sink to pick which to toggle to
    sink_nums = sinks.map { |s| s[:index] }

    undefined = args - sink_nums

    if undefined.any?
      puts "Error: You specified some sinks that don't exist: #{undefined.inspect}"
      exit 1
    end

    default_sink = sinks.find { |sink| sink[:default] }
    target = (args - [default_sink[:index]]).first
  else
    # User specified target directly
    target = args.first
  end

  sink = sinks.find { |s| s[:index] == target }

  notify :info, "Switching Audio Output", "Sink ##{sink[:index]} (#{sink["device.description"]})"

  apps.each do |app|
    next if app["driver"]["module-combine-sink"]

    puts "  #{app["media.name"]}"
    system("pacmd", "move-sink-input", app["index"], sink[:index])
  end

  system("pacmd", "set-default-sink", sink[:index])

end
