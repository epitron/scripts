#!/usr/bin/env ruby
require 'epitools'

DISCS_DIR = Path["~/archive/discs"]

class Mount
  attr_accessor :dev, :type, :options

  def initialize(line)
    @path, @dev, @type, @options = line.strip.split(' ')
    @options = @options.split(",")
  end

  def system?
    (path =~ %r{^/(sys|dev|proc|run/user|tmp)}) or dev == "systemd-1"
  end

  def inspect
    "#{type}: #{path} (#{dev})"
  end

  def to_s
    "#{path} (#{dev})"
  end

  def path
    # Unescape findmnt's hex codes
    Path.new "#{eval %{"#{@path}"}}/"
  end

  def dirname
    path.dirs.last
  end
end

mounts = IO.popen(["findmnt", "--raw"]) { |io| io.drop(1).map { |line| Mount.new line } }

discs = mounts.select { |m| m.type.in? %w[udf iso9660] }

discs.each do |m|
  filename = "#{ARGV.first || m.dirname}.txt"

  if prompt("* Import #{m.inspect} as #{filename.inspect}?") == "y"
    outfile = DISCS_DIR / filename
    puts "  |_ writing to #{outfile}"

    if outfile.exists?
      if prompt("  |_ #{outfile} already exists.. Overwrite?", "Yn") == "y"
        puts "  |_ Overwriting!"
      else
        puts "  |_ Skipt"
        exit 1
      end
    end

    puts

    outfile.open("w") do |io|
      files = m.path.ls_R.sort_by {|f| f.path.downcase }
      widest = files.max_by { |f| f.symlink? ? 0 : f.size }.size.to_s.size

      files.each do |f|
        name = f.relative_to(m.path)

        if f.symlink?
          target = f.target.relative_to(m.path)
          s = "#{f.mtime} | #{"symlink".rjust(widest)} | #{name} -> #{target}"
        else
          s = "#{f.mtime} | #{f.size.to_s.rjust(widest)} | #{name}"
        end

        io.puts s
        puts s
      end
    end

    puts

    if prompt("Eject?") == "y"
      fork { system("eject", m.path) }
    end
  end
end

