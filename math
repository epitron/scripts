#!/usr/bin/env ruby

#############################################################################
# ---------------
# TODOs:
# ---------------
#
# Parser:
#
# => unit conversions (lbs -> kg, C -> F, etc.)
# => Translate @symbol to &:symbol (for inline Ruby expressions)
# => / does floating point division, // does integer division
# => Bignum.sqrt should work (convert all numbers to BigDecimal?)
# => proper parser
# => Pry's prettyprinter
# => lazy blocks: 1..100.map \this * 5\
# => Non-globbing operators: x / + - %
# => | or |> to compute the prior expression and return the result, which can then be operated on more
# => Treetop Parser (http://blog.glaucocustodio.com/2014/11/10/natural-language-parsing-with-ruby/)
#
#############################################################################

require 'epitools/colored'
require 'epitools/numwords'
require 'epitools/core_ext/string'
require 'epitools/core_ext/numbers'

#############################################################################

class MathOTron

  class Helpers
    def help
      puts DATA.read
    end

    def now
      Time.now
    end
  end

  def helpers
    @helpers ||= Helpers.new
  end

  def initialize(args)
    if ARGV.size == 0
      interactive_mode
    else
      calculate ARGV.join(' ')
    end
  end

  def braggadocio
    puts "==============================================="
    puts " Math-o-tron 9000(tm)!"
    puts " (c) 2014-17 by Chris Gahan (chris@ill-logic.com)"
    puts "-----------------------------------------------"
    puts "Type 'help' for help."
  end

  def error(message)
    puts "<bright_red>ERROR:</bright_red> #{message}".colorize
  end

  #############################################################################

  REWRITE_RULES = {
    ## NICE MATH
    # x (turn "5 x 3" into "5 * 3")
    /([\d\):]+\s*)(?:x|×)(\s*[\d\(]+)/ => "\\1*\\2",
    # x (turn "expr x expr" into "expr * expr")
    /(\S\s+)(?:x|×)(\s+\S)/            => "\\1*\\2",

    # ^ (turns "5^2" into "5**2")
    /([\d\):]+\s*)\^(\s*[\d\(]+)/ => "\\1**\\2",

    # flipped division ("a \ b" becomes "b / a")
    /([\d\):]+\s*)\\(\s*[\d\(]+)/ => "\\2/\\1",

    ## COLON OPERATOR
    # turn "1..10: function" into "(1..10).function"
    /(.+?): (\w+)/ => "(\\1).\\2",
    # turn "5 - 3: / 6" into "(5 - 3) / 6"
    /(.+?): (\W+)/ => "(\\1) \\2",
  }

  def translate(expr)
    # Translate suffix units (like 25k, or 15%) into plain numbers
    expr = expr.gsub /(\d[\d_]*(?:\.\d+)?)([a-zA-Z]+\b|%( ?= \s|$))/ do |m|
      units = $2
      num   = $1 #.to_f

      result = case units.downcase
      when "%"
        # 0.01
        num / 100.0
      when "k", "kb"
        # 10**3
        "#{num}.thousand"
      when "m", "mb", "mm"
        # 10**6
        "#{num}.million"
      when "b", "g", "bn", "gb"
        # 10**9
        "#{num}.billion"
      when "t", "tb"
        # 10**12
        "#{num}.trillion"
      when "q"
        # 10**15
        "#{num}.quadrillion"
      when "Q"
        # 10**18
        "#{num}.quintillion"
      when "min"
        # 1.minute
        "#{num}.minutes"
      when "hours", "h", "hr"
        # 1.hour
        "#{num}.hours"
      when "d", "days", "dy"
        "#{num}.days"
      else
        return error("Invalid units: <15>#{units.inspect}</15>, in: <15>#{m.inspect}</15>")
      end

      # num * zeroes
      result
    end

    # Apply rewrite rules (converting bash-friendly operators into ruby operators, and more...)
    REWRITE_RULES.each do |regexp, replacement|
      loop do
        last_expr = expr
        expr = expr.gsub(regexp, replacement)
        break if expr == last_expr
      end
    end

    expr
  end

  #############################################################################

  def calculate(expr)
    unless translated_expr = translate(expr)
      return nil
    end

    if expr != translated_expr
      puts "=> #{translated_expr}".grey
    end

    begin
      result = helpers.instance_eval translated_expr
      if not $stdout.isatty
        puts result
      else
        case result
        when Numeric
          puts "<13>#{result.commatize} <4>(<12>#{"%.2e" % result}<4>)".colorize

          unless (words = result.to_words).blank?
            puts "<8>(<7>#{words}<8>)".colorize
          end
        else
          p result
        end
      end
    rescue Exception => e
      puts e.to_s.bright_red
    end
  end

  #############################################################################

  def interactive_mode
    # Interactive mode!

    # require 'readline'
    require 'coolline'

    braggadocio

    loop do
      # get input
      expr = Coolline.readline("> ")

      # quit if the user didn't give us any input
      break if !expr or expr.blank?

      # do the math
      calculate expr

      # separator between expressions
      puts
    end

    # done!
    puts
  end

end

#############################################################################

if $0 == __FILE__
  MathOTron.new(ARGV)
end

#############################################################################

__END__
----------------------------------------------
 Math-o-tron lets you quickly compute things!
----------------------------------------------

Basic math:
  > 5 + 3 + 234 + 4.2922
  246.2922
  (two-hundred and fourty-six)

  > 42.sqrt
  6.48074069840786
  (six)

Units:
  > 35k x 17%
  => 35000.0 * 0.17
  5,950.0 (5.95e+03)
  (five thousand, nine-hundred and fifty)

The colon operator (lets you group things without using parentheses):
  > (5 + 10) / 5
  3
  (three)

  > 5 + 10: / 5
  => (5 + 10) / 5
  3
  (three)

Bash-friendly operators (for commandline arguments):
  $ math 2 x 5
  => 2 * 5
  10
  (ten)

  $ math 2^42
  => 2**42
  4,398,046,511,104
  (four trillion, three-hundred and ninety-eight billion, ...)


It's also a Ruby interpreter, with the power of epitools!
  > (1..42).select &:prime?
  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]

