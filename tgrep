#!/usr/bin/env ruby

gem 'epitools'; require 'epitools'
gem 'bencode';  require 'bencode'

##################################################################

def torrent_info(path)
  data = BEncode.load path.read
  data && data["info"]
rescue BEncode::DecodeError
  nil
end

def matching_files(files, pattern)
  files.select {|file| file["path"].any? {|part| part[pattern] } }
end

def highlight(str, pattern)
  str.highlight(pattern) { |m| "<14>#{m}</14>"}
end

def relative_path(pwd, path)
  pstring      = path.to_s
  pstring[pwd] = "" if pstring.startswith(pwd)
  pstring
end

def print_tree(hash, level=0, &block)
  hash.each do |key, val|
    leaf = val.empty?

    yield key, level, leaf

    print_tree(val, level+1, &block) unless leaf
  end
end


##################################################################

args = ARGV

if args.size < 1
  puts "tgrep - Search the files inside torrents"
  puts
  puts "usage: tgrep <regexp> <torrent(s)>"
  puts
  exit 1
end

pattern = Regexp.new(args.shift, Regexp::IGNORECASE)

args << "." if args.empty?

paths = args.map(&:to_Path)
paths = paths.map{|path| path.dir? ? path.ls_r : path }.flatten.select(&:file?)

pwd = Path.pwd.to_s

lesspipe do |less|
  for path in paths
    next unless path.ext == "torrent"

    relpath = relative_path(pwd, path)

    info = torrent_info(path)

    if info
      files = info["files"] # array of {path: [..], length: 999} hashes
      name = info["name"]

      if files
        matches = matching_files(files, pattern)

        if matches.any?
          less.puts "* <2>#{relpath}".colorize
          less.puts "  #{name}".light_cyan

          tree = {}
          matches.each do |h|
            tree.mkdir_p(h["path"])
          end

          print_tree(tree) do |key, level, leaf|
            color = leaf ? 7 : 9
            less.puts "     #{"  "*level}<8>|_ <#{color}>#{highlight(key, pattern)}".colorize
          end

          # tree.print_tree do |key, level|
          #   "     #{"  "*level}<8>|_ <7>#{highlight(key, pattern)}".colorize
          # end

          less.puts
        end
      else
        if name[pattern]
          less.puts "* #{relpath}"
          less.puts "  <11>#{highlight(name, pattern)}".colorize
          less.puts
        end
      end

    else
      less.puts "* <12>#{relpath} <7>could not be parsed".colorize
      less.puts
    end
  end
end
##################################################################
