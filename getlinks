#!/usr/bin/env ruby
####################################################################
require 'epitools'
require 'oga'

gem 'slop', "~> 3.6"
require 'slop'
####################################################################
# Parse options

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: getlinks [options] <url(s)>"

  on "l", "links",  "Print links (default)"
  on "i", "images", "Print images"
  on "m", "media",  "Print non-image media (video and audio)"
  on "a", "all",    "Everything!"
  on "g", "grep", "Look for URLs by parsing the page as plain text (ie: for urls in json blobs)"
  on "b", "blank-title", "Print links with blank titles (default: ignore them)"
  on "r", "recursive",   "Use lftp's 'find' command to print all the links recursively"
end

args = ARGV

####################################################################

class String
  def tighten
    gsub(/\s+/, ' ').strip
  end

  def url?
    match? %r{^\w+://.+}
  end
end

class URI::Generic
  alias_method :old_to_s, :to_s
  def to_s
    old_to_s.chomp("?")
  end
end

def join(root, url)
  url && URI.join(root, url)
end

####################################################################

def print_links(less, root_uri, doc, print_blank_title: false)
  already_printed = Set.new

  less.puts "## links"
  less.puts

  doc.css("a, iframe").each do |elem|

    case elem.name.downcase
    when "a"
      body  = elem.text.tighten
      title = elem["title"]&.tighten

      next unless uri = join(root_uri, elem["href"])

      unique_id = [body, title, uri]

      next if body&.empty? and title&.empty? and not print_blank_title
      next if already_printed.include? unique_id

      less.puts "# #{body}" unless body.nil? or body.empty?
      less.puts "# title: #{title}" unless title.nil? or title.empty?
      less.puts "#{uri}"

    when "iframe"
      # <iframe loading="lazy" title="Why Alien Life Would be our Doom - The Great Filter" width="1100" height="619" src="https://www.youtube.com/embed/UjtOGPJ0URM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
      body = nil
      title = elem["title"]&.tighten

      next unless uri = join(root_uri, elem["src"])
      
      unique_id = [title, uri]

      next if already_printed.include? unique_id

      less.puts "# iframe title: #{title}" unless title.nil? or title.empty?
      less.puts "#{uri}"
    end

    less.puts

    already_printed.add unique_id
  end
end

def print_images(less, root_uri, doc)
  already_printed = Set.new

  less.puts "## images"
  less.puts

  doc.css("img").each do |img|
    title = img["title"]&.tighten
    alt = img["alt"]&.tighten
    alt = nil if title == alt
   
    next unless uri = join(root_uri, img["src"])

    unique_id = [title, alt, uri]

    next if already_printed.include? unique_id

    less.puts "# title: #{title}" if title and not title.empty?
    less.puts "# alt: #{alt}" if alt and not alt.empty?
    less.puts "#{uri}"
    less.puts

    already_printed.add unique_id
  end
end

def print_media(less, root_uri, doc)
  doc.css("video, audio").each do |v|
    less.puts v.to_s
  end
end

FAKE_SPACE_CHAR = "Â " # 0xA0... I can copy/paste this char, but a string with its hex value ("\xA0") is illegal??? weird.
URL_RE = %r{(?:https?:)?//[^"' <#{FAKE_SPACE_CHAR}]+}
def print_grepped_urls(less, html)
  html.scan(URL_RE).each do |m|
    less.puts m
    less.puts
  end
end

####################################################################

lesspipe do |less|
  if opts.recursive?
    args.each do |url|
      IO.popen(["lftp", url, "-e", "find; quit"]) do |io|
        io.each_line.map do |line|
          fn = line.chomp

          next if fn[%r{/$}] # skip folders (we're being recursive, so this is pointless)

          fn = fn.scan(%r{[^/]+}).map { |thing| CGI.escape(thing).gsub("+", "%20") }.join("/")
          fn = fn.gsub(%r{^\./}, '') # remove leading './' from filename
 
          url = url.gsub(%r{/$}, '') # remove trailing '/' from url (if present)
          #uri = URI.parse "#{url}/#{fn}"

          less.puts "#{url}/#{fn}"
        end
      end
    end
  else; args.each do |url|

    if url.url?
      less.puts "### URL: #{url}"
      html = cached_curl(url)
    elsif File.exists?(url)
      less.puts "### File: #{url}"
      html = File.read(url)
    else
      $stderr.puts "Error: Unrecognized argument: #{url.inspect}"
      exit 1
    end

    if opts.grep?
      less.puts
      print_grepped_urls(less, html)
    else
      doc = Oga.parse_html html

      root_uri = url.url? ? URI.parse(url) : nil
      title = doc.at_css("title")&.text&.tighten

      less.puts "### #{title}" if title and not title.empty?
      less.puts

      print_images(less, root_uri, doc) if opts.images? or opts[:all]
      print_media(less, root_uri, doc)  if opts.media? or opts[:all]

      if opts[:xall] or opts.links? or (!opts.links? and !opts.images? and !opts.media?)
        print_links(less, root_uri, doc, print_blank_title: opts[:"blank-title"])
      end
    end
  end; end
end
