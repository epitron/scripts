#!/usr/bin/env ruby
require 'epitools'

class String
  def url?
    !!(strip =~ %r{^https?://.+})
  end
end

def help!
  puts "usage: despam-link [<url>]"
  puts
  puts "(if you don't supply <url> as an argument, it'll look in the clipboard)"
  puts
end

def popen_with_stderr(*cmd)
  cmd = cmd.flatten
  IO.popen(cmd, :err=>[:child, :out], &:read)
end

def get_clipboard
  result = popen_with_stderr("xclip", "-o")

  unless $?.success?
    result = popen_with_stderr("xclip", "-o", "-selection", "clipboard")
  end

  result
end

def despam(link)
  uri = URI.parse(link)
  urls = []

  return urls unless uri.host # sometimes everything in the url is nil. yay. (eg: "terribleurl:oof")

  if uri.host[/youtu(be)?/] and uri.path["attribution_link"] and uri.params["u"]
    urls << "https://youtube.com#{uri.params["u"]}"
  else
    uri.params.values.each do |val|
      if val.url?
        urls << val
      elsif (decoded = val.from_base64).url?
        urls << decoded
      end
    end
  end

  # for gemini:// links
  rawquery = uri.instance_variable_get(:@query)
  query = CGI.unescape(rawquery)
  urls << query if query.url?

  urls
end

def show_links_for(url)
  links = despam(url)

  if links.any?
    links.each { |link| puts link }
  end
rescue URI::InvalidURIError
  $stderr.puts "Error: couldn't parse #{url}"
end


if $0 == __FILE__

  args = ARGV

  if args.include?("-h") or args.include?("--help")
    help!
    exit
  end

  if args.any?
    args.each do |arg|
      show_links_for arg
    end
  else
    url = get_clipboard
    show_links_for(url)
  end

end
