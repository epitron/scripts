#!/usr/bin/env ruby
########################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'uri'
# require 'epitools'
########################################################

# Parse options

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: get [options]"

  on "m",  "mhtml",  "Capture page and assets as an MHTML file (requires 'urlsnap')"
  on "o=", "output", "Output filename (defaults to guessing based on URL)"
  on "f",  "force",  "Overwrite existing file"
end

args = ARGV

########################################################

def run(*cmd)
  puts
  # puts cmd.map { |c| c[" "] ? "'#{c}'" : c }.join(" ")
  system *cmd
  puts
end

def urlsnap(url, opts)
  output = opts[:output]
  uri = URI.parse(url)

  if output
    outfile = "#{output}.mhtml" unless output[/\.mhtml$/]
  else
    outfile = uri.path.split("/").reject(&:empty?).last
    outfile = File.basename(outfile, ".*") + ".mhtml"
  end

  cmd = ["urlsnap", "--mhtml=#{outfile}", url]

  puts "* Urlsnapping:"
  puts "  |_ input: #{url}"
  print "  |_ output: #{outfile}"
  run(*cmd)
  system("ls", "-l", outfile)
  puts
end

def curl(url, opts)
  output = opts[:output]

  puts " Curling:"
  puts " |_ input: #{url}"
  puts " |_ output: #{output}" if output

  cmd = [
    "curl",
    "-L",       # follow redirects
    "--xattr",  # xattrs
  ]
  cmd += ["-C", "-"] unless opts.force? # resume at whatever the output file size is

  if output
    cmd += ["-o", output]
  else
    cmd += ["-O", "-J"] # Output to the filename in the URL, or to the filename in the Content-Disposition header (-J) if it's available
  end

  cmd << url

  run(*cmd)
end

########################################################

getter = opts.mhtml? ? :urlsnap : :curl

args.each do |arg|
  send(getter, arg, opts)
end

