#!/usr/bin/env ruby

require 'slop'
require "tokyocabinet"

include TokyoCabinet

###################################################################

# http://toolserver.org/~enwikt/definitions/?sortby=7
ENGLISH   = "http://toolserver.org/~enwikt/definitions/enwikt-defs-latest-en.tsv.gz"
ALL       = "http://toolserver.org/~enwikt/definitions/enwikt-defs-latest-all.tsv.gz"

CACHE_DIR = File.expand_path("~/.cache/wict")
INDEX     = File.join CACHE_DIR, "enwikt-defs.idx"

###################################################################

def options
  require 'slop' # lazy loaded

  @opts ||= Slop.parse(help: true, strict: true) do
    banner 'Usage: wict [options] <word(s)...>'

    on 'u',  'update',  'Update the database'
    on 'a',  'all',     'All langauges!'
  end
end

def bdb_open(filename, opts=nil)
  bdb = BDB::new  # B-Tree database; keys may have multiple values

  if !bdb.open(filename, opts)
    raise "open error: #{bdb.errmsg(bdb.ecode)} (filename: #{filename.inspect})"
  end

  if block_given?
    result = yield bdb
    bdb.close
    result
  else
    bdb
  end
end

def backup(src)
  if File.exists? src
    counter = 1
    dest = "#{src}.bak"

    while File.exists? dest
      counter += 1
      dest = "#{src}.bak#{counter}"
    end

    puts "Backing up #{src.inspect} to #{dest.inspect}"

    File.rename(src, dest)
  end
end

###################################################################

def update

  backup(INDEX)

  url = options.a? ? ALL : ENGLISH

  puts "Importing database from #{url.inspect}..."

  IO.popen("curl -s #{url} | gunzip -c", "r") do |tsv|

    bdb_open(INDEX, BDB::OWRITER | BDB::OCREAT) do |bdb|

      tsv.each.with_index do |line, n|
        lang, word, type, definition = line.strip.split("\t")
        #p [:lang, lang, :word, word, :type, type, :definition, definition]

        bdb.putdup(word, definition)

        print "\b"*20 + n.to_s if n % 37 == 0
      end

      puts

    end
  end

end  

###################################################################

def lookup(args)
  bdb_open(INDEX) do |bdb|

    args.each do |arg|
      words = bdb.fwmkeys(arg)
      words.each do |word|
        defs = bdb.getlist(word)
        if defs.any?
          puts "#{word}"
          defs.each { |defn| puts "   #{defn}" }
          puts
        end
      end
    end

  end
end

def wordcount
  bdb_open(INDEX) { |bdb| bdb.size }
end

###################################################################


if $0 == __FILE__

  Dir.mkdir CACHE_DIR unless File.exists? CACHE_DIR

  if options.u?

    update

  else

    if not File.exists? INDEX
      puts "You must first download a database. Run 'wict -u'."
      exit 1
    elsif ARGV.empty?
      puts "Pass the word(s) you want to look up as (an) argument(s)."
      puts "(#{wordcount} words in dictionary)"
    else
      lookup(ARGV)
    end
    
  end

end