#!/usr/bin/env ruby
###################################################################################################
# TODOs:
# * Multi-keyword search (eg: "b 52" should find "B-52s")
###################################################################################################
require 'json'
require 'ostruct'
###################################################################################################
LOGFILE           = File.expand_path("~/play.log")
JSON_LOGFILE      = File.expand_path("~/play.json")
REQUIRED_BINARIES = %w[youtube-dl mpv ffmpeg]
###################################################################################################

def parse_options
  gem 'slop', "~> 3.6"
  require 'slop'

  opts = Slop.parse(help: true, strict: true) do
    banner 'Usage: play [options] <video URL, or history number>'

    on 'l',  'list',      "List <n> previously viewed videos"
    on 'a',  'audio',     "Play/download audio only"
    on 'd',  'download',  "Download video <n>"
    on 'i',  'info',      "Detailed info about <n>"
    on 'f',  'fullscreen',"Detailed info about <n>"
    on 's=', 'subs',      "Use specified file or URL as subtitles (or 'auto' to add .srt to the filename)"
    on 't=', 'seek',      "Seek to timestamp"
    on 'r',  'rofi',      "Rofi Opener"
    on 'c',  'cast',      "Open in Chromecast"
    on 'k',  'kodi',      "Open in Kodi"
    on 'K',  'always-kodi', "Enable/Disable 'Always send to Kodi'"
    on 'e',  'enqueue',   "Enqueue (append) to Chromecast playlist"
    on 'C=', 'device',    "Chromecast device"
    on 'n',  'no-daemon', "Run in the foreground (so you can see logs)"
    on 'y',  'youtube',   "Search youtube"
    on 'p',  'pry',       "Launch a Pry inspector before playing"
    on 'v',  'verbose',   "Show more info"
  end

  [opts, ARGV]
end

###################################################################################################

class String

  def number?; self =~ /^\d+$/; end

  def url?; self =~ %r{^https?://}i; end

  #
  # Parse a timestamp and convert it to seconds (as an integer)
  #
  def to_seconds
    case self
    when /^(\d+)$/
      $1.to_i
    when /^(\d+):(\d+)$/, /^(\d+)m(?:(\d+)s)?$/ # ?t=#m#s
      ($1.to_i * 60) + $2.to_i
    when /^(\d+):(\d+):(\d+)$/, /^(\d+)h(\d+)m(\d+)s$/ # ?t=#h#m#s
      ($1.to_i * 60 * 60) + ($2.to_i * 60) + $3.to_i
    else
      nil
    end
  end

end

###################################################################################################

def which(bin)
  return bin if bin[0] == "/" and File.exists?(bin)

  ENV["PATH"].split(":").each do |dir|
    full_path = File.join(dir, bin)
    return full_path if File.exists? full_path
  end

  nil
end

def which_is_best?(*bins)
  bins.flatten.each do |bin|
    if location = which(bin)
      return location
    end
  end
  nil
end

def youtube_dl_path
  which("youtube-dl")
end

###################################################################################################

missing_binaries = REQUIRED_BINARIES.reject { |bin| which(bin) }

if missing_binaries.any?
  puts "ERROR: Can't find the following programs: #{missing_binaries.join(", ")}"
  puts "       Please install them."
  exit 1
end

###################################################################################################

class LogEntry < OpenStruct

  def self.from_line(line, pos)
    timestamp, url, title = line.strip.split(" | ", 3)
    date, time            = timestamp.split

    new(date: date, time: time, url: url, title: title, pos: pos)
  end

  def self.from_json(line, pos=nil)
    # {"timestamp":"2017-04-09 00:58:59","url":"https://www.youtube.com/watch?v=j556MWGVVqI","title":"Triumph the Insult Comic Dog Talks to Young Voters • Triumph on Hulu","upload_date":"20160208","uploader":"huluDotCom","extra":{"id":"j556MWGVVqI","uploader":"Hulu","uploader_id":"huluDotCom","uploader_url":"http://www.youtube.com/user/huluDotCom","upload_date":"20160208","license":"Standard YouTube License","creator":nil,"title":"Triumph the Insult Comic Dog Talks to Young Voters • Triumph on Hulu","alt_title":nil,"thumbnail":"https://i.ytimg.com/vi/j556MWGVVqI/maxresdefault.jpg","description":"Triumph discusses gender identity, micro aggressions and trigger warnings with young college voters as part of Triumph's Election Special 2016, now streaming on Hulu.\n\nWatch Triumph on Hulu at http://www.hulu.com/Triumph\nLike Hulu on Facebook at http://www.facebook.com/Hulu/\nFollow Hulu on Twitter at http://www.twitter.com/Hulu\nFollow Hulu on Instagram at http://www.instagram.com/Hulu\nSubscribe to our YouTube channel at http://www.youtube.com/hulu\n\nIn Triumph's Election Special 2016, Triumph the Insult Comic Dog hits the 2016 presidential campaign trail.  Viewers will be taken from Iowa to New Hampshire to South Carolina in a tenacious news-gathering journey in the heat of the primary election season.  Triumph has already visited a Democratic Debate, a Tea Party Convention, and followed a string of Ted Cruz bus appearances.  In addition to crashing campaign events and mocking the press for their thirst for controversy, Triumph will take on hard-hitting issues of concern to voters on each side of the spectrum.","categories":["Entertainment"],"tags":["hulu"],"automatic_captions":{},"duration":641,"age_limit":0,"annotations":nil,"webpage_url":"https://www.youtube.com/watch?v=j556MWGVVqI","view_count":3204771,"like_count":36135,"dislike_count":1104,"average_rating":4.88141441345,"is_live":nil,"start_time":nil,"end_time":nil,"series":nil,"season_number":nil,"episode_number":nil,"extractor":"youtube","webpage_url_basename":"watch","extractor_key":"Youtube","playlist":nil,"playlist_index":nil,"thumbnails":[{"url":"https://i.ytimg.com/vi/j556MWGVVqI/maxresdefault.jpg","id":"0"}],"display_id":"j556MWGVVqI","format":"137 - 1920x1080 (DASH video)+140 - audio only (DASH audio)","format_id":"137+140","width":1920,"height":1080,"resolution":nil,"fps":24,"vcodec":"avc1.640028","vbr":nil,"stretched_ratio":nil,"acodec":"mp4a.40.2","abr":128,"ext":"mp4","fulltitle":"Triumph the Insult Comic Dog Talks to Young Voters • Triumph on Hulu","_filename":"Triumph the Insult Comic Dog Talks to Young Voters • Triumph on Hulu-j556MWGVVqI.mp4"}}
    json = JSON.parse(line)
    date, time = json["timestamp"].split
    json["pos"] = pos if pos
    json["date"] = date
    json["time"] = time

    new(json)
  end

  # Converts nested hashes into OpenStructs
  def initialize(hash)
    super(
      hash.map do |k,v|
        v = super(v) if v.is_a? Hash
        [k, v]
      end.to_h
    )
  end

  def to_s
    url
  end

  def to_json
    to_h.to_json
  end
end

###################################################################################################

require 'uri'
require 'cgi'

module URI
  #
  # Convert a query string to a hash of params
  #
  def params
    params = {}

    if query
      query.split(/[&;]/).each do |pairs|
        key, value = pairs.split('=',2).collect { |v| CGI.unescape(v) }

        if key and value
          params[key] ||= []
          params[key] << value
        end
      end
    end

    params.map { |k,v| [k, v.size > 1 ? v : v.first] }.to_h
  end
end

###################################################################################################

def notify(type, title, body, time: 5)
  require 'cgi'

  puts "#{title}"
  puts "  #{body}"

  time_in_ms = time * 1000

  cmd = ["notify-send"]
  cmd << "--expire-time=#{time_in_ms}"
  cmd << "--app-name=play"
  cmd << "--icon=#{type}"
  cmd += [title, body].map {|s| CGI.escapeHTML s }

  fork { system *cmd }
end

def run(*cmd)
  require 'open3'
  # stdout_str, stderr_str, status = Open3.capture3([env,] cmd... [, opts])
  # p running: cmd
  out, err, status = Open3.capture3(*cmd)
  [out.strip, err.strip, status]
end

def play_click_sound
  file = File.expand_path("~/scripts/sounds/click.mp3")

  if best = which_is_best?("/bin/play", "mplayer", "mpg123", "mpv")
    fork { run(best, file).last.success? }
  end
end

###################################################################################################

def log_entries
  if File.exists? JSON_LOGFILE
    log = open(JSON_LOGFILE)
    meth = :from_json
  else
    open(LOGFILE, "wb") {} unless File.exists?(LOGFILE) # touch the logfile
    log = open(LOGFILE)
    meth = :from_line
  end
  log.reverse_each.lazy.with_index.map { |logline, i| LogEntry.send(meth, logline, i+1) }
end

def entries_for_nums(nums)
  require 'set'

  nums    = Set.new(nums)
  entries = []

  log_entries.each do |entry|
    if nums.include? entry.pos
      entries << entry
      nums.delete entry.pos

      break if nums.empty?
    end
  end

  entries
end

###########################################################

def info(nums)
  require 'epitools/colored'

  fields = %w[
    uploader
    description
    upload_date
    tags
    categories
    view_count
    like_count
    dislike_count
    average_rating
    webpage_url
    format
    fps
    duration
    vcodec
    acodec
    uploader_url
  ]

  # TODO: Format duration as hh:mm:ss

  log_entries.select { |e| nums.include? e.pos }.each do |e|
    puts "<8>=== <10>#{e.pos}<7>: <14>#{e.title} <8>====================".colorize
    puts
    fields.each do |k|
      v = e.extra[k]

      next if v.nil? or (v.respond_to?(:empty?) and v.empty?)

      print "<11>#{k}<8>: ".colorize

      v = case v
      when Numeric then "<15>#{v}"
      when Hash then v.to_s
      when String
        if v["\n"]
          "\n" + v.each_line.map {|l| "    #{l}" }.join
        else
          v
        end
      when Array
        v.join("<8>, </8>")
      end

      puts v.colorize

    end
    puts
  end
end

###########################################################

def rofi_picker
  esc = proc do |s|
    s.gsub("&", "&amp;")
  end

  loop do
    result = IO.popen(%w[rofi -dmenu -markup-rows -i -async-pre-read 0 -theme DarkBlue -lines 32 -width 80 -p Play], "r+") do |f|
      entries = log_entries
      entries.each_with_index do |e,i|
        parenstuff = [e.date, e.uploader].compact
        f.puts "%2d. <b>#{esc[e.title]}</b> (#{parenstuff.join(", ")})" % (i+1)
      end

      f.close_write

      f.gets&.split(".")&.first
    end

    return result.strip
  end
end

###########################################################

def show_history(query: nil, amount: 10, reverse: true, paged: false, rofi: false)
  require 'epitools/colored'

  query  = query.join(" ")  if Array === query and query.any?
  regexp = /#{query}/i      if query
  output = paged ? IO.popen("less -RXFi", "w") : $stdout

  ## Header

  output.puts "----------------------------------".grey
  if query
    output.puts " <15>Searching for: <14>#{query.inspect}".colorize
  else
    output.puts " #{amount == 0 ? "All" : amount} most recent plays:".light_white
  end
  output.puts "----------------------------------".grey
  output.puts

  entries = log_entries
  entries = entries.select { |entry| entry.title =~ regexp || entry.url =~ regexp } if query
  entries = entries.take(amount) unless amount == 0

  if reverse
    results = entries.to_a.reverse
    max_pos_width = results.map(&:pos).sort.last.to_s.size
  else
    results = entries
    max_pos_width = 4
  end

  results.each do |result|
    pos = result.pos

    indent = " " * (result.date.size - result.time.size)

    title = result.title
    title = title.gsub(regexp) { |m| "<14>#{m}</14>" } if regexp

    output.print "#{pos.to_s.rjust(max_pos_width)}. ".bright_yellow
    indent += " " * (max_pos_width + 2)

    headline = "<10>#{result.date} <12>| <11>#{regexp ? title.gsub(regexp, &:on_blue) : title}"
    if result.respond_to?(:uploader) and result.uploader
      headline << " <8>(<1>#{result.uploader}<8>)"
    end

    output.puts headline.colorize
    output.puts "<2>#{indent}#{result.time} <4>| <9>#{regexp ? result.url.gsub(regexp, &:on_blue) : result.url}".colorize
    output.puts
  end

rescue Errno::EPIPE
ensure
  output.close if paged
end

###################################################################################################

def search_youtube(query)
  exec("yt", *query)
end

###################################################################################################

def write_to_log(url, json)
  timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")

  open(LOGFILE, "a") do |f|
    f.puts "#{timestamp} | #{url} | #{json["title"]}"
  end

  open(JSON_LOGFILE, "a") do |f|
    exclude_keys = %w[formats requested_formats subtitles requested_subtitles http_headers]

    filtered_json = {
      timestamp:   timestamp,
      url:         url,
      title:       json["title"],
      upload_date: json["upload_date"],
      uploader:    json["uploader_id"],
      extra:       json.reject { |k,v| exclude_keys.include? k },
    }

    f.puts JSON.dump(filtered_json)
  end
end

def write_to_log2(logentry)
  timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")

  open(LOGFILE, "a") do |f|
    f.puts "#{timestamp} | #{url} | #{json["title"]}"
  end

  open(JSON_LOGFILE, "a") do |f|
    exclude_keys = %w[formats requested_formats subtitles requested_subtitles http_headers]

    filtered_json = {
      timestamp:   timestamp,
      url:         url,
      title:       json["title"],
      upload_date: json["upload_date"],
      uploader:    json["uploader_id"],
      extra:       json.reject { |k,v| exclude_keys.include? k },
    }

    f.puts JSON.dump(filtered_json)
  end
end

###################################################################################################

# def download(*urls, audio_only: false)
def download(*urls, opts: nil)
  urls << log_entries.first if urls.empty?

  urls.each do |url|
    cmd = [
      youtube_dl_path,
      "--no-mtime",
      "--xattrs",
      "--no-playlist",
      "-o", "%(title)s.%(ext)s",
    ]

    if opts&.audio_only?
      cmd += [
        "--extract-audio",
        "-f", "bestaudio[ext=m4a]/bestaudio",
      ]
    else
      cmd += [
        "-f", "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best",
        "--sub-format=srt/ass/vtt/best",
      ]
    end

    cmd << url.to_s

    p cmd if opts&.verbose?

    system *cmd
  end
end

###################################################################################################

def yd_json(url)

  # FIXME: Proxy when this happens:
  # ERROR: kK1E2nB_Nu4: YouTube said: This video contains content from WMG, who has blocked it in your country on copyright grounds.
  # ( https://www.youtube.com/watch?v=kK1E2nB_Nu4 )

  cmd = [
    youtube_dl_path,
    "-j",
    "-f", "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
    # "-f", "bestvideo[ext=mp4,height<=?1080]+bestaudio[ext=m4a]/best[ext=mp4]/best", # limit to 1080p
    "--sub-format=srt/ass/vtt/best",
    "--sub-lang=en",
    "--write-sub",
    "--no-playlist",
    url
  ]

  out, err, status = run *cmd

  if not status.success? or out.empty?
    notify(:error, "youtube-dl error #{status.exitstatus}:", "#{err}\n( #{url} )")
    exit 1
  end

  JSON.parse(out)
end

###################################################################################################

def cast(*urls, enqueue: false, device: nil)
  if urls.size > 1
    # recursively cast/enqueue urls
    unless enqueue
      cast(urls.shift, enqueue: false, device: device)
    end

    urls.each do |url|
      cast(url, enqueue: true, device: device)
    end
  else
    url = urls.first
    cmd  = ["catt"]
    cmd += ["-d", device] if device

    if enqueue
      cmd << "add"
      msg = "Enqueueing:"
    else
      cmd << "cast"
      msg = "Casting:"
    end
    cmd << url.to_s

    if url.is_a? LogEntry
      notify(:video, msg, url.title, time: 4)
    else
      notify(:info, "Looking up:", url.to_s, time: 3)
      fork do
        json = yd_json(url.to_s)
        write_to_log(url.to_s, json)
        notify(:video, msg, json["title"], time: 4)
      end
    end

    # Process.daemon(true) unless foreground
    system(*cmd)
  end
end

###################################################################################################

# def yd_extract_video_url(url)
#   IO.popen(["youtube-dl", "-g", url], &:read).strip
# end

def kodi(*urls)
  # How to fix this:
  # - if it's a youtube url, send it to k directly [cached or not]
  # - otherwise, re-run yd_json to get a fresh valid json["url"], then send that to k
  msg = "Sending to Kodi:"
  urls.each do |url|
    if url.is_a? LogEntry
      notify(:video, msg, url.title, time: 4)
    else
      json = yd_json(url)
      write_to_log(url, json)
      notify(:info, "Looking up:", "#{url}", time: 3)
    end

    url = url.to_s
    # if url =~ /youtu\.?be(\.com)?/
    system("k", url)
  end
end

###################################################################################################

# def play(url, foreground: false, verbose: false, audio_only: false)
def play(url, opts)
  foreground = opts["no-daemon"] or opts.pry?
  verbose    = opts.verbose?
  audio_only = opts.audio?
  fullscreen = opts.fullscreen?

  if url.is_a? LogEntry
    notify(:info, "Loading:", url.title, time: 4)
  else
    notify(:info, "Processing:", url.to_s, time: 3)
  end

  # Fork into the background (to give the commandline back to the user asap)
  Process.daemon(true) unless foreground || verbose

  # Click! (useful when run with a hotkey, to tell that it's working)
  play_click_sound

  # Detailed video information (including media URLs)
  json = yd_json(url.to_s)

  # Watched-history log
  write_to_log(url, json) unless url.is_a? LogEntry # if we're playing something from the history, don't re-log it

  # Command to execute
  if audio_only
    cmd = ["ffplay", "-window_title", "#{json["title"]} (#{json["upload_date"]})"]
  else
    cmd = ["mpv", "--force-media-title=#{json["title"]} (#{json["upload_date"]})", "--force-window=immediate"]
  end

  # Pull audio/video URLs from JSON
  if rf = json["requested_formats"]
    video, audio = rf
    if audio_only
      cmd << audio["url"]
    else
      cmd += [video["url"], "--audio-file=#{audio["url"]}"]
    end
  elsif url = json["url"]
    if json["format"] =~ /audio only/ or json["ext"] == "m4a" or json["ext"] == "mp3"
      cmd << "--audio-file=#{url}"
      cmd << json["thumbnail"]
    else
      cmd << url
    end
  else
    raise "Dunno!"
  end

  if subs = opts[:subs]
    if subs == "auto"
      subs = url.sub(/\.\w+$/, '.srt')
    end

    # User supplied the subtitles from the commandline
    cmd << "--sub-file=#{subs}"
  elsif subs = json["requested_subtitles"] || json["subtitles"]
    # Pull subtitles from JSON
    subs.each do |lang, sub_info|
      # "en" => [{"ext"=>"vtt","url"=>"https://vimeo.com/texttrack/4085370.vtt"}],
      sub_info = sub_info.first if sub_info.is_a? Array
      if lang[/^en/]
        cmd << "--sub-file=#{sub_info["url"]}"
      end
    end
  end


  ## Seek to time in video

  if time = opts[:seek]
    seek = time.to_seconds
  else
    uri = URI.parse(url.to_s)

    if time = (uri.params["t"] || uri.params["time_continue"])
      seek = time.to_seconds
    end

    if uri.fragment =~ /^t=([\d\.]+)/
      seek = $1.to_i
    end
  end

  cmd += ["--start=#{seek.to_s}"] if seek
  cmd += ["--fs=yes"]           if fullscreen


  ## Run mpv

  # notify(:video, "Playing:", json["title"], time: 4)
  p running: cmd if verbose

  if opts.pry?
    require 'pry'
    binding.pry
  end

  system(*cmd)
end

###################################################################################################


if $0 == __FILE__

  opts, args = parse_options

  if opts.always_kodi?
    binding.pry
  end

  if opts.rofi?
    if picked_num = rofi_picker
      args = [picked_num]
    else
      exit
    end
  end

  if args.empty? and not opts.list?
    show_history
    exit
  end

  if args.all? &:number?
    # all args are numbers
    nums = args.map(&:to_i)
  elsif args.all? &:url?
    # all args are urls
    urls = args
  else
    # to simplify things, let's just treat every other case as a search query
    query = args
  end

  if opts.list?
    amount = nums.any? ? nums.first : 0
    show_history(amount: amount, reverse: false, paged: true, rofi: opts.rofi?)
    exit
  end

  if opts.info?
    info(nums)
    exit
  end

  urls = entries_for_nums(nums) if nums

  if query

    if opts.youtube? # serach youtube
      search_youtube(query: query)
    else
      show_history(query: query)
    end

  elsif urls

    if opts.cast? or opts.enqueue? or opts.device?
      cast(*urls, enqueue: opts.enqueue?, device: opts[:device])
    elsif opts.kodi?
      kodi(*urls)
    else
      urls.each do |url|
        if opts.download?
          download(url, opts: opts)
        elsif which("mpv")
          play(url, opts)
        else
          notify(:error, "Could not find mpv!", "You must install mpv to play videos.")
        end
      end
    end

  end
end
