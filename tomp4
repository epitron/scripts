#!/usr/bin/env ruby
########################################################################################

gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'

########################################################################################

def error(msg)
  $stderr.puts "ERROR: #{msg}".light_red
end

########################################################################################

opts = Slop.parse(help: true, strict: true) do
  banner 'Usage: tomp4 [options] <file(s)...>'

  on 'y',  'yes',      'Overwrite existing'
  on 'n',  'no',       'Skip existing'
  on 'i',  'images',   'Encode a set of images'
  on 's=', 'scale',    'Scale to resolution (eg: 1024x768, 1024:-1, 1024, -1:720)'
  on 'q=', 'quality',  'Quantization Parameter (eg: 22)'
  on 'd',  'deinterlace', 'Blend deinterlace (using yadif)'
  on 'D=', 'denoise',  'Denoise filter (0: none, 1: fast, 2: slow but good)', default: nil
  on 'b',  'bob',      'Bob deinterlace (using yadif)'
  on 'S=', 'start',    'Start time in the input video'
  on 'l=', 'length',   'Length of the input video to encode'
  on 'p=', 'preset',   'Encoder preset', default: 'slow'
  on "r=", "aspect",   'Aspect ratio (eg: 4:3, 1.6666)'
  on 'd=', 'outdir',   'Output directory'
  on 'o=', 'output',   'Output file'
  on 'a=', 'acodec',   'Output audio codec (eg: mp3, aac)', default: "copy"
  on 'm',  'mute',     'No audio'
  # DEV.LS h264                 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 (decoders: h264 h264_vdpau ) (encoders: libx264 libx264rgb h264_nvenc h264_vaapi nvenc nvenc_h264 )
  # DEV.L. hevc                 H.265 / HEVC (High Efficiency Video Coding) (encoders: libx265 nvenc_hevc hevc_nvenc hevc_vaapi )
  on 'v=', 'vcodec',   "Output video codec\n\t\t\t\t (eg: h264, h264_nvenc, hevc, hevc_nvenc, hevc_vaapi)\n\t\t\t\t", default: "h264"
  on 'N',  'nvidia',   'Use nvidia-accelerated version of vcodec'
  on 'c=', 'crop',     'Crop video (in mplayer format: w:h:x:y)'
  on 'f=', 'framerate','Alter framerate (can have decimals or be a fraction)', default: nil
end

########################################################################################

unless bin = Path.which("ffmpeg", "avconv").compact.first
  puts "Error: Can't find ffmpeg or avconv. Please install one of them."
  exit 1
end

files = ARGV.map {|file| Path.new(file) }

if files.empty?
  puts opts
  exit 1
end

if files.size > 1 and opts.images?
  puts "Error: You must specify a single glob pattern as input"
  exit 1
end

# Two-pass encode:
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 1 -pre medium_firstpass -an "$OUT"
# ffmpeg -y -i "$IN" -b 2M -bt 4M -c:v h264 -pass 2 -pre medium -c:a aac -ab 192k "$OUT"

# Get output directory
if dir = opts[:outdir]
  dir = dir.to_Path
  unless dir.dir?
    error "#{dir} is not a directory"
    exit 1
  end
else
  dir = nil
end


# Process each file
files.each do |inp|
  puts "----------------------------------------------------------------"
  puts " Encoding:"
  puts "    in: #{inp}"

  unless inp.exists? or opts.images?
    error "File doesn't exist."
    next
  end

  # if inp.ext == "mp4"
  #   error "Input file is already a .mp4 -- skipping"
  #   next
  # end

  # Output filename (from options, or auto-generated)
  if opts[:output]
    out = Path.new opts[:output]
  else
    out = inp.with(ext: "mp4")
    out = out.with(filename: out.filename.gsub(/[\*\?]+/, "-") ) if opts.images?
    out.dir = dir.dir if dir
  end

  cmd = [bin]

  # Courageous or wimpy
  cmd << "-y" if opts.yes?
  cmd << "-n" if opts.no?

  # Set framerate
  cmd += ["-framerate", opts[:framerate]] if opts[:framerate]

  # Set input
  if opts.images?
    # cmd += ["-f", "image2"]
    cmd += ["-pattern_type", "glob"]
  end

  if start = opts[:start]
    cmd += ["-ss", start]
  end

  if length = opts[:length]
    cmd += ["-t", length]
  end

  cmd += ["-i", inp]

  vcodec = opts[:vcodec]
  if opts.nvidia? and ["h264", "hevc"].include?(vcodec) # != "copy" and not vcodec["nvenc"]
    vcodec = "#{vcodec}_nvenc"
    cmd += ["-c:v", vcodec]
    cmd += ["-preset:v", "slow"]
    cmd += ["-rc:v", "constqp"]
    cmd += ["-rc-lookahead:v", "32"]
    opts[:quality] ||= 27
  else
    cmd += ["-c:v", vcodec, "-preset:v", opts[:preset]]
  end

  unless opts.mute?
    acodec = opts[:acodec]
    cmd += ["-c:a", acodec]
  end

  # cmd += ["-crf", opts[:quality]] if opts.quality?
  if opts.quality?
    if vcodec == "hevc"
      # cmd += ["-x265-params", "--qp #{opts[:quality]}"]
      cmd += ["-x265-params", "crf=#{opts[:quality]}"]
    else
      # cmd += ["-qp:v", opts[:quality]]
      cmd += ["-crf:v", opts[:quality]]
    end
  end
  cmd += ["-aspect", opts[:aspect]] if opts[:aspect]
  cmd += %w[-movflags faststart]

  vfilters = []
  vfilters << "crop=#{opts[:crop]}" if opts[:crop]
  vfilters << "yadif"             if opts.deinterlace?
  vfilters << "yadif=1"           if opts.bob?

  if opts.denoise?
    case opts[:denoise].to_i
    when 0
      # nothing
    when 1
      vfilters << "hqdn3d"
    when 2
      vfilters << "nlmeans"
    end
  end

  if scale = opts[:scale]
    case scale
    when /^(\d+)x(\d+)$/
      scale = "#{$1}:#{$2}"
    when /^(\d+)$/
      scale = "#{$1}:-1"
    when /^-?\d+:-?\d+$/
      # looks good! no munging necessary ^_^
    else
      error "Unrecognized scale option: #{scale}"
      exit 1
    end

    vfilters << "scale=#{scale}"
  end

  cmd += ["-filter:v", vfilters.join(",")] if vfilters.any?

  cmd << out
  puts "   out: #{out}"
  puts "   cmd: #{cmd.join(" ")}"
  puts "----------------------------------------------------------------"
  puts

  begin
    unless system(*cmd)
      error "Conversion failed."
      next
    end

    unless opts.images?
      if system("x", "--copy", inp, out)
        error "Copying metadata failed."
        next
      end
    end
  rescue Interrupt
    puts
    puts
    exit 1
  end
end
