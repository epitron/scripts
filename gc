#!/usr/bin/env ruby
########################################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'pty'
########################################################################
#
# TODO:
#   - `gc -w` clones the wiki (if not already cloned)
#
########################################################################

def parse_options
  opts = Slop.parse(strict: true) do
    banner "Usage: gc [options] <git-url or github-user/repo> [<destination directory>]"

    # on "s",  "shallow",      "Shallow clone (without history)"
    on "a",  "all-history",  "Clone all history (default is to do a shallow (--depth=1) clone)"
    on "b",  "bare",         "Create a bare repository (no checkout)"
    on "N",  "no-recursion", "Don't automatically clone submodules"
    on "r",  "remote-submodules", "Submodules track their remote HEADs (instead of being locked to a specific commit)"
    on "w",  "wiki",         "Clone the wiki (and place it in {reponame}/wiki)"
    on "e",  "edit",         "Open the repo in an editor (hardwired to 'subl')"
    on "c=", "branch",       "Checkout a specific branch after cloning"
    on "h",  "help",         "You're currently reading it"
  end

  [opts, ARGV]
end

class Object
  def in?(a); a.include? self; end
  def not_in?(a); not self.in? a; end
end

def git_remote_url
  `git remote get-url origin`.chomp
end

def git_repo_root_dir
  return nil if Dir.pwd == "/"
  return Dir.pwd if File.directory?(".git")
  Dir.chdir("..") { git_repo_root_dir }
end

def clone(repo, dest=nil, branch: nil, shallow: true, recursive: true, remote_submodules: false, bare: false)
  print "\e[37m\e[1m#{"Shallow " if shallow}Cloning \e[0m\e[33m\e[1m#{repo}\e[0m"
  print " into \e[0m\e[36m\e[1m#{dest}\e[0m\e[37m\e[0m" if dest
  puts

  cmd = ["git", "clone"]
  cmd += ["--depth=1", "--shallow-submodules"]  if shallow
  cmd << "--bare"                               if bare
  cmd << "--recurse-submodules"                 if recursive
  cmd << "--remote-submodules"                  if remote_submodules
  cmd += ["-b", branch]                         if branch
  cmd << repo

  cmd << dest if dest

  # Clone it
  reponame = nil

  PTY.spawn(*cmd) do |r, w, pid|
    begin
      loop do
        line = r.readpartial(4096)
        print line

        if line =~ /Cloning into '([^']+)'/
          reponame ||= $1
        elsif line =~ /destination path .+ already exists/
          exit 1
        end
      end
    rescue Errno::EIO
    end
  end

  reponame
end

########################################################################
# Option handling

opts, args = parse_options

if opts[:help] or (args.empty? and not opts.wiki?)
  puts opts
  exit 1
end

# `gc -w` clones the wiki into a pre-existing git repo
if args.empty? and opts.wiki?
  if dir = git_repo_root_dir
    Dir.chdir(dir) do
      wiki = git_remote_url.sub(/(\/$|\.git$|$)/, ".wiki.git")
      clone(wiki, "wiki", shallow: opts[:shallow])
      puts
      homepage = "wiki/Home.md"
      system("c", homepage) if File.exists?(homepage)
    end
  else
    $stderr.puts "ERROR: Couldn't find the .git directory. Are you running this from within a git repo?"
  end

  exit
end


repo, dest = args

unless File.exists? repo
  case repo
  when %r{^[\w\-]+/[\w\-\.]+/?$}
    # user left off https://github.com/; fill it in!
    repo = "https://github.com/#{repo}"
  when %r{^github\.com/.+}
    # user left off https://; fill it in!
    repo = "https://#{repo}"
  when %r{^https?://sr.ht/~\w+/\w+}
    repo = repo.gsub("sr.ht", "git.sr.ht")
  # else
    # puts "#{repo} is unhandled"
  end
end

if dest and File.exists?(dest)
  puts "Error: destination #{dest.inspect} already exists"
  exit 1
end

reponame = clone(
  repo,
  dest,
  branch:    opts[:branch],
  bare:      opts[:bare],
  recursive: !opts["no-recursion"],
  shallow:   !opts[:all],
  remote_submodules: opts["remote-submodules"]
  )

########################################################################
# Open editor, show README

if reponame
  fork { exec("subl", reponame) } if opts.edit?
  readmes = Dir.foreach(reponame).select { |f| f[/^readme/i] }.sort_by(&:size)

  if readme = readmes.first
    Dir.chdir(reponame)
    if opts.wiki?
      wiki = repo.sub(/(\/$|\.git$|$)/, ".wiki.git")
      clone(wiki, "wiki", shallow: opts[:shallow])
    end

    args = [readme]
    args << "wiki" if opts.wiki?

    system("c", *args)
  end
end
