#!/usr/bin/env ruby
########################################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'pty'
########################################################################

def parse_options
  opts = Slop.parse(strict: true) do
    banner "Usage: gc [options] <git-url or github-user/repo> [<destination directory>]"

    on "s",  "shallow",      "Shallow clone (without history)"
    on "r",  "no-recursion", "Don't automatically clone submodules"
    on "w",  "wiki",         "Also get the wiki (placed in {reponame}/wiki)"
    on "e",  "edit",         "Open cloned repo in editor (hardwired to 'subl')"
    on "b=", "branch",       "Clone a specific branch"
    on "h",  "help",         "What you're looking at right now!"
  end

  [opts, ARGV]
end

class Object
  def in?(a); a.include? self; end
  def not_in?(a); not self.in? a; end
end

def clone(repo, dest=nil, branch: nil, shallow: false, recursive: true)
  print "\e[37m\e[1mCloning \e[0m\e[33m\e[1m#{repo}\e[0m"
  print " into \e[0m\e[36m\e[1m#{dest}\e[0m\e[37m\e[0m" if dest
  puts

  cmd = ["git", "clone"]
  cmd << "--depth=1"    if shallow
  cmd << "--recursive"  if recursive
  cmd += ["-b", branch] if branch
  cmd << repo

  cmd << dest if dest

  # Clone it
  reponame = nil

  PTY.spawn(*cmd) do |r, w, pid|
    begin
      loop do
        line = r.readpartial(4096)
        print line

        if line =~ /Cloning into '([^']+)'/
          reponame ||= $1
        elsif line =~ /destination path .+ already exists/
          exit 1
        end
      end
    rescue Errno::EIO
    end
  end

  reponame
end

########################################################################
# Option handling

opts, args = parse_options

if opts[:help] or args.size.not_in? 1..2
  puts opts
  exit 1
end

repo, dest = args

unless File.exists? repo
  case repo
  when %r{^[\w\-]+/[\w\-\.]+/?$}
    # user left off https://github.com/; fill it in!
    repo = "https://github.com/#{repo}"
  when %r{^github\.com/.+}
    # user left off https://; fill it in!
    repo = "https://#{repo}"
  # else
    # puts "#{repo} is unhandled"
  end
end

if dest and File.exists?(dest)
  puts "Error: destination #{dest.inspect} already exists"
  exit 1
end

reponame = clone(
  repo,
  dest,
  branch: opts[:branch],
  recursive: !opts["no-recursion"],
  shallow: opts[:shallow]
  )

########################################################################
# Open editor, show README

if reponame
  fork { exec("subl", reponame) } if opts.edit?
  readmes = Dir.foreach(reponame).select { |f| f[/^readme/i] }.sort_by(&:size)

  if readme = readmes.first
    Dir.chdir(reponame)
    if opts.wiki?
      wiki = repo.sub(/(\/$|\.git$|$)/, ".wiki.git")
      clone(wiki, "wiki", shallow: opts[:shallow])
    end

    args = [readme]
    args << "wiki" if opts.wiki?

    system("c", *args)
  end
end
