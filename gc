#!/usr/bin/env ruby
########################################################################
gem 'slop', "~> 3.6"
require 'slop'
########################################################################

def parse_options
  opts = Slop.parse(strict: true) do
    banner "Usage: gc [options] <git-url or github-user/repo> [<destination directory>]"

    on "s",  "shallow",      "Shallow clone (without history)"
    on "r",  "no-recursion", "Don't automatically clone submodules"
    on "e",  "edit",         "Open cloned repo in editor (hardwired to 'subl')"
    on "b=", "branch",       "Clone a specific branch"
    on "h",  "help",         "What you're looking at right now!"
  end

  [opts, ARGV]
end

class Object
  def in?(a); a.include? self; end
  def not_in?(a); not self.in? a; end
end

########################################################################
# Option handling

opts, args = parse_options

if opts[:help] or args.size.not_in? 1..2
  puts opts
  exit 1
end

repo, dest = args

if repo =~ /^[\w\-]+\/[\w\-\.]+$/ and not File.exists? repo
  repo = "https://github.com/#{repo}"
end

if dest and File.exists?(dest)
  puts "Error: destination #{dest.inspect} already exists"
  exit 1
end

cmd = ["git", "clone"]
cmd << "--depth=1" if opts.shallow?
cmd << "--recursive" if opts[:r]
cmd += ["-b", opts[:branch]] if opts[:branch]
cmd << repo
cmd << dest if dest

########################################################################
# Clone it

reponame = nil

require 'pty'
PTY.spawn(*cmd) do |r, w, pid|
  begin
    loop do
      line = r.readpartial(4096)
      print line

      if line =~ /Cloning into '([^']+)'/
        reponame ||= $1
      elsif line =~ /destination path .+ already exists/
        exit 1
      end
    end
  rescue Errno::EIO
  end
end

########################################################################
# Open editor, show README

if reponame
  fork { exec("subl", reponame) } if opts.edit?
  readmes = Dir.foreach(reponame).select { |f| f[/^readme/i] }.sort_by(&:size)
  if readme = readmes.first
    Dir.chdir(reponame)
    system("c", readme)
  end
end
