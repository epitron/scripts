#!/usr/bin/env ruby
#######################################################################################################
require 'epitools'
require 'terminal-table'
#######################################################################################################
#
# TODOs:
# - a 'dig' command that manually specifies all the common records (A, CNAME, TXT, MX, NS, etc?)
#
#######################################################################################################

class String
  def ip?
    match(/^(\d{1,3}\.){3}\d{1,3}$/)
  end
end

#######################################################################################################

def header(title)
  "<8>=== <9>#{title} <8>=====================".colorize
end

#######################################################################################################

def run_chunks(cmd, strip_junk: true, strip_comments: true)
  begin
    lines = IO.popen(cmd, &:readlines)

    chunks = lines.chunk do |line|
      blank    = line.blank?
      comments = strip_comments && line.match?(/^\#/)
      junk     = strip_junk && (!!line["The Registry database contains ONLY .COM, .NET, .EDU domains"] or line == "Registrars.\n")

      blank || comments || junk
    end

    chunks.reject(&:first).map(&:last)
  rescue => e
    puts e
    puts e.backtrace
  end
end

#######################################################################################################

def run(cmd, *opts)
  out = []
  out << header(cmd.join(" "))
  out << ""

  run_chunks(cmd, *opts).each do |lines|
    lines.each do |line|
      out << line.chomp.gsub(/(.+): /, "<15>\\1: <7>").colorize
    end

    out << ""
  end

  out
end

#######################################################################################################

def whois(thing, whois_server: nil, strip_junk: true)
  out = []

  out << header("whois #{thing}")
  out << ""

  cmd = ["whois"]
  cmd += ["-h", whois_server] if whois_server
  cmd << thing
  chunks = run_chunks(cmd, strip_junk: strip_junk)

  ## simple merged output (one table per chunk, but combine fields)
  chunks.each do |lines|
    attrs = Hash.of_arrays

    lines.map do |line|
      key, val = line.strip.split(/:\s+/, 2)
      attrs[key] << val unless val.nil?
    end

    if attrs.has_key? "Domain Status"
      attrs["Domain Status"].map! { |status| status.split.first }
    end

    attrs.delete_if do |k,vs|
      k[/(problem reporting system$|complaint form$|terms of use$|^notice$)/i] or
      vs.any? { |v| v["allow, enable, or otherwise support"] }
    end

    rows = attrs.map do |k,vs|
      vs = vs.uniq(&:downcase)
      [k.bright_cyan, vs.join("\n")]
    end

    out << Terminal::Table.new(rows: rows) if rows.any?
  end

  out
end

#######################################################################################################

def arin(thing)
  whois(thing, whois_server: "whois.arin.net")
end

#######################################################################################################

def geoip(thing)
  if which("geoiplookup")
    run(["geoiplookup", thing])
  else
    run(["geoip-ruby", thing])
  end
rescue Exception => e
  "Error: #{e.inspect}"
end

#######################################################################################################

def host(thing)
  run(["host", thing])
end

#######################################################################################################

lesspipe do |less|

  ARGV.each do |arg|
    jobs = JobRunner.new

    if arg =~ %r{^https?://([^/]+)}
      arg = $1
    end

    puts "<8>### <14>#{arg} <8>#################".colorize
    puts

    jobs.add { geoip(arg) }

    if arg.ip?
      jobs.add { host(arg) }
      jobs.add { arin(arg) }
    else
      jobs.add { whois(arg) }
      jobs.add do
        ip = host(arg)
        p ip
        # binding.pry
        if arg.split(".").size > 2
          if ip.any? { |a| a =~ /has address (.+)\e/ }
            p $1
            jobs.add { whois($1) }
          end
        end
        ip
      end
    end

    jobs.each_result do |result|
      less.puts result.join("\n")
      less.puts
    end
  end

end
