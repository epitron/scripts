#!/usr/bin/env ruby
require 'set'

#############################################################################
## Convenience methods

class String
  def startswith(thing)
    self[0...thing.size] == thing
  end

  def cleanup
    split(" ", 2).last.chomp.chomp("/")
  end

  def type
    if File.directory? self
      "dir"
    elsif File.symlink? self
      "symlink"
    elsif File.file? self
      "file"
    end
  end

  def with_slash
    File.directory?(self) ? "#{self}/" : self
  end

end

#############################################################################
## Sanity check the arguments

dir = ARGV.first

unless dir
  puts "usage: #{__FILE__} <directory>"
  exit
end

unless File.exists? dir
  puts "Error: #{dir} not found"
  exit 1
end

#############################################################################
## Find the orphans...

dir = File.absolute_path dir

localfiles = Set.new Dir["#{dir}/**/*"]

$stderr.puts "in #{dir}: #{localfiles.size} files"

$stderr.print "in packages: "

pkgfiles = IO.popen("pacman -Ql") do |inp|
  Set.new inp.map(&:cleanup).select { |path| path.startswith dir }
end

$stderr.puts "#{pkgfiles.size} files"

$stderr.puts "orphans:"

orphans = localfiles - pkgfiles
orphans.each { |o| puts o.with_slash }
# orphans.each { |o| print o; $stderr.print " (#{o.type})"; puts }
