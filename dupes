#!/usr/bin/env ruby
################################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'
################################################################

class FakeOptions
  def method_missing(*args); nil; end
end

def parse_options
  Slop.parse(help: true, strict: true) do
    banner 'Usage: dupes [options] <files or dirs...>'

    on 'd',  'delete',      'Delete dupes (interactive by default)'
    on 'i',  'interactive', 'Interactively delete dupes'
    on 'a',  'all',         "Process all files (don't ignore .git)"
    on 'e=', 'exclude',     'Exclude a path'
  end
end

################################################################

def common_prefix(files)
  x, *xs = files.map &:to_s

  x.each_char.with_index do |c, i|
    unless xs.all? { |s| s[i] == c }
      return x[0...i]
    end
  end

  ""
end

################################################################

args = ARGV

if args.empty? or args.any? { |opt| opt[/^-/] }
  opts = parse_options
else
  opts = FakeOptions.new
end

################################################################

args << "." if args.empty?  # Default is current dir

# Gather files
files = args.map do |arg|
  path = Path[arg]
  path.dir? ? path.ls_r.select(&:file?) : path
end.flatten

# Exclude patterns
excludes = []
excludes << %r{/\.git/} unless opts[:all]
excludes << /#{Regexp.escape opts[:exclude]}/i if opts[:exclude]
excludes.each { |regex| files.reject! { |f| f =~ regex } }

# Get file sizes
sized_files = files.map { |f| [f.size, f] }

puts "* Found #{files.size} files..."

#
# Find duplicates by first grouping by file size,
# then grouping those groups by the file's SHA256 hash.
#
grouped_dupes = sized_files.group_by(&:first). # group by file size
  flat_map do |filesize, group|
    if group.size > 1
      group.group_by { |s,f| f.sha256 }.
      map { |sha,subgroup| subgroup.size > 1 ? subgroup : nil }.compact
    else
      nil
    end
  end.compact.sort


if grouped_dupes.empty?
  puts "  |_ no duplicates"
  exit 1
end

puts "  |_ #{grouped_dupes.size} duplicates"
puts

if opts.delete? or opts.interactive?

  #
  # Interactively delete duplicates
  #

  deleter = Path.which("trsh", "rm").compact.first

  grouped_dupes.each do |group|

    prefix = common_prefix(group.map(&:last))

    group.each_with_index do |(size, file), i|
      puts "<7>#{i+1}<8>) <9>#{size.commatize} <8>| <11>#{file.relative_to(prefix)}".colorize
    end

    # without_common_prefix([f1, f2]).each_with_index do |name, i|
    #   puts "#{i+1}) #{name}"
    # end

    print "which to delete? > "

    if (choice = $stdin.gets.strip).blank?
      puts "Skipping"
      puts
      next
    end

    unless file_to_delete = group[choice.to_i-1]&.last
      puts "Invalid choice."
      puts
      redo
    end

    cmd = [deleter, file_to_delete]
    p cmd.map(&:to_s)
    system *cmd

    puts
  end

else

  #
  # Display duplciates
  #
  grouped_dupes.each do |group|
    group.each do |size, file|
      puts "<9>#{size.commatize} <8>| <11>#{file.relative_to(Path.pwd)}".colorize
    end
    puts
  end

end
