#!/usr/bin/ruby
#
# SHUFFLE! v15.01
# ----------------------------------------------------------------------
#
# Usage:
#   shuffle <mediatype (eg: images, videos, music, etc.)> <number of files, defaults to 100>
#

require 'epitools'

MEDIA_DEFS = [
  #  type of thing                     players                                     exts
  [  [/^image/, /^pic/, /^photo/],     ["feh", "gthumb","ristretto","shotwell"], %w[jpg jpeg png gif] ],
  [  [/^mov/, /^vid/],                 ["mpv", "mplayer", "totem"],              %w[mp4 avi mov mpg mpeg flv wmv asf m4v ogm] ],
  [  [/^mus/, /^aud/, /^song/],        ["audacious", "audacious2",
                                        "amarok -e"],                            %w[mp3 flac mp4 aac ogg] ],
]

opts = {
  :num => 69,
  :latest => false,
}

ARGV.each do |arg|

  case arg
  when /^(\d+)$/
    num = $1.to_i
    opts[:num] = (num <= 0) ? -1 : num  # <-- for picking 0..num from the shuffled aray
  when "latest", "last"
    opts[:latest] = true
  when /^\w+$/
    for labels, players, exts, desc in MEDIA_DEFS
      if labels.any? { |pattern| pattern.match(arg) }
        opts[:player] = Path.which(*players).first
        opts[:exts]   = exts
        opts[:desc]   = arg
      end
    end
  end

end

####
puts "="*40
puts "Shuffle Options:"
puts "-"*40
pp opts.dup.delete_if{|k,v| k == :exts}
puts "="*40
####


####
glob_pattern = "**/*.{%s}" % opts[:exts].join(',')
puts
puts "+ Shuffling #{opts[:desc]}..."
puts "  |_ searching for: #{Dir.pwd}/#{glob_pattern}"

# GLOB IT
all_files = Path.glob(glob_pattern, File::FNM_CASEFOLD)

# GROUP IT
grouped = all_files.group_by { |filename| File.extname(filename)[1..-1].upcase }.sort_by{|k,v| -v.size}

puts "  |_ #{all_files.size} files found"

for group, files in grouped
  puts "     |_ #{files.size} #{group}s"
end
####

if opts[:latest]
  # Show the latest :num files
  selected_files = all_files.sort_by { |f| File.mtime(f) }.last(opts[:num])
else
  # Show :num random files
  selected_files = all_files.shuffle[0...opts[:num]]
end

puts
puts "+ Sticking #{selected_files.size} random #{opts[:desc]} into #{opts[:player]}..."

# Fork viewer into the background
Process.daemon(true)
exec(opts[:player], *selected_files)
