#!/usr/bin/env ruby
#####################################################################################
require 'pp'
require 'strscan'
#####################################################################################

BLOCK_SIZE = 4096

#####################################################################################

def help
  puts "Usage:"
  puts "  wrap [options] <filename>"
  puts
  puts "Options:"
  puts "  -w<n>    => set maximum line width to <n>"
  puts "  -a       => auto-set line width (using terminal size)"
  puts
end

#####################################################################################

class String
  def each_line_with_remainder(remainder="")
    return to_enum(:each_line_with_remainder, remainder) unless block_given?

    s    = ""
    enum = each_line

    yield remainder + enum.next

    loop do
      s = enum.next
      if s[-1] == "\n"
        yield s
      else
        break
      end
    end

    s
  end
end

#####################################################################################

opts, args = ARGV.partition {|arg| arg =~ /^--?[\w\d+]+$/ }

width = 80

for opt in opts
  case opt
  when /^-w(\d+)$/
    width = $1.to_i
  when "-a"
    require 'io/console'
    _, width = STDIN.winsize
    width -= 1
  when "-h", "--help"
    help
    exit
  else
    raise "Unrecognized option: #{opt}"
  end
end

p width

if args.empty?
  f = $stdin
else
  f = open(args.first)
end

#####################################################################################

remainder = ""
words     = []
chunk_re  = /.{1,#{width}}(\s|$|)/m

loop do
  data = f.read(BLOCK_SIZE)

  break unless data

  remainder = data.each_line_with_remainder(remainder) do |line|
    ss = StringScanner.new(line)
    while chunk = ss.scan(chunk_re)
      puts chunk
    end
  end
end

puts remainder

