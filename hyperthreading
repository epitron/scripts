#!/usr/bin/env ruby
########################################################
require 'epitools'

gem 'slop', "~> 3.6"
require 'slop'
########################################################

class CPU

  ROOT = Path["/sys/devices/system/cpu"]

  attr_reader :num

  def initialize(num); @num = num; end

  # Instance methods

  def [](str)
    val = (path/str).read.strip
    (val =~ /^\d+$/) ? val.to_i : val
  end

  def []=(str, value); (path/str).write(value); end

  def path; ROOT/"cpu#{num}"; end
  def freq; cpu["cpufreq/scaling_cur_freq"]; end

  def online?;  num == 0 or self["online"] == 1; end
  def offline?; not online?; end

  def online!;  num == 0 or self["online"] = 1; end
  def offline!
    raise "Can't shut off CPU0" if num == 0
    self["online"] = 0
  end


  # Class methods

  def self.all
    @all ||= (ROOT/"cpu*").map do |path|
      if path.dirs.last =~ /^cpu(\d+)$/
        new($1.to_i)
      end
    end.compact.sort_by(&:num)
  end

  def self.offline; all.select &:offline?; end

  def self.enable_hyperthreading!
    puts "Enabling hyperthreading..."
    all.each &:online!
  end

  def self.disable_hyperthreading!
    enable_hyperthreading! if offline.any?
    puts "Disabling hyperthreading..."
    all.each_slice(2) { |core, thread| thread.offline! }
  end

  def self.toggle_hyperthreading!
    if offline.any?
      enable_hyperthreading!
    else
      disable_hyperthreading!
    end
  end

  def self.print_status
    all.each do |cpu|
      print "CPU#{cpu.num}: o#{cpu.online? ? "n" : "ff"}line"
      print " (#{freq.commatize} hz)" if cpu.online?
      puts
    end
  end

end

########################################################
# Parse options

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: hyperthreading [options]"

  on "d", "disable", "Disable hyperthreading"
  on "e", "enable",  "Enable hyperthreading"
  on "t", "toggle",  "Toggle hyperthreading"
  # on "n", "notify",  "Use notify-send to report status"
end

args = ARGV

########################################################

if opts.enable?

  CPU.enable_hyperthreading!

elsif opts.disable?

  CPU.disable_hyperthreading!

elsif opts.toggle?

  CPU.toggle_hyperthreading!

end

CPU.print_status

