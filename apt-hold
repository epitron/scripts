#!/usr/bin/env ruby
require 'epitools'
require 'slop'

original_ARGV = ARGV.dup

opts = Slop.parse :help => true do
  banner %{Usage: apt-hold [options] <package(s)>

  Puts packages on "hold", so they won't be automatically upgraded by apt-get.

Example:
  apt-hold google-chrome-stable}

  on  :l, :list,   "List specified packages (or ALL packages if none specified)"
  on  :u, :unhold, "Unhold the package"
end
args = ARGV

# sudoifnotroot
unless Process.uid == 0
  system("sudo", __FILE__, *original_ARGV)
  exit
end

def selections
  @selections ||= IO.popen("dpkg --get-selections") do |r|
    Hash[ r.lines.map {|l| l.strip.split } ]
  end
end

def selections_for(packages)
  s = selections
  packages.map { |arg| [ arg, s[arg] ] if s[arg] }.compact
end

def holds
  selections.select{|pkg,state| state == "hold"}
end

STATE_INFO = {
  "hold"        => ["Hold", :light_green],
  "install"     => ["None", :grey]
}

def set_selections(packages, state)
  input = packages.map { |pkg| "#{pkg} #{state}" }.join("\n")

  puts input

  IO.popen("dpkg --set-selections", "w") do |dpkg|
    dpkg.puts input
  end
end

def print_packages(packages)
  #selections_for(args.flatten).each do |package, state|
  packages.each do |package, state|
    desc, color = STATE_INFO[state]
    col1_width = packages.map{|k,v| k.size}.max + 2
    puts "#{package.ljust(col1_width).light_yellow} => #{desc.send(color)}"
  end
end

if opts.list?
  if args.any?
    print_packages selections_for(args)
  else
    print_packages holds
  end
elsif args.empty?
  puts "<8>(<9>Note: Type <11>--help</11> for directions.<8>)".colorize
  puts
  print_packages holds
elsif opts.unhold?
  set_selections( args, "install" )
else
  set_selections( args, "hold" )
end

