#!/usr/bin/env ruby

require 'epitools'

# compute_mode
#   "Default" means multiple contexts are allowed per device.
#   "Exclusive_Thread" means only one context is allowed per device, usable from one thread at a time.
#   "Exclusive_Process" means only one context is allowed per device, usable from multiple threads at a time.
#   "Prohibited" means no contexts are allowed per device (no compute apps).
#
# pstate
#    performance state for the GPU: P0 (maximum performance) to P12 (minimum performance)
#
# fan.speed
# utilization.gpu
# memory.free
# power.draw
# inforom.power
# inforom.pwr
# pcie.link.width.max
# pcie.link.gen.max
# pcie.link.width.current
# driver_version

# clocks.current.sm
# clocks.current.graphics
# clocks.current.memory

# clocks.applications.graphics
# clocks.applications.memory

# clocks.default_applications.graphics
# clocks.default_applications.memory

# clocks.max.graphics
# clocks.max.sm
# clocks.max.memory

fields = %{
  name
  memory.used
  memory.total

  temperature.gpu
  utilization.gpu
  fan.speed
  power.draw

  # clocks.applications.memory
  # clocks.applications.graphics
  # clocks.current.graphics clocks.max.graphics
  # clocks.current.sm clocks.max.sm
  # clocks.current.memory clocks.max.memory

  vbios_version
}.each_line.map(&:strip).reject { |field| field.empty? or field[/^#/] }.map {|field| [field.gsub(".", "_").to_sym, field] }.to_h


# Note: Unsupported features return "[Not Supported]"
# Stat = OpenStruct.new(:name, :memused, :memtotal, :temp, :gpu, :fan, :power, :bios_version)
Stat = Struct.new(*fields.keys)

class Stat
  # def initialize(*args)
  #   super
  #   # self.memused = memused.split.first
  #   # self.memtotal = memused.split.first
  # end

  def timestamp
    Time.now.strftime("%H:%M:%S")
  end

  def to_color
    # "#{timestamp} <8>[ <7>#{name} v#{bios_version} <8>| <10>#{memused}<2>/<10>#{memtotal}<2>MB <8>| <11>#{gpu}<3>% GPU <8>| <12>#{temp}<4>°C <8>| <13>#{pstate} <8>| <9>#{compute_mode} <8>]".colorize
    "#{timestamp} <8>[ <7>#{name} v#{vbios_version} <8>| <10>#{memory_used}<2>/<10>#{memory_total}<2>MB <8>| <13>#{power_draw} <5>W <8>| <12>#{temperature_gpu}<4>°C <8>| <11>#{utilization_gpu}<3>% GPU <8>]".colorize
  end
end


begin
  if ARGV.include? "-v"
    system *%w[watch -n1 nvidia-smi]
  else
    # cmd = ["nvidia-smi", "--query-gpu=#{fields.join(",")}", "--format=csv", "-l", "1"]
    cmd = ["nvidia-smi", "--query-gpu=#{fields.values.join(",")}", "--format=csv,noheader,nounits", "-l", "1"]

    run(*cmd) do |output|
      CSV.new(output).each do |row|
        s = Stat.new(*row.map(&:strip))
        puts s.to_color
      end
    end
  end
rescue Interrupt
end