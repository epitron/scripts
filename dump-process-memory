#!/usr/bin/env python2
#####################################################################################################################
import sys
import os
import re
from pprint import pprint
#####################################################################################################################
def hex64(num):
  return "%0.16x" % (num)
#####################################################################################################################
def includes(l, e):
  try:
    l.index(e)
    return True
  except ValueError:
    return False
#####################################################################################################################
def partition(l,predicate):
  a = []
  b = []

  for e in l:
    if predicate(e):
      a.append(e)
    else:
      b.append(e)

  return (a,b)
#####################################################################################################################
def help():
  print("usage: dump-process-memory [options] <pid>")
  print("")
  print("options:")
  print("  -l  include shared libs")
  print("")
#####################################################################################################################
#
#   address           perms offset  dev   inode   pathname
#   08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm
#
# address     - This is the starting and ending address of the region in the process's address space
# permissions - This describes how pages in the region can be accessed. There are four different permissions: read, write, execute, and shared. If read/write/execute are disabled, a - will appear instead of the r/w/x. If a region is not shared, it is private, so a p will appear instead of an s. If the process attempts to access memory in a way that is not permitted, a segmentation fault is generated. Permissions can be changed using the mprotect system call.
# offset      - If the region was mapped from a file (using mmap), this is the offset in the file where the mapping begins. If the memory was not mapped from a file, it's just 0.
# device      - If the region was mapped from a file, this is the major and minor device number (in hex) where the file lives.
# inode       - If the region was mapped from a file, this is the file number.
# pathname    - If the region was mapped from a file, this is the name of the file. This field is blank for anonymous mapped regions. There are also special regions with names like [heap], [stack], or [vdso]. [vdso] stands for virtual dynamic shared object. It's used by system calls to switch to kernel mode. Here's a good article about it: "What is linux-gate.so.1?"
#
def parse_ranges(pid, include_libs=False):
  if include_libs:
    match = lambda x: (x.find("rw-p") >= 0)
  else:
    match = lambda x: (x.find(".so") < 0) and (x.find(" 0 ") >= 0)

  ranges = []

  with open("/proc/%s/maps" % pid) as f:

    for line in f:
      if match(line):
        attrs = re.split(r"\s+", line.strip())
        if len(attrs) == 6:
          range, perms, offset, dev, inode, file = attrs
        else:
          range, perms, offset, dev, inode = attrs
          file = None

        start, end = [ int(x, 16) for x in range.split("-") ]
        length     = end - start

        fn_pieces = [hex64(start), perms]
        if file:
          fn_pieces.append(file.replace("/", " ").strip())
        filename = " ".join(fn_pieces) + ".dump"

        ranges.append([start, length, filename])

  return ranges
#####################################################################################################################

opts, args = partition(sys.argv[1:], lambda arg: re.match(r"^-\w", arg))

if len(args) == 0:
  print("error: must supply pid")
  print("")
  help()
  sys.exit(1)

for pid in args:
  ranges = parse_ranges(pid, include_libs=includes(opts, "-l"))

  dir = "pid-%s-dump" % pid
  os.mkdir(dir)
  print("* Dumping %s to %s:" % (pid, dir))

  for pos, length, filename in ranges:
    with open("/proc/%s/mem" % pid, "rb") as mem:
      with open("%s/%s" % (dir, filename), "wb") as out:
        print("  |_ %s" % filename)
        mem.seek(pos)
        data = mem.read(length)
        out.write(data)
