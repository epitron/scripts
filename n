#!/usr/bin/env ruby
########################################################
# TODOs:
#
# * Network.info returns an object graph containing all the info
#   |_ scan.devs, scan.configs, scan.routes
#
########################################################
require 'epitools'
require 'terminal-table'
gem 'slop', "~> 3.6"; require 'slop'
########################################################

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: n [options]"

  on "d",  "down",  "Take interface down"
  on "u",  "up",    "Put interface up"
  on "i=", "ip",    "Set IP address"
  on "s",  "scan",  "WIFI Scan"
end

args = ARGV

########################################################

def netctl(*args)
  system("netctl", *args)
end

def ip(*args)
  system("ip", *args)
end

def configs
end

def ifnames
  @ifnames ||= Dev.all.map(&:name)
end

def nameservers
  Path["/etc/resolv.conf"].io.each_line.map do |line|
    if line =~ /^nameserver (.+)$/
      $1
    end
  end.compact
end

########################################################

class Dev

  attr_accessor :name, :flags, :mac, :addrs, :state

  def self.[](name)
    all.find { |dev| dev.name == name }
  end

  def self.all(sorted: false)
    devs = `ip addr`.each_line.split_before(/^\d+: /).map do |chunk|
      new(chunk) unless chunk.empty?
    end.compact

    if sorted
      devs.sort_by! do |dev|
        score = 0
        score += 100 if dev.up?
        score += 10  if dev.name[/^e/]
        score += 11  if dev.name[/^w/]
        score += 10  if dev.routes.any?
        score += 10  if dev.routes.any? {|n, type| type == :gateway }

        -score
      end

    end

    devs
  end

  def self.wireless
    all.select(&:wireless?)
  end

  def self.routes
    @routes ||= begin
      routes = Hash.of_arrays

      # default via 192.168.0.1 dev wlp3s0 proto dhcp src 192.168.0.12 metric 303
      # 192.168.0.0/24 dev wlp3s0 proto dhcp scope link src 192.168.0.12 metric 303
      `ip route`.each_line do |line|
        if line =~ /^default via (\S+) dev (\S+)/
          routes[$2] << [$1, :gateway]
        elsif line =~ %r{(\S+) dev (\S+)}
          routes[$2] << [$1, :range]
        else
          raise "Unrecognized: #{line}"
        end
      end

      routes
    end
  end

  def initialize(lines)
    @addrs = []

    if lines.first =~ /^\d+: (\S+): <([^>]+)>/
      @name = $1
      @flags = Set.new($2.split(","))
    end

    lines.drop(1).each do |line|
      line.strip!
      if line =~ %r{^link/\S+ (\S+)}
        @mac = $1
      elsif line =~ %r{inet ([\d\.]+)/(\d+)}
        @addrs << $1
      end
    end

    @state = up? ? "UP" : "DOWN"
  end


  def up?; @up ||= @flags.include?("UP"); end
  def down?; not up?; end

  def up!
   ip("link", "set", name, "up")
  end

  def down!
   ip("link", "set", name, "down")
  end

  def routes
    Dev.routes[name]
  end

  def wireless?
    name[/^(wlp|wlan)/]
  end

end

########################################################

class Config
  attr_accessor :name, :devname, :ip

  def self.[](name)
    all.find { |c| c.name == name }
  end

  def self.all
    @all ||= Path["/etc/netctl/*"].select(&:file?).map { |f| Config.new(f) }
  end

  def self.connected_names
    `netctl list`.each_line.map do |line|
      if line =~ /\* (\S+)/
        $1
      end
    end.compact
  end

  def initialize(path)
    @path = path
    @name = path.filename

    path.each_line do |line|
      if line =~ /^Interface=(.+)/
        @devname = $1
      elsif line =~ /^IP=(.+)/
        @ip = $1
      end
    end
  end

  def dev
    @dev ||= Dev[devname]
  end

  def connected?
    Config.connected.include? self.name
  end

  def toggle!
    if connected?
      stop!
    else
      start!
    end
  end

  def start!
    dev.down! if dev.up?
    netctl("start", name)
  end

  def stop!
    netctl("stop", name)
  end

  def wait_until_online
    netctl("wait-online", name)
  end

  def status
    netctl("status", name)
  end

end

########################################################

def print_interfaces
  puts "--------------------------------".grey
  puts "Interfaces:".light_yellow
  puts "--------------------------------".grey

  configs           = Config.all
  connected_configs = Config.connected_names
  headings          = %w[dev addrs configs routes]
  rows              = []
  routes            = Dev.routes

  Dev.all(sorted: true).each do |dev|
    configs_for_dev = configs.
      select { |config| config.devname == dev.name }.
      map do |config|
        config_color = connected_configs.include?(config.name) ? 14 : 6
        "<#{config_color}>#{config.name}"
      end

    name_color = dev.up? ? 10 : 12
    ip_color   = dev.up? ? 11 : 3
    dev_routes = routes[dev.name].map { |addr, type| type == :gateway ? "<7>GW: <10>#{addr}" : "<2>#{addr}" }.join("<8>, </8>")

    rows << [
      "<#{name_color}>#{dev.name}",
      "<#{ip_color}>#{dev.addrs.join("<3>, </3>")}",
      "<9>#{configs_for_dev.join("<2>, </2>")}",
      dev_routes
    ].map(&:colorize)
  end

  puts Terminal::Table.new(headings: headings, rows: rows)
end

########################################################

if opts.scan?

  Dev.wireless.each do |dev|
    system("wifiscan", dev)
  end

  # if devs.size > 1
  #   raise "Error: not sure which device to use (found: #{devs.map(&:name).join(", ")})"
  # end

  # dev = devs.first
  # puts "Scanning #{dev.name}..."
  # cmd = ["iw", "dev", dev.name, "scan"]
  # IO.popen(cmd) do |io|
  #   lesspipe do |less|
  #     less.puts io.read
  #   end
  # end

elsif args.empty?

  print_interfaces
  puts
  puts "DNSes: #{nameservers.join(", ")}"
  puts

else

  configs = Config.all

  args.each do |arg|

    if selected_config = configs.find { |c| c.name == arg } # arg is a netctl config name

      if opts.down?
        selected_config.stop!
        exit
      end

      @all_connected_config_names ||= Config.connected_names

      configs_for_dev        = configs.select { |c| c.devname == selected_config.devname }
      connected_config_names = @all_connected_config_names & configs_for_dev.map(&:name)

      if connected_config_names.include?(selected_config.name) # this one is connected

        puts "status"
        selected_config.status

      else

        raise "WTF? Too many connected configs!" if connected_config_names.size > 1

        if cc_name = connected_config_names.first # another one is connected
          cc = Config[cc_name]

          puts "Stopping #{cc.name}"
          cc.stop! # disconnect it
        end

        puts "Starting #{selected_config.name}"
        selected_config.start!
        selected_config.wait_until_online
        selected_config.status

      end

    elsif arg.in?(ifnames)
      dev = arg

      if opts[:ip]
        ip("addr", "flush", "dev", dev)
        ip("addr", "add", opts[:ip], "dev", arg)
      end

      if opts.up?
        # ip("link", "set", arg, "up")
        Dev[arg].up!
      elsif opts.down?
        # ip("link", "set", arg, "down")
        Dev[arg].down!
      end

      print_interfaces
    end

  end

end

