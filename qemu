#!/usr/bin/env ruby
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: qemu [options] <.iso or .qcow2 file(s)>"

    on "m=", "memory",   "How much memory to use?", default: "2G"
    on "s=", "size",     "Disk size", default: "5G"
    on "n",  "nbd",      "Attach image to a block device (for mounting filesystems)"
    on "k",  "kvm",      "Enable KVM"
    on "p=", "port",     "Forward a port to the machine (eg: '22', or '2222:22')"
    on "r",  "restrict", "Restrict the network (firewall)"
    on "c",  "console",  "Output serial to the console"
    on "C",  "cursor",   "Show the mouse cursor"
    on "v",  "verbose",  "Show (a little) more information"
    on "V",  "version",  "Show version information"
    # on "b=", "backing-file",    "Use this as the backing file"
  end

  [opts, ARGV]
end

opts, args = parse_options

if opts.version?
  %w[qemu-system-x86_64 qemu-system-i386 qemu-system-arm qemu-img].any? do |bin|
    system(bin, "--version")
  end
  exit
end

if args.empty?
  puts opts
  exit 1
end

isos, disks = args.map(&:to_Path).partition { |arg| arg.ext == "iso" }
isos.each { |iso| puts "Error: #{iso.inspect} does not exist" unless iso.exists? }
exit 1 unless isos.all? &:exist?

###############################
# Attach NBD
###############################
if opts.nbd?

  if Process.uid != 0
    puts "Error: You must run this as root."
    # exec("sudo", "ruby", __FILE__)
  else
    # TODO: Detect if an image (this image?) is already mounted
    # TODO: Prompt the user to disconnect a device if they're all full
    disks.each do |disk|
      dev = "/dev/nbd0"
      mnt = "/mnt"

      puts "[-] loading nbd kernel module"
      system("modprobe", "nbd", "max_part=8")

      puts "[-] connecting #{disk} to #{dev}"
      system("qemu-nbd", "--connect=#{dev}", disk)

      puts "[-] creating /devs #{disk} to #{dev}"
      system("partx", "-a", dev)

      puts "[!] done!"
      puts
      puts

      system("fdisk", "-l", dev)

      puts
      puts "(NOTE: You can run 'qemu-nbd --disconnect #{dev}' to disconnect the nbd from the disk image)"
      puts
      # p system("qemu-nbd", "--disconnect", dev)
    end

    isos.each do |iso|
      puts "Can't mount isos yet. Sorry!"
    end
  end

  exit
end


###############################
# Run QEMU
###############################
memory = opts[:memory]

cmd = ["qemu-system-x86_64"]
cmd << "-enable-kvm" if opts.kvm?

cmd += ["-rtc", "base=localtime"]
cmd += ["-m", memory]
cmd += ["-object", "rng-random,id=rando,filename=/dev/urandom"]

if opts.console?
  # cmd += %w[-nographic -serial mon:stdio -append 'console=ttyS0']
  # cmd += %w[-nographic -serial mon:stdio]
  # cmd += %w[-nographic -device sga -serial mon:stdio]
  cmd += %w[-device sga -nographic -serial mon:stdio]
  # cmd += %w[-nographic -curses]
else
  cmd += ["-vga", "std"]
end

cmd << "-show-cursor" if opts.cursor?

disks.each do |disk|
  unless disk.exists?
    # if bf = opts[:"backing-file"]
    #   if disks.size > 1
    #     puts "Error: Can't use more than one disk image when specifying a backing file"
    #   else
    #     system("qemu-img", "-f", "qcow2", "-b", bf, disk)

    case disk.ext
    when "qcow2"
      system("qemu-img", "create", "-f", "qcow2", disk, opts[:size])
    else
      puts "I don't know how to make a #{disk} image"
    end
  end

  driveopts = ["file=#{disk}"]
  driveopts << "format=raw" if disk.ext == "img"

  cmd += ["-drive", driveopts.join(",")]
end

isos.each  { |iso| cmd += ["-cdrom", iso] }

# Networking
netopts = "user,id=usernet"

netopts += ",restrict=on" if opts.restrict?

if port = opts[:port]
  src, dest = port.split(":")
  dest ||= src
  netopts += ",hostfwd=tcp::#{src}-:#{dest}"
end

cmd += ["-netdev", netopts]
cmd += ["-net", "nic,netdev=usernet"]

p cmd if opts.verbose?

exec *cmd
