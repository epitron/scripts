#!/usr/bin/env ruby
require 'coolline'
require 'fileutils'
require 'set'

class String

  #
  # Returns: dir, basename, ext
  #
  def path_parts
    if self =~ %r{^(.+/)?(.+?)(\.[^\.]+)?$}
      return $1, $2, $3
    else
      raise "Cannot match path..."
    end
  end

  #
  # Converts _'s and .'s to spaces
  #
  def restore_spaces
    gsub(/(?<=\S)(_|\.)(?=\S)/, ' ')
  end

  #
  # Switch left and right sides of the -
  #
  def swap_segments
    segs = split(" - ")
    [segs[1], segs[0], *segs[2..-1]].join(" - ")
  end

  #
  # Puts parens around years
  #
  def bracket_years
    gsub(/(?<!\()\b(?:19|20)\d\d\b(?!\))/, "(\\0)")
  end

  LOWERCASE_WORDS = Set.new %w[of to or the and an a at is for from in with are that]
  UPPERCASE_WORDS = Set.new %w[AI]

  #
  # Return a new string converted to "Title Case" (first letter of each word capitalized)
  #
  def titlecase
    first = true
    words = downcase.split(/(?<!\w')\b/)

    words.map.with_index do |word,i|
      prev_word = (i > 0) ? words[i-1] : nil
      if LOWERCASE_WORDS.include?(word) and (i > 0 or prev_word != " - ") # leave LOWERCASE_WORDS lowercase, unless it's the first word, or it comes after a " - "
        word
      elsif UPPERCASE_WORDS.include?(word)
        word.upcase
      else
        word.gsub(/^\w/) { |c| c.upcase } # capitalize first letter
      end
    end.join('')
  end

end

#
# Edit a filename
#
def edit_filename(prompt, filename)

  Coolline.new do |c|

    c.word_boundaries = [" ", "\t", ".", ",", ";", '"', "'", "`", "<", ">",
                         "=", ";", "|", "{", "}", "(", ")", "-", "/"]

    #
    # Alt-u: capitalize everything
    #
    c.bind "\eu" do |inst|
      dir, basename, ext = inst.line.path_parts
      pos                = inst.pos

      new_filename       = "#{dir}#{basename.titlecase}#{ext}"

      inst.line          = new_filename
      inst.pos           = pos

      inst.menu.string = "(Capitalized)"
    end

    #
    # ^s: Swap the left and right sides of the "-"
    #
    c.bind "\x13" do |inst|
      dir, basename, ext = inst.line.path_parts

      inst.line          = "#{dir}#{basename.swap_segments}#{ext}"

      inst.menu.string = "(Swapped left/right side of the '-')"
    end

    c.bind "\x14" do |inst|
      system("trsh", filename)
      puts "\r\n[Trashed]\r"
      inst.line = filename
      inst.input.ungetc "\r"
    end

    #
    # ^r: Ruby REPL
    #
    c.bind "\x12" do |inst|
      dir, basename, ext = inst.line.path_parts

      stack              = [basename]
      pos                = 0
      println            = proc { |line| puts "#{line}\r" }
      clamp              = proc { |n| [[n,0].max, stack.size-1].min }
      ruby_coolline      = Coolline.new {|d| d.history_file = "#{Coolline::HistoryFile}-repl" }

      println["\r\n\n=== REPL mode ==="]

      loop do
        println["\rFilename: #{stack[pos]}"]

        expr = ruby_coolline.readline

        case expr
        when "help", "?"
          println[""]
          println["Usage:"]
          println["  Type some Ruby, and it'll be evaluated on the filename."]
          println[""]
          println["Special Commands:"]
          println["  exit/^D/blank line -> finish REPLing"]
          println["  undo -> revert latest change"]
          println["  redo -> unrevert latest change"]
          println[""]
        when "history", "hist"
          print "\r"
          stack.each_with_index do |line, i|
            println["#{i} #{i == pos ? "=>" : "  "} #{line}"]
          end
        when "undo"
          pos = clamp[pos-1]
        when "redo"
          pos = clamp[pos+1]
        when nil, "", "exit", "commit"
          break
        else
          begin
            # println[{eval: stack[pos], stack: stack, pos: pos}.inspect]
            result = stack[pos].dup.instance_eval(expr)
            pos += 1
            stack[pos..-1] = [result]
          rescue => e
            println["\rError: #{e}"]
          end
        end
      end

      println[]
      println["Rename: #{filename}"]

      inst.line        = "#{dir}#{stack[pos]}#{ext}"
      inst.menu.string = "(REPLed string)"
    end

    #
    # Alt--: Remove -'s
    #
    c.bind "\e-" do |inst|
      dir, basename, ext = inst.line.path_parts
      pos                = inst.pos

      inst.line          = "#{dir}#{basename.gsub("-", " ")}#{ext}"
      inst.pos           = pos

      inst.menu.string   = "(Hyphens removed)"
    end

    #
    # ^u: remove underscores and stuff
    #
    c.bind "\x15" do |inst|
      dir, basename, ext = inst.line.path_parts
      pos                = inst.pos

      new_filename       = "#{dir}#{basename.restore_spaces.bracket_years}#{ext}"

      inst.line          = new_filename
      inst.pos           = pos

      inst.menu.string   = "(Underscores removed)"
    end

    #
    # ^o: open file
    #
    c.bind "\x0F" do |inst|
      fork do
        Process.daemon(true)
        system("xdg-open", filename)
      end
      inst.menu.string = "(Opening file)"
    end
    #
    # ^k: delete everything from the cursor to the file extension
    #
    c.bind "\v" do |inst|
      start  = inst.pos
      finish = inst.line.rindex(".") || inst.line.size

      inst.line[start...finish] = "" if start < finish
      inst.menu.string = "(Deleted to end)"
    end
  end.readline(prompt, filename)

end

#
# Clears out keyboard buffer.
#
def STDIN.purge
  loop { read_nonblock(4096) } rescue nil
end


if __FILE__ == $0

  puts
  puts "#{ARGV.size} thing(s) to rename..."
  puts

  for arg in ARGV
    unless File.exists? arg
      puts "Error: #{arg.inspect} not found..."
      next
    end

    puts "Rename: #{arg}"

    begin
      new_filename = edit_filename("    to: ", arg)
    rescue Interrupt
      puts
      puts
      puts "Rename aborted..."
      exit 1
    end

    puts

    if arg == new_filename
      puts "Skipping..."
      puts
      next
    end

    if File.exists? new_filename
      STDIN.purge
      print "#{new_filename} exists. Overwrite? (y/N) "
      case $stdin.gets.strip.downcase
      when "y"
        puts "Clobbering..."
      else
        puts "Skipping..."
        next
      end
    end

    puts "Renaming #{arg.inspect} to #{new_filename.inspect}"
    FileUtils.mv arg, File.expand_path(new_filename)
    puts
  end

end
