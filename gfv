#!/usr/bin/env ruby

args = ARGV

if args.empty? or args.delete("--help")
  puts "Youtube-DL Wrapper!"
  puts
  puts "Usage:"
  puts "  gfv [options] <youtube url(s)>"
  puts
  puts "Options:"
  puts "  -h     High quality mode"
  puts "  -l     Low(ish) quality mode"
  puts "  -3     <= 360p"
  puts "  -4     <= 480p"
  puts "  -7     <= 720p"
  puts "  -n     Number the files when downloading playlists"
  puts "  -p     Parallel downloader with multiple (5) threads (requires axel)"
  puts "  -a     Download audio only"
  puts "  -s     Download subtitles only"
  puts "  -S     No subtitles!"
  puts "  -o <filename>"
  puts "         Set output filename."
  puts "         ( For a list of variables that can be inserted into the filename, see:"
  puts "           https://github.com/rg3/youtube-dl/blob/master/README.md#output-template )"
  puts
  puts "(any other options will be passed directly to youtube-dl)"
  puts
  exit 1
end

cmd = %w[
  youtube-dl
  --no-mtime
  --add-metadata
]

#  --xattrs

# --sub-lang=en --write-sub
# --convert-subtitles=srt --sub-lang=en --embed-subs

unless args.delete("-S")
  cmd += %w[--sub-format=srt/ass/vtt/best --sub-lang=en,en-CA --write-sub]
end

unless args.include?("-o")
  cmd << "-o"
  if args.delete("-n")
    cmd << "%(playlist_index)s. %(title)0.235s.%(ext)s"
  else
    cmd << "%(title)0.240s.%(ext)s"
  end
end

if args.delete("-a")
  cmd << "--extract-audio"
  cmd += ["-f", "bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio"] unless args.include?("-f") # allow user to override the format options
  cmd << "--add-metadata"
elsif args.delete("-s")
  cmd << "--skip-download"
  cmd << "--write-auto-sub"
elsif args.delete("-3")
  cmd += %w[-f bestvideo[ext=mp4,height<=?360]+bestaudio[ext=m4a]/best]
elsif args.delete("-4")
  cmd += %w[-f bestvideo[ext=mp4,height<=?480]+bestaudio[ext=m4a]/best]
elsif args.delete("-7")
  cmd += %w[-f bestvideo[ext=mp4,height<=?720]+bestaudio[ext=m4a]/best]
elsif args.delete("-l")
  ## youtube-dl defaults to the best quality, so this isn't necessary -- it just causes problems
  cmd += %w[-f best --youtube-skip-dash-manifest]
end

# parallel download
if args.delete("-p")
  cmd += ["--external-downloader", "axel", "--external-downloader-args", "--num-connections=5"]
end


urls, args = args.partition { |arg| arg[%r{^\w{2,20}://}] }

cmd += args

urls.each do |url|
  if url =~ %r{^plugin://plugin\.video\.youtube/play/\?video_id=(.+)$}
    url = "https://youtu.be/#{$1}"
  end

  url = url.gsub(%r{/nitter\.[^/]+/}, "/twitter.com/")

  if url =~ /(youtu\.be|(you|hook)tube\.com)/
    unless cmd.include?("--skip-download") or cmd.include?("-f") or args.delete("-h")
      cmd += %w[-f bestvideo[height<=?1080][ext=mp4]+bestaudio[ext=m4a]/best]
      # cmd += %w[-f bestvideo[ext=mp4]+bestaudio[ext=m4a]]
    end
  elsif url =~ %r{\.bandcamp\.com/}
    cmd += %w[-f bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio]
  end

  onecmd = cmd.dup
  onecmd << url

  puts "-------------------------------------------------"
  puts "  Downloading #{url}"
  puts "-------------------------------------------------"
  puts
  puts "Commandline:"
  puts "  #{onecmd.join(" ")}"
  puts

  system *onecmd
end
