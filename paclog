#!/usr/bin/env ruby
###########################################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'
require 'date'
###########################################################################
Colored.force!
###########################################################################

class Event < Struct.new(:datestr, :date, :cmd, :name, :v1, :v2)

  # [2015-01-04 04:21] [PACMAN] installed lib32-libidn (1.29-1)
  # [2015-01-04 04:21] [PACMAN] upgraded lib32-curl (7.38.0-1 -> 7.39.0-1)
  # [2015-01-07 04:39] [ALPM] upgraded intel-tbb (4.3_20141023-1 -> 4.3_20141204-1)
  # [2015-01-07 04:39] [ALPM] upgraded iso-codes (3.54-1 -> 3.57-1)
  # [2019-11-25T10:40:54-0500] [ALPM] upgraded ungoogled-chromium (78.0.3904.97-2 -> 78.0.3904.108-1)

  DATE_RE = /[\d:-]+/
  # LINE_RE = /^\[(#{DATE_RE}[T ]#{DATE_RE}(?:[\+-]\d+)?)\](?: \[(?:PACMAN|ALPM)\])? (removed|installed|upgraded) (.+) \((.+)(?: -> (.+))?\)$/
  LINE_RE = /^\[([^\]]+)\](?: \[(?:PACMAN|ALPM)\])? (removed|installed|upgraded) (.+) \((.+)(?: -> (.+))?\)$/

  CMD_COLORS = {
    'removed' => :light_red,
    'installed' => :light_yellow,
    'upgraded' => :light_green,
    nil => :white,
  }

  def self.from_line(line)
    if line =~ LINE_RE
      # DateTime.strptime(date, "%Y-%m-%d %H:%M")
      new($1, DateTime.parse($1), $2, $3, $4, $5)
    else
      nil
    end
  end

  def cmd_color
    CMD_COLORS[cmd]
  end

  def to_s
    # date, time = datestr.split
    timestamp = date.strftime("%Y-%m-%d %l:%M %p")
    "<grey>[<white>#{timestamp}<grey>] <#{cmd_color}>#{cmd} <light_cyan>#{name} #{"<light_white>#{v2} " if v2}<white>(#{v1})".colorize
  end

end

###########################################################################

def log_events(log_glob, direction=:forward)
  return to_enum(:log_events, log_glob, direction) unless block_given?

  logs = Path[log_glob].sort_by(&:mtime)

  logs.each do |log|
    open(log, 'r') do |io|
      lines = (direction == :reverse) ? io.reverse_each : io.each
      lines.each do |line|
        if e = Event.from_line(line.strip)
          yield e
        end
      end
    end
  end
end


###########################################################################

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: paclog [options]"

    on 'r=',  'root',    'Root of arch filesystem', default: "/"
    on 'l=',  'logfile', 'Which logfile(s) to use', default: "/var/log/pacman.log*"
    # on 'u=', 'use',     'Tool to use (ffmpeg, mencoder)', default: "ffmpeg"
  end

  [opts, ARGV]
end

###########################################################################

opts, args = parse_options

query = /#{args.join ".+"}/ if args.any?

lesspipe(tail: true) do |less|
# lesspipe do |less|
  log_glob = "#{opts[:root]}/#{opts[:logfile]}"
  groups = log_events(log_glob).split_between { |a,b| b.date.to_i - a.date.to_i > 60 }

  groups.each do |group|
    first, last = group.first.date, group.last.date
    elapsed     = (last.to_i - first.to_i) / 60

    empty_group = true

    group.each do |ev|
      if query
        next unless ev.name =~ query
        ev.name.gsub!(query) { |m| m.light_yellow.on_blue }
      end

      # Print the header only if the query matched something in this group
      if empty_group
        empty_group = false
        less.puts
        less.puts "<8>== <11>#{first.strftime("<10>%Y-%m-%d <7>at <2>%l:%M %p")} <7>(<9>#{elapsed} <7>minute session) <8>========".colorize
      end

      less.puts ev
    end
  end

end
