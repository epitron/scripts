#!/usr/bin/env ruby
########################################################
require 'epitools'

gem 'slop', "~> 3.6"
require 'slop'
########################################################
# Parse options

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: rm-before [options] <file>"

  on "r",  "recursive",  "Remove directories too"
  on "i",  "inclusive",  "Include the cutoff file (default: no)"
  on "b",  "before",     "Delete everything before this file"
  on "a",  "after",      "Delete everything after this file"
end

args = ARGV

########################################################
if args.empty?
  puts "Error: must specify a file for the cutoff"
  puts
  puts opts
  exit 1
end

if args.size > 1
  puts "Error: Too many files supplied. Can only cut at one point!"
  exit 1
end

if opts.before? and opts.after?
  puts "Aborting because you probably didn't mean to delete both before *and* after."
  exit 1
end

cutfile = Path[args.first]
files = cutfile.parent.ls.sort_by(&:mtime)

cutpoint    = files.index(cutfile)

if opts.after?
  direction = "after"
  to_delete = files[opts.inclusive? ? cutpoint..-1 : cutpoint+1..-1]
else
  direction = "before"
  to_delete = files[opts.inclusive? ? 0..cutpoint : 0...cutpoint]
end

to_delete.reject!(&:dir?) unless opts.recursive?
to_keep = files - to_delete

deleter = which("trsh", "rm")

puts "Files #{direction} #{cutfile}:"
to_delete.each { |path| puts path }
puts
puts "Deleting: #{to_delete.size} files"
puts " Keeping: #{to_keep.size} files"
puts

if prompt("is ok?", "Ny") == "y"
  cmd = [deleter]
  cmd << "-r" if opts.recursive?
  cmd += to_delete
  #p cmd
  system(*cmd)
  puts "it is done"
else
  puts "ok, sorry"
end
