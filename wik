#!/usr/bin/env ruby
######################################################################
require 'epitools'
gem 'slop', "~> 3.6"
require 'slop'
######################################################################

class String
  #
  # Turns "A Very, Very Lovely String!" into "averyverylovelystring"
  #
  def smash
    downcase.scan(/\w+/).join
  end

  STOPWORD_RE = /\b(#{String::STOP_WORDS.join("|")})\s*\b/i

  #
  # Return a copy of the string with all STOPWORDS removed
  #
  def without_stopwords
    gsub(STOPWORD_RE, '')
  end
end

######################################################################
#
# Markdown to ANSI Renderer ("BlackCarpet")
#
# This class takes a little while to initialize, so instead of slowing down the script for every non-markdown file,
# I've wrapped it in a proc which gets lazily loaded by `render_markdown` when needed.
#

BLACKCARPET_INIT = proc do

  def indented?(text)
    indent_sizes = text.lines.map{ |line| if line =~ /^(\s+)/ then $1 else '' end }.map(&:size)
    indent_sizes.all? {|dent| dent > 0 }
  end

  def unwrap(text)
    return text unless indented? text
    text.lines.to_a.map(&:strip).join ' '
  end

  def indent(text,amount=2)
    text.lines.map{|line| " "*amount + line }.join
  end

  class BlackCarpet < Redcarpet::Render::Base

    def normal_text(text)
      text
    end

    def raw_html(html)
      ''
    end

    def link(link, title, content)
      unless content&.[] /^Back /
        str = ""
        str += "<15>#{content}</15>" if content
        if title
          if title.smash != content.smash
            str += " <8>(</8><11>#{title}</11><8>)</8>"
          end
        elsif link
          str += " <8>(</8><9>#{link}</9><8>)</8>"
        end

        str.colorize
      end
    end

    def block_code(code, language)
      language ||= :ruby
      language = :cpp if language == "C++"
      require 'coderay'
      "#{indent CodeRay.scan(code, language).term, 4}\n"
    end

    def block_quote(text)
      indent paragraph(text)
    end

    def codespan(code)
      code.cyan
    end

    def header(title, level, anchor=nil)
      color = case level
        when 1 then :light_yellow
        when 2 then :light_cyan
        when 3 then :light_blue
        else :purple
      end

      bar = ("-"*(title.size+4)).grey

      "#{bar}\n  #{title.send(color)}\n#{bar}\n\n"
    end

    def double_emphasis(text)
      text.light_green
    end

    def emphasis(text)
      text.green
    end

    def linebreak
      "\n"
    end

    def paragraph(text)
      "#{indented?(text) ? text : unwrap(text)}\n\n"
    end

    def list(content, list_type)
      case list_type
      when :ordered
        @counter = 0
        "#{content}\n"
      when :unordered
        "#{content}\n"
      end
    end

    def list_item(content, list_type)
      case list_type
      when :ordered
        @counter ||= 0
        @counter += 1
        "  <8>#{@counter}.</8> #{content.strip}\n".colorize
      when :unordered
        "  <8>*</8> #{content.strip}\n".colorize
      end
    end

    def table_cell(content, alignment)
      @cells ||= []
      @cells << content

      content
    end

    def table_row(content)
      @rows ||= []

      if @cells
        @rows << @cells.dup
        @cells.clear
      else
        @rows << []
      end

      content
    end

    def table(header, body)
      headings = @rows.shift
      table    = Terminal::Table.new(headings: headings, rows: @rows)
      @rows    = []

      "#{table}\n\n"
    end
  end

  BlackCarpet
end

######################################################################

def markdown_to_ansi(markdown)
  require 'redcarpet'

  BLACKCARPET_INIT.call unless defined? BlackCarpet

  options = {
    no_intra_emphasis: true,
    fenced_code_blocks: true,
  }

  begin
    require 'terminal-table'
    carpet = Redcarpet::Markdown.new(BlackCarpet, options.merge(tables: true))
  rescue LoadError
    carpet = Redcarpet::Markdown.new(BlackCarpet, options)
  end

  carpet.render(markdown)
end

######################################################################

class Article < Struct.new(:wiki, :title, :id, :type_char, :redirect_id, :namespace, :url)

  TYPES = {
    "R" => :redirect,
    "A" => :article,
  }

  def self.from_line(wiki, line)
    namespace, url, title, id, type_char, redirect_id, size = line.chomp.split("\t")
    new(wiki, title, id, type_char, redirect_id, namespace, url)
  end

  def type
    TYPES[type_char]
  end

  def redirect?
    type_char == "R"
  end

  def article?
    namespace == "A"
  end

  def image?
    namespace == "I"
  end

  def body
    the_id = redirect? ? redirect_id : id
    cmd = ["zimdump", "-o", the_id, "-d", wiki.file]
    IO.popen(cmd, "r") { |io| io.read }
  end

  def inspect
    "#<Article #{id}: #{title.inspect} (ns: #{namespace} type: #{type_char}, redirect: #{redirect_id}, #{wiki.file.basename})>"
  end

end

######################################################################

class Zim

  def initialize(zimfile, tsvindex)
    @zimfile  = Path[zimfile]
    @tsvindex = Path[tsvindex]
  end


  class Info

    attr_accessor :id, :ns, :title, :url, :type, :redirect_id, :mimetype, :size

    TYPES = {
      "R" => "redirect",
      "A" => "article",
    }

    def self.from_hash(hash)
      info             = new
      info.id          = hash["idx"]
      info.ns          = hash["ns"]
      info.title       = hash["title"]
      info.url         = hash["url"]
      info.type        = hash["type"]
      info.redirect_id = hash["redirect index"]
      info.mimetype    = hash["mimetype"]
      info.size        = hash["article size"]
    end

    def self.from_line(line)
      info = new

      info.ns,
      info.url,
      info.title,
      info.id,
      info.type,
      info.redirect_id,
      info.size        = line.split("\t")

      info.type = TYPES[info.type]
    end

    def article?
      @ns == "A"
    end

    def image?
      @ns == "I"
    end

    def redirect?
      @type == "redirect"
    end
  end


  def zimdump(*args, &block)
    cmd = ["zimdump", *args, @zimfile].map &:to_s
    puts cmd.join " "
    IO.popen(cmd, "r", &block)
  end

  def body(id)
    inf = info(id)

    if inf.redirect?
      get_body inf.redirect_id
    else
      zimdump("-o", info.id, "-d", &:read)
    end
  end

  def info(id)
    hash = zimdump("-o", id, "-i") do |io|
      # url: 1817_in_the_UK.html
      #   title:           1817 in the UK
      #   idx:             61488
      #   namespace:       A
      #   type:            redirect
      #   redirect index:  61489
      io.each_line.map { |l| l.scan(/\s*([^:]+):\s+(.+)/) }.flatten(1).to_h
    end

    Info.new(hash)
  end

  def search(words, ns: "A", exact: false)
    if exact
      cmd = ["grep", words, @tsvindex.to_s]
    else
      cmd = ["grep", "-iE", "#{words.join(".*")}", @tsvindex.to_s]
    end

    IO.popen(cmd).
      each_line.
      map { |line| Info.from_line(line) }.
      select { |info| info.ns == ns }
  end

end

######################################################################

class Wiki

  attr_reader :file, :index

  def initialize(file, index)
    @file = file
    @index = index
  end

  # def index
  #   @index ||= Index.new(self, "wik.index")
  # end

  def search *args
    tsv_search *args
  end

  def get(id)
    cmd = ["zimdump", "-o", id, "-i", file]
    p cmd
    hash = IO.popen(cmd, "r") do |io|
      # url: 1817_in_the_UK.html
      #   title:           1817 in the UK
      #   idx:             61488
      #   namespace:       A
      #   type:            redirect
      #   redirect index:  61489
      io.each_line.map { |l| l.scan(/\s*([^:]+):\s+(.+)/) }.flatten(1).to_h
    end

    if hash["type"]
      hash["type_char"] = hash["type"][0].upcase
    end

    # Article < Struct.new(:wiki, :title, :id, :type, :redirect, :namespace)
    Article.new self, *hash.values_at("title", "idx", "type_char", "redirect index", "namespace")
  end

  def get_page(filename)
    cmd   = ["grep", "\t#{filename}.html\t", index.to_s]

    articles = IO.popen(cmd).
      each_line.
      map { |line| Article.from_line(self, line) }.
      select &:article?

      case articles.size
      when 0 then raise "Not found"
      when 1 then articles.first
      else
        raise "Too many matches"
      end
  end

  def get_file(filename)
    cmd   = ["grep", "\t#{filename.urldecode}\t", index.to_s]

    articles = IO.popen(cmd).
      each_line.
      map { |line| Article.from_line(self, line) }.
      select { |article| not article.article? }

    case articles.size
    when 0 then raise "No image found"
    when 1 then articles.first
    else
      raise "Error: too many matches"
    end
  end

  def score(orig_title, words)
    score = 0
    title = orig_title.without_stopwords.downcase

    # whole phrase is in title
    score += orig_title[/^#{words.join("\s+")}$/i] ? 1000 : 0

    # first word is in title
    score += title[/^#{words.first}/i] ? 100 : 0

    # percentage of words in title
    matched_words = words.select { |w| title[w] }
    score += (matched_words.size/words.size.to_f)*100

    # minimal text in between the words in the title
    junk = title.scan(/#{matched_words.join("(.*)")}/)
    score -= (junk.flatten.join.size/title.size.to_f)*100

    # p [score, title]
    score
  end

  def tsv_search(words, max_results=100)
    # words = words.map &:downcase
    p searching: words
    cmd = ["grep", "-iE", "#{words.join(".*")}", index.to_s]
    results = IO.popen(cmd) do |io|
      io.each_line.
        # select do |line|
        #   title = line.split[2].downcase
        #   words.all? { |word| title[word] }
        # end.
        map { |line| Article.from_line(self, line) }.
        select { |article| article.article? and article.title =~ /#{words.join(".*")}/i }.
        sort_by { |article| -score(article.title, words) }
    end
  end

  def zimdump_search_crappy(words, max_results=100)
    cmd = ["zimdump", "-f", words.join(" "), "-L", @file]
    lines = IO.popen(cmd, "r") { |io| io.each_line.take(max_results) }
    lines.map { |line| Article.from_line(self, line) }
  end

  def zimdump_search(words, max_results=100)
    regex   = /#{words.join(".*")}/i
    cmd     = ["zimdump", "-f", words.first, "-L", @file]
    matches = []

    IO.popen(cmd, "r") do |io|
      io.each_line.with_index do |line, i|
        article = Article.from_line(self, line)
        # p article.title

        # if article.title[0...words.first.size] > words.first
        #   p breaking_at: article.title
        #   break
        # end

        matches << article if article.title[regex]

        break if i > max_results and not matches.empty?
        break if i > max_results*2
        break if matches.size >= max_results
      end
    end
    matches
  end

  def each_article
    cmd = ["zimdump", "-n", "A", "-L", file]
    IO.popen(cmd, "r") do |io|
      io.each_line { |line| yield Article.from_line(self, line) }
    end
  end

end

######################################################################

# require 'sequel'

# class Index

#   attr_reader :db, :wiki

#   def initialize(wiki, file)
#     @wiki = wiki
#     @db = Sequel.sqlite(file)
#   end

#   def search(words, max=50)
#     query = "%#{words.join("%")}%"
#     db[:titles].where { title.like query }.limit(max)
#   end

#   def rebuild!
#     puts "* Creating table..."
#     db.create_table!(:titles) do
#       column :title, :text
#       column :article_id, :string
#     end

#     titles = db[:titles]

#     puts "* Adding articles..."

#     wiki.each_article do |article|
#       puts "|_ #{article.title}"
#       titles.insert(article.title, article.id)
#     end

#     puts "* Indexing..."
#     db.alter_table(:titles) { add_index :title }
#   end

# end

######################################################################

WEBSERVER = proc do |wiki|
  $wiki = wiki

  require 'sinatra/base'

  class WebServer < Sinatra::Base

    SEARCH_FIELD = <<~HAML
      :css
        #searchbox {
          //float: right;
          //margin-right: 30%;
          max-width: 55.8em;
          margin: 0 auto 0 auto;
        }

      %form{action: "/", id: "searchbox"}
        %input{name: 'q', value: @query}
        %input{type: 'submit', value: "search"}
    HAML

    SEARCH_RESULTS = <<~HAML
      - if @query
        %h3
          Searching for:
          = @query
      - else
        :javascript
          window.onload = function() { document.getElementsByName("q")[0].focus() }

      %ul
        - if @results
          - @results.each do |result|
            %li
              %a{href: "/" + result.url}= result.title
              / %a{href: "/" + result.id}= result.title
    HAML

    PAGE = <<~HAML
      %a{href: "/", style: "float: left;"}
        << HOME
        &nbsp;

      #{SEARCH_FIELD}

      = @article.body
    HAML


    before do
    end

    after do
      puts "GET #{request.path_info} (#{response.status})"
    end

    get "/favicon.ico" do
      article = $wiki.get_file("favicon.png")
      content_type "image/png"
      article.body
    end

    # /I/m/American_Samoa_location_map.svg.png
    get %r{/(?:-|I)/(.+)} do |filename|
      raise Sinatra::NotFound if filename[/\.js$/]

      ext      = filename[/\.[^\.]+$/].downcase
      mimetype = Rack::Mime::MIME_TYPES[ext]
      article  = $wiki.get_file(filename)

      content_type mimetype
      article.body
    end

    get "/:filename.html" do
      @article = $wiki.get_page(params["filename"])
      p @article
      haml PAGE
    end

    get %r{/(\d+)} do |id|
      @article = $wiki.get(id)
      p @article
      haml PAGE
    end

    get "/" do
      if @query = params["q"]
        @results = $wiki.search(@query.split, 150)
      end

      haml SEARCH_FIELD + SEARCH_RESULTS #, {}, {query: query, results: results}
    end

    run!
  end
end

######################################################################

def error(message, code=1)
  $stderr.puts message
  exit code
end

######################################################################
# Parse options
######################################################################

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: wik [options] <search terms>"

  on "s",   "server",       "Start server"
  on "f=",  "zimfile",      "ZIM file (defaults to 'wikipedia_en_all_*.zim')"
  on "i=",  "index",        "Index file (TSV)"
  on "r",   "reindex",      "Regenerate the TSV index"
  on "n=",  "num-results",  "Number of results", default: 10
end

args = ARGV

######################################################################

if __FILE__ == $0

  # ZIM file
  if zim = opts[:zimfile]
    zimfile = Path[zim]
    error("Couldn't find #{zimfile}") unless zimfile.exists?
  else
    zimfile = Path["~/.www.kiwix.org/kiwix/*.default/data/content/wikipedia_en_all_*.zim"].sort_by(&:mtime).last
  end

  # INDEX file
  if index = opts[:index]
    indexfile = Path[index]
  else
    indexfile = zimfile.with(ext: "tsv")
  end

  error("Couldn't find #{indexfile}") unless indexfile.exists?

  # Webserver
  if opts.server?
    WEBSERVER.call(Wiki.new(zimfile, indexfile))
    exit
  end

  # Regenerate Index
  if opts.index?
    w.index.rebuild!
    exit
  end


  # Search from command line
  if args.empty?
    puts
    puts "Error: Must supply at least one search term".light_red
    puts
    puts opts
    exit 1
  end

  w = Wiki.new(zimfile, indexfile)

  words = args
  results = w.search(words, opts[:n].to_i)
  # results = w.tsv_search(args, opts[:n].to_i)
  # results = w.zimdump_search(args, opts[:n].to_i)

  escaped_words = words.map { |word| Regexp.escape(word) }
  highlight_re  = /(#{escaped_words.join("|")})/i

  colorized_results = results.map.with_index do |result, n|
    highlighted_title = result[:title].gsub(highlight_re) { |m| "<14>#{m}</14>" }
    "<7>#{n+1}<8>. <11>#{highlighted_title}".colorize
  end.reverse

  # puts Term::Table.new(colorized_results, :ansi=>true).by_columns
  colorized_results.each { |r| puts r }

  print "<8>select> <7>".colorize

  n = $stdin.gets.to_i
  article = results[n-1]
  # article = results.first

  ansi = IO.popen("html2text", "r+") do |markdown|
    markdown.write article.body
    markdown.close_write
    markdown_to_ansi(markdown.read)
  end

  lesspipe { |less| less.puts ansi }

end
