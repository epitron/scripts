#!/usr/bin/env ruby

## TODOs:
# * Add a clipboard option which automatically checks BOTH
#   primary and secondary clipboards for urls (preferring route matches if both
#   clipboards contain an url).
# * Redirects/shorteners
#   |_ Log target of shortener, not shortener
#   |_ Notify user immediately, since they can be slow (via click noise or notify-send)
#   |_ Enhancement: Routing rules for shorteners which automatically does the above
# * Config file

######################################################################################
# "web" by Chris Gahan (chris@ill-logic.com)
######################################################################################
# This script intelligently opens URLs in the best browser on the current desktop,
# or on another desktop.
#
# Now you can have as many browsers open on as many desktops as you want, and you'll
# never have to worry when clicking on a link that it'll go to the wrong one.
######################################################################################

######################################################################################
# ROUTING RULES
######################################################################################
#
# The behaviour of this script can be easily customized by editing the "routes" below.
#
# Each match is tried in order, and the first matching one will be executed.
# You can do whatever you like in the match's block.
#
# (Calling "open_in_best_browser(url, BROWSERS)"" is the default behaviour.)
#
# Match rule examples:
#   match "site.com"
#   match /site\.com/
#   match host: /(site1|site2)\.com/
#   match host: %w[site1.com site2.com], scheme: "https"
#   match "site1.com", "site2.com", "site3.com"
#   match host: "site.com"
#   match ->(uri) { uri.host["site.com"] and Time.now.year == 2012 }
#
# The 'uri' object:
#   Each rule matches against Ruby's URI object, and when a match succeds, the block
#   is passed the URI object.
#
#   For example, if your url is "https://site.com/path?query=yes", the URI object's
#   attributes are:
#     scheme = "https",
#     host   = "site.com",
#     port   = 443,
#     path   = "/path",
#     query  = "query=yes"
######################################################################################

# A list of browsers, which will be tried in order.
PLAY           = "#{__dir__}/play"
BROWSERS       = %w[opera vivaldi-bin chrome chromium xombrero midori firefox jumanji]
VIDEO_BROWSERS = %w[chrome chromium firefox opera]

routes do

  default do |uri|
    open_in_best_browser uri, BROWSERS
  end

  # Strip click trackers
  match(host: /google.\w{2,3}$/, path: "/url")   { |uri| route uri.params["url"] || uri.params["q"] }
  match(host: /facebook\.com$/,  path: "/l.php") { |uri| route uri.params["u"] }

  # Resolve redirects
  match(host: %w[t.co bit.ly is.gd ill-logic.com]) { |uri| route uri.follow_redirect }

  # Open videos in mplayer
  play_video = proc { |uri| exec(PLAY, uri) }
  match host: %w[ustream.tv youtu.be liveleak.com wimp.com vimeo.com blip.tv twitch.tv exponential.singularityu.org dailymotion.com], &play_video
  match host: %w[youtube.com], path: %r{^/(watch|embed)}, &play_video
  match host: "ted.com", path: "/talks/", &play_video
  match path: /\.(mp4|mkv|m4v|webm|ogv|avi|flv|ts|mov|mpe?g|mjpeg)$/i, &play_video

  # Other videos open in browsers that are good at playing videos
  match host: %w[imgur.com twitch.tv justin.tv infoq.com] do |uri|
    open_in_best_browser uri, VIDEO_BROWSERS
  end

end

######################################################################################
# Here's the actual program. (This gets executed before the "routes" command above.)

BEGIN {

  # Escape from bundler's cage!
  if defined? Bundler
    old_warn_level = $VERBOSE
    $VERBOSE = nil

    # /usr/scripts/web:99:in `<main>': undefined method `preserve_gem_path' for Bundler:Module (NoMethodError)

    if Gem.post_reset_hooks.reject!{ |hook| hook.source_location.first =~ %r{/bundler/} }
      Bundler.preserve_gem_path
      Gem.clear_paths
      Gem::Specification.reset

      load 'rubygems/core_ext/kernel_require.rb'

      Kernel.module_eval do
        def gem(gem_name, *requirements) # :doc:
          skip_list = (ENV['GEM_SKIP'] || "").split(/:/)
          raise Gem::LoadError, "skipping #{gem_name}" if skip_list.include? gem_name
          spec = Gem::Dependency.new(gem_name, *requirements).to_spec
          spec.activate if spec
        end
      end
    end

    $VERBOSE = old_warn_level
  end

  require 'epitools/sys'
  require 'epitools/wm'
  require 'epitools/core_ext/misc'
  require 'epitools/core_ext/hash'

  ####################################################################################

  module URI

    #
    # Strip out params with blank values.
    #
    alias_method :old_params, :params

    def params
      old_params.delete_if { |k,v| v.blank? }
    end

    def follow_redirect
      require 'http'

      response = ::HTTP.get(self)
      response.headers["Location"] || self
    end

    #
    # Follow an URI's redirects and return the new URI (or the same URI,
    # if there were no redirects to follow.)
    # NOTE: Requires curl
    #
    # def follow_redirects(all: true)
    #   # output   = IO.popen(["curl", "-sLI", to_s]) { |io| io.read }
    #   output   = IO.popen(["curl", "-si", to_s]) { |io| io.read }
    #   uri      = self

    #   output.each_line do |line|
    #     if line.strip =~ /^location: (.+)$/i
    #       # p line: line, match: $1
    #       uri = uri + $1
    #       break unless all
    #     end
    #   end

    #   uri
    # end
    # alias_method :follow_redirect, :follow_redirects


    # def chase_redirects
    #   require 'http'

    #   current_url = self

    #   loop do
    #     response = ::HTTP.get(current_url)
    #     break unless redirect = response.headers["Location"]
    #     current_url = redirect
    #   end

    #   current_url
    # end

  end

  ####################################################################################
  # Router DSL lets you do arbitrary things for certain websites.

  class Router
    #
    # Magically load rules from DATA (everything in __END__)
    #
    def initialize(&block)
      @matchers = []
      @default  = nil

      instance_eval &block
    end

    def match(*args, &block)
      @matchers << [args, block]
    end

    def default(&block)
      @default = block
    end

    def route!(url)
      # TODO: Avoid infinite routing loops

      uri = URI.parse(url)

      # Make sure the default is set...
      @default ||= proc.new { open_in_best_browser uri, BROWSERS }

      # URI.parse doesn't handle file:/// urls properly, so we'll have to bypass it...
      return @default.(url) if url.to_s[%r{^file://}i]

      # Try each of the matchers...
      @matchers.each do |args, block|

        matched = args.any? do |arg|
          case arg

          when Hash
            arg.all? do |key, val|
              case val
              when Array
                if key == :host
                  # match the end of the domain
                  val.any? { |v| uri.host[/(^|\.)#{v}$/] }
                else
                  val.any? { |v| uri.send(key)[v] }
                end
              when String, Regexp
                uri.send(key)[val]
              else
                raise "Unknown match value: #{val.inspect}"
              end
            end

          when Regexp, String
            uri.to_s[arg]

          when Proc
            arg.call(uri)

          else
            raise "Unknown match thing: #{arg.inspect}"
          end

        end

        return block.call(uri) if matched

      end

      # Otherwise, do the default action.
      @default.call(uri)
    end

  end

  def routes(&block)
    $router = Router.new(&block)
  end

  ######################################################################################

  #
  # Type: :error, :info, :video
  #
  def notify(type, title, body, time: 5)
    require 'cgi'

    puts "[#{type}] #{title}"
    puts "  #{body}"

    time_in_ms = time * 1000

    cmd = ["notify-send"]
    cmd << "--expire-time=#{time_in_ms}"
    cmd << "--app-name=play"
    cmd << "--icon=#{type}"
    cmd += [title, body].map {|s| CGI.escapeHTML s }

    system *cmd
  end

  ######################################################################################

  def select_parents(query, &block)
    process = Sys.ps($$).first.parent

    parents = []
    while process
      parents << process
      process = process.parent
    end

    block ||= proc { |process| process.command[query] }

    parents.select &block
  end

  def opened_by?(program)
    find_in_parents(program)
  end

  def find_browsers(windows, browsers)
    browsers.map do |browser_name|

      browser_window = windows.find do |w|
        next if w.command.nil?

        # Hack for Chrome's "Tabs Outliner" plugin
        next if browser_name.in?(["chrome", "chromium"]) and w.title == "Tabs Outliner"

        binary = w.command.split.first
        binary[browser_name]
      end

      [ browser_name, browser_window ] if browser_window

    end.compact
  end

  def best_browser_for(uri, browsers)
    # Group by browsers
    browsers_on_current_desktop = find_browsers(WM.current_desktop.windows, browsers)

    if browsers_on_current_desktop.any?
      browser_name, win = browsers_on_current_desktop.first
      # p [:activating_browser_on_current_desktop, win]
    elsif
      browsers_on_all_desktops = find_browsers(WM.windows, browsers)
      if browsers_on_all_desktops.any?
        browser_name, win  = browsers_on_all_desktops.first
        # p [:activating_browser_on_other_desktop, win]
      end
    end

    [browser_name, win]
  end

  def to_clipboard(string)
    IO.popen("xclip -selection clipboard", "w") { |clip| clip << string }
  end

  def open_in_best_browser(uri, browsers)
    name, browser = best_browser_for(uri, browsers)

    unless browser
      notify :error, "No browser!", "No suitable browser found on any desktop."
      exit 1
    end

    puts "* Opening #{uri.inspect} in #{name} on #{browser.desktop.name}"

    case name
    when "xombrero"
      system("xombrero", "-n", uri)
      browser.activate!
    else
      to_clipboard(uri)
      browser.activate!
      browser.send_keys("<Ctrl-T><Ctrl-L><Ctrl-V>")
      sleep 0.2
      browser.send_keys("<Ctrl-L><Return>")
    end
  end

  def which(bin)
    ENV["PATH"].split(":").each do |dir|
      path = File.join(dir, bin)
      return path if File.exists? path
    end
  end

  #
  # If the required binaries aren't in the path, tell the user, then terminate.
  #
  def ensure_required_binaries_are_in_the_path
    missing = false

    {"wmctrl"=>"wmctrl", "xse" => "xsendevent", "xclip" => "xclip"}.each do |bin, package|
      unless which(bin)
        puts "* '#{bin}' not found in path; please install the '#{package}' package."
        missing = true
      end
    end

    exit 1 if missing
  end

  LOGFILE = File.join(ENV["HOME"], "web.log")

  def write_to_log(url)
    open(LOGFILE, "a") do |f|
      timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")
      f.puts "#{timestamp} | #{url}"
    end
  end

  def route(url)
    write_to_log url
    $router.route! url
  end

}


if $0 == __FILE__
  if ARGV.any? { |arg| arg == "--help" }
    puts "== Usage: =="
    puts " web <url>"
    puts
    puts "== What it Does: =="
    puts " Opens the url in the best browser on the current desktop."
    puts " If there's no browser on the current desktop, it finds the"
    puts " best browser on the nearest desktop and jumps to that one."
    puts
    puts "== These are the browsers it will try to use (in order): =="
    puts " #{BROWSERS.join(", ")}"
    puts

    exit
  end

  ensure_required_binaries_are_in_the_path

  if url = ARGV.first
    url = "http://#{url}" unless url[%r{^(https?|file)://}i] # slap an http:// on the argument if necessary
    route url
  else
    puts "usage: web <url>"
  end
end
