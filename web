#!/usr/bin/env ruby

## TODOs:
# * follow_redirect should never get into a loop (remember last url, and check that Location header is set)
# * Add a clipboard option which automatically checks BOTH
#   primary and secondary clipboards for urls (preferring route matches if both
#   clipboards contain an url).
# * Redirects/shorteners
#   |_ Log target of shortener, not shortener
#   |_ Notify user immediately, since they can be slow (via click noise or notify-send)
#   |_ Enhancement: Routing rules for shorteners which automatically does the above
# * Config file

######################################################################################
# "web" router, by Chris Gahan (chris@ill-logic.com)
######################################################################################
# Call this script on an URL to forward it to the appropriate application (using
# routing rules).
#
# You can specify the rules in a Ruby DSL (documented in the "ROUTING RULES" section
# below). The DSL provides advanced matching against the URL and all of its sub-parts
# (scheme, host, port, path, query params, etc.) using Regexes or sets.

# executed on the URL
# send the URL to a specific browser if multiple are open (on a specific desktop),
# or to a program.

#
# The configuration uses a DSL which allows for detailed matching on any part of an
# URL, and full URL rewriting using plain old Ruby.
#
# Now you can have as many browsers open on as many desktops as you want, and you'll
# never have to worry when clicking on a link that it'll go to the wrong one.
######################################################################################

######################################################################################
# ROUTING RULES
######################################################################################
#
# The behaviour of this script can be easily customized by editing the "routes" below.
#
# Each match is tried in order, and the first matching one will be executed.
# You can do whatever you like in the match's block.
#
# (Calling "open_in_best_browser(url, BROWSERS)"" is the default behaviour.)
#
# Match rule examples:
#   match "site.com"
#   match /site\.com/
#   match "site1.com", "site2.com", "site3.com"
#   match host: "site.com"
#   match host: /(site|othersite)\.com/
#   match host: %w[site1.com site2.com], scheme: "https"
#   match ->(uri) { uri.host["site.com"] and Time.now.year == 2012 }
#   match params: "tracker"
#   match params: {enabled: 1}
#   match params: ["user", "age", "redirect_to"]
#
# The 'uri' object:
#   Each rule matches against Ruby's URI object, and when a match succeds, the block
#   is passed the URI object.
#
#   For example, if your url is "https://site.com/path?query=yes", the URI object's
#   attributes are:
#     scheme = "https",
#     host   = "site.com",
#     port   = 443,
#     path   = "/path",
#     query  = "query=yes"
#     params = {"query" => "yes"}
######################################################################################

######################################################################################
# .webrc (Local Config)
######################################################################################
#
# You can add extra rules just for your specific machine by putting them in ~/.webrc.
#
# (The .webrc's contents are treated as regular Ruby code that are executed in the
# context of the script.)
#
# Example .webrc:
#
#   routes do
#     match host: "another-video-site.com", path: "/videos/", &play_video
#     match(host: "another-url-shortener.com") { |uri| route uri.follow_redirect }
#   end
#
######################################################################################

# A list of browsers, which will be tried in order.
PLAY           = "#{__dir__}/play"
BROWSERS       = %w[qupzilla chromium chrome firefox opera vivaldi-bin dillo otter-browser xombrero midori jumanji]
VIDEO_BROWSERS = %w[chrome chromium firefox opera]

load_rc_file

routes do

  default do |uri|
    open_in_best_browser uri
  end

  # Strip click trackers
  match(host: /google.\w{2,3}$/, path: "/url")   { |uri| route uri.params["url"] || uri.params["q"] }
  match(host: /facebook\.com$/,  path: "/l.php") { |uri| route uri.params["u"] }
  match(host: "youtube.com", path: "/attribution_link") { |uri| route "https://youtube.com#{uri.params["u"]}" }
  match(params: "fbclid") { |uri| route uri.without_params("fbclid") }

  # Resolve redirects
  match(host: %w[t.co bit.ly is.gd ow.ly buff.ly], &follow_redirect) # { |uri| route uri.follow_redirect }

  # Open videos in 'play' (using a standalone desktop video player)
  match host: %w[ustream.tv youtu.be liveleak.com wimp.com vimeo.com blip.tv twitch.tv exponential.singularityu.org dailymotion.com thoughtmaybe.com], &play_video
  match host: %w[youtube.com invidio.us], path: %r{^/(watch|embed)}, &play_video
  match host: "peertube.social",          path: %r{^/videos/watch/}, &play_video
  match host: %w[facebook.com bigthink.com theguardian.com], path: %r{/videos?/}, &play_video
  match host: "media.ccc.de", path: %r{^/v/.+},     &play_video
  match host: "ted.com",      path: "/talks/",      &play_video
  match host: "longnow.org",  path: "/seminars/",   &play_video
  match host: "c-span.org",   path: "/video/",      &play_video
  match host: "tvo.org",      path: ["/programs/", "/video/", "/documentaries/"], &play_video
  match host: %w[soundcloud.com bandcamp.com mixcloud.com], &play_video
  match path: /\.(mp4|mkv|m4v|f4v|webm|ogv|avi|flv|ts|mov|asf|mj?pe?g|vob)$/i, &play_video

  # Other videos open in browsers that are good at playing videos
  match host: %w[imgur.com twitch.tv justin.tv infoq.com] do |uri|
    open_in_best_browser uri, VIDEO_BROWSERS
  end

end

######################################################################################
# Here's the actual program. (This gets executed before the "routes" command above.)

BEGIN {

  # Escape from bundler's cage!
  if defined? Bundler
    old_warn_level = $VERBOSE
    $VERBOSE = nil

    # /usr/scripts/web:99:in `<main>': undefined method `preserve_gem_path' for Bundler:Module (NoMethodError)

    if Gem.post_reset_hooks.reject!{ |hook| hook.source_location.first =~ %r{/bundler/} }
      Bundler.preserve_gem_path
      Gem.clear_paths
      Gem::Specification.reset

      load 'rubygems/core_ext/kernel_require.rb'

      Kernel.module_eval do
        def gem(gem_name, *requirements) # :doc:
          skip_list = (ENV['GEM_SKIP'] || "").split(/:/)
          raise Gem::LoadError, "skipping #{gem_name}" if skip_list.include? gem_name
          spec = Gem::Dependency.new(gem_name, *requirements).to_spec
          spec.activate if spec
        end
      end
    end

    $VERBOSE = old_warn_level
  end

  require 'epitools/sys'
  require 'epitools/wm'
  require 'epitools/core_ext/misc'
  require 'epitools/core_ext/hash'
  require 'epitools/core_ext/object'
  require 'epitools/core_ext/uri'

  ####################################################################################
  class Class

    def debug(*meths)
      return unless $DEBUG

      puts "debug instrumentation: #{meths.inspect}"

      m = Module.new

      meths.each do |meth|
        case meth
        when :*
          debug(methods)
        else
          m.define_method(meth) do |*args|
            p [meth, args]
            super(*args)
          end
        end
      end

      puts "prepending #{m} to #{self}"
      self.module_prepend(m)
    end

  end
  ####################################################################################


  module URI

    #
    # Strip out params with blank values.
    #
    alias_method :old_params, :params

    def params
      old_params.reject { |k,v| v.blank? }
    end

    def path_with_query
      "#{path}&#{query}"
    end
    alias_method :fullpath, :path_with_query

    def with_params(*keys)
      with(query: params.select{|k,v| keys.include? k }.to_query)
    end

    def without_params(*keys)
      with(query: params.reject{|k,v| keys.include? k }.to_query)
    end

    def get
      require 'net/http'
      Net::HTTP.get_response(self)
    end

    # def get(headers={}, redirect_limit=10)
    #   raise "Sorry, URI can't get from #{scheme.inspect} URIs yet" unless scheme =~ /^https?$/
    #   raise 'Too many HTTP redirections' if redirect_limit == 0

    #   # headers['User-Agent'] ||= USER_AGENT

    #   # response = Net::HTTP.start(host, port) do |http|
    #   #   # the_path = path.empty? ? "/" : path
    #   #   req = Net::HTTP::Get.new(self, headers)
    #   #   http.request(req)
    #   # end

    #   response = Net::HTTP.get_response(self)

    #   case response
    #   when Net::HTTPSuccess
    #     response
    #   when Net::HTTPRedirection
    #     # puts "redirect: #{response['location']}"
    #     URI(response['location']).get(headers, redirect_limit-1)
    #   else
    #     response.error!
    #   end
    # end


    def follow_redirect
      response = get

      if response.code_type < Net::HTTPRedirection
        puts "following redirect: #{self}"
        response["location"]
      else
        self
      end
    end

    def escaped
      CGI.escape to_s
    end

    #
    # Follow an URI's redirects and return the new URI (or the same URI,
    # if there were no redirects to follow.)
    # NOTE: Requires curl
    #
    # def follow_redirects(all: true)
    #   # output   = IO.popen(["curl", "-sLI", to_s]) { |io| io.read }
    #   output   = IO.popen(["curl", "-si", to_s]) { |io| io.read }
    #   uri      = self

    #   output.each_line do |line|
    #     if line.strip =~ /^location: (.+)$/i
    #       # p line: line, match: $1
    #       uri = uri + $1
    #       break unless all
    #     end
    #   end

    #   uri
    # end
    # alias_method :follow_redirect, :follow_redirects


    # def chase_redirects
    #   require 'http'

    #   current_url = self

    #   loop do
    #     response = ::HTTP.get(current_url)
    #     break unless redirect = response.headers["Location"]
    #     current_url = redirect
    #   end

    #   current_url
    # end

  end

  ####################################################################################
  #
  # Router DSL (rules in the "routes do" block are evaluated against this class instance)
  #
  class Router

    debug :*

    def initialize
      @rules = []
      @default  = nil
    end

    ## Helpers

    def play_video
      proc { |uri| exec(PLAY, uri) }
    end

    def follow_redirect
      proc { |uri| route uri.follow_redirect }
    end
    alias_method :follow, :follow_redirect

    ## Rules

    #
    # Create a new rule
    #
    def match(*conditions, &block)
      @rules << [conditions, block]
    end

    #
    # Set the default action, if all other rules
    #
    def default(&block)
      @default = block
    end

    #
    # Pass an URL through the rules
    #
    def route!(uri, opts={})
      # TODO: Figure out how to avoid infinite routing loops (hasn't been an issue yet)

      uri = URI.parse(uri.gsub("[", "%5B").gsub("]", "%5D")) unless uri.is_a? URI

      # The default @default (sets it if it hasn't been set)
      @default ||= proc.new { open_in_best_browser uri }

      # URI.parse doesn't handle file:/// urls properly, so, as a quick fix, let's just bypass it...
      return @default.(uri) if uri.to_s[%r{^file://}i]

      # Try the rules until one matches
      @rules.each do |conditions, block|

        # NB: 'conditions' is the array of conditions that determine whether the match matches, and 'block' is what's executed if there's a match
        matched = conditions.any? do |condition|
          case condition
          when Hash
            # if a hash is supplied, all conditions must match (boolean AND)
            condition.all? do |key, val|
              # matching against params requires special logic
              if key == :params

                # match a hash/array/string against the params
                case val
                when Hash
                  val.map { |k,v| [k.to_s, v.to_s] }.all? { |k,v| uri.params[k] == v }
                when Array
                  val.all? { |k| uri.params[k] }
                else
                  uri.params[val]
                end

              else

                case val
                when Array
                  if key == :host
                    # match the end of the domain
                    val.any? { |v| uri.host&.match(/(^|\.)#{v}$/) }
                  else
                    val.any? { |v| uri.send(key)[v] }
                  end
                when String, Regexp
                  uri.send(key)&.[](val)
                else
                  raise "Unknown match value: #{val.inspect}"
                end

              end
            end

          when Regexp, String
            uri.to_s[condition]

          when Proc
            condition.call(uri)

          else
            raise "Unknown match thing: #{condition.inspect}"
          end

        end

        return block.call(uri) if matched

      end

      # Otherwise, do the default action.
      @default.call(uri)
    end

  end

  def routes(&block)
    $router ||= Router.new
    $router.instance_eval &block
  end

  ######################################################################################

  #
  # Type: :error, :info, :video
  #
  def notify(type, title, body, time: 5)
    require 'cgi'

    puts "[#{type}] #{title}"
    puts "  #{body}"

    time_in_ms = time * 1000

    cmd = ["notify-send"]
    cmd << "--expire-time=#{time_in_ms}"
    cmd << "--app-name=play"
    cmd << "--icon=#{type}"
    cmd += [title, body].map {|s| CGI.escapeHTML s }

    system *cmd
  end

  ######################################################################################

  def load_rc_file
    rc = File.expand_path("~/.webrc")
    if File.exists? rc
      # $router.instance_eval File.read(rc)
      eval File.read(rc)
    end
  end

  def select_parents(query, &block)
    process = Sys.ps($$).first.parent

    parents = []
    while process
      parents << process
      process = process.parent
    end

    block ||= proc { |process| process.command[query] }

    parents.select &block
  end

  def opened_by?(program)
    find_in_parents(program)
  end

  #
  # Takes `windows` (an array of windows), and `browsers` (an array of browser names, ordered by priority), and returns the windows which are preferred browsers
  #
  def find_browsers(windows, browsers)
    browsers.map do |browser_name|

      browser_window = windows.find do |w|
        next if w.command.nil?

        # Hack for Chrome's "Tabs Outliner" plugin
        next if browser_name.in?(["chrome", "chromium"]) and w.title == "Tabs Outliner"

        # Hack for ungoogled-chromium
        if browser_name == "chromium" and w.command == "/usr/l b/chromium/chromium"
          true
        else
          w.command.split.first[browser_name]
        end
      end

      [ browser_name, browser_window ] if browser_window

    end.compact
  end

  def best_browser_for(uri, browsers)
    # Group by browsers
    browsers_on_current_desktop = find_browsers(WM.current_desktop.windows, browsers)

    if browsers_on_current_desktop.any?
      browser_name, win = browsers_on_current_desktop.first
      # p [:activating_browser_on_current_desktop, win]
    elsif
      browsers_on_all_desktops = find_browsers(WM.windows, browsers)
      if browsers_on_all_desktops.any?
        browser_name, win  = browsers_on_all_desktops.first
        # p [:activating_browser_on_other_desktop, win]
      end
    end

    [browser_name, win]
  end

  def to_clipboard(string)
    IO.popen("xclip -selection clipboard", "w") { |clip| clip << string }
  end

  def open_in_best_browser(uri, browsers=BROWSERS)
    name, browser = best_browser_for(uri, browsers)

    unless browser
      notify :error, "No browser!", "No suitable browser found on any desktop."
      exit 1
    end

    puts "* Opening #{uri.inspect} in #{name} on #{browser.desktop.name}"

    case name
    when "xombrero"
      system("xombrero", "-n", uri)
      browser.activate!
    else
      to_clipboard(uri)
      browser.activate!
      browser.send_keys("<Ctrl-T><Ctrl-L><Ctrl-V>")
      sleep 0.2
      browser.send_keys("<Ctrl-L><Return>")
    end
  end

  def which(bin)
    ENV["PATH"].split(":").each do |dir|
      path = File.join(dir, bin)
      return path if File.exists? path
    end
  end

  #
  # If the required binaries aren't in the path, tell the user, then terminate.
  #
  def ensure_required_binaries_are_in_the_path
    missing = false

    {"wmctrl"=>"wmctrl", "xse" => "xsendevent", "xclip" => "xclip"}.each do |bin, package|
      unless which(bin)
        puts "* '#{bin}' not found in path; please install the '#{package}' package."
        missing = true
      end
    end

    exit 1 if missing
  end

  LOGFILE = File.join(ENV["HOME"], "web.log")

  def write_to_log(url)
    open(LOGFILE, "a") do |f|
      timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")
      f.puts "#{timestamp} | #{url}"
    end
  end

  def route(url, opts={})
    write_to_log url
    $router.route! url, opts
  end

}

if $0 == __FILE__
  if ARGV.any? { |arg| arg == "--help" }
    puts "== Usage: =="
    puts " web [options] <url>"
    puts
    puts "== What it Does: =="
    puts " Opens the url in the best browser on the current desktop."
    puts " If there's no browser on the current desktop, it finds the"
    puts " best browser on the nearest desktop and jumps to that one."
    puts
    puts "== Options: =="
    puts " -d    Debug mode"
    puts " -k    Kodi mode ('-k' to toggle, '-k on' to enable, '-k off' to disable)"
    puts
    puts "== These are the browsers it will try to use (in order): =="
    puts " #{BROWSERS.join(", ")}"
    puts

    exit
  end

  opts, args = ARGV.partition { |arg| arg[/^--?\w/] }
  opts = opts.map { |opt| opt.sub(/^-+/, '').split("=") }.to_h

  ensure_required_binaries_are_in_the_path

  if url = args.first
    # url = "http://#{url}" unless url[%r{^(https?|file|magnet)://}i] # slap an http:// on the argument if necessary
    route url, opts
  else
    puts "usage: web <url>"
  end
end
