#!/usr/bin/ruby

#############################################################################
## REQUIREMENTS

%w[
  rubygems 
  epitools

  set 
  ostruct

  shellwords

  optparse
  optparse/time
].each { |r| require r }

#############################################################################


#############################################################################
## GLOBALS
MY_VERSION = "0.2"
OPTIONS = OpenStruct.new
#############################################################################


#############################################################################

class Result

  include Comparable

  attr_accessor(
    :root, 
    :path, 
    :path_without_root, 
    :message
  )
  
  def initialize(root, path, message=nil)
    root = root + "/" unless root[-1..-1] == "/"
    @root = root
    @path = path
    @path_without_root = path.startswith?(root) ? path[root.size..-1] : path
    # @path_without_root = path.sub(/^#{Regexp.escape root}/, '')
    @message = message
  end
  
  def to_s
    "<white>#{path_without_root}</white>#{" <light_blue>(<light_cyan>#{message}</light_cyan>)</light_blue>" if message}".colorize
  end


  ## Comparable overrides
  
  def hash
    path_without_root.hash
  end
  
  def eql?(other)
    path_without_root.eql?(other.path_without_root)
  end
  
  def <=>(other)
    path_without_root <=> other.path_without_root
  end
  
end

#############################################################################


#############################################################################

class Folder
  
  attr_accessor(
    :root, 
    :paths, 
    :size_to_path, 
    :name_to_path, 
    :path_to_size
  )
  
  def initialize(root)
    @root = root
    puts "<light_yellow>* Scanning <light_white>#{root}</light_white>...</light_yellow>".colorize
    
    puts "  <white>|_ <light_blue>checking for available disk space...".colorize
    root = Shellwords.escape(root)
    @paths = Dir[ File.join(root, "**/*") ].select {|path| not File.directory? path }

    @size_to_path = {}
    @name_to_path = {}
    @path_to_size = {}
    
    puts "  <white>|_ <light_cyan>reticulating splines...".colorize

    @paths.each do |path|
      begin
        dir, filename = File.split path
        size = File.size path
        @size_to_path[size] = path
        @name_to_path[filename] = path
        @path_to_size[path] = size
      rescue SystemCallError => e
        puts e.to_s.light_red
      end
    end
    
    puts "  |_ done! found <light_white>#{@paths.size}</light_white> files.".colorize
    puts
  end

  #
  # Compare one folder to another.
  #
  # Returns 2 arrays: "common" files, and files "unique" to this folder.
  #
  def compare_to(other, skip=[])
    common = []
    unique = []
    #p ["skip:", skip.size]
    #p ["first few:", skip[0..10]]
    
    skip = Set.new(skip.map{|p| p.path})
    
    name_to_path.each do |name, path|
      size = path_to_size[path]

      opath_samesize = other.size_to_path[size]
      opath_samename = other.name_to_path[name]    

      next if skip.include? opath_samename or skip.include? opath_samesize

      r = Result.new(root, path)

      if opath_samesize and opath_samename
        # same size, same name
        common << r

      elsif opath_samename
        # same name, different content
        osize = other.path_to_size[opath_samename]
        diff = (size - osize).abs
        r.message = "#{diff} bytes #{size > osize ? "<light_green>larger</light_green>" : "<light_red>smaller</light_red>"}"
        unique << r

      elsif opath_samesize
        # same size, different name
        if OPTIONS.verbose
          puts "<yellow>* Size matches, comparing content:\n  <light_cyan>#{path}\n  <light_white>#{opath_samesize}".colorize
        end

        if content_probably_matches?(path, opath_samesize)
          # same content (probably)
          oname = File.split(opath_samesize).last
          r.message = "other name: #{oname}"
          common << r
        else
          # different content
          unique << r
        end

        puts if OPTIONS.verbose
        
      else

        unique << r

      end
    end
    
    [common, unique]
  end

end

#############################################################################


#############################################################################

def content_probably_matches?(a, b, sample_percent = 0.001)
  sizea = File.size a
  sizeb = File.size b
  raise "Files must be the same size" unless sizea == sizeb
  raise "Files must exist" unless [a,b].all? { |f| File.exists? f }
  
  size                = sizea
  block_size          = 2**14  # 16k blocks (average filesystem block size)
  bytes               = (sizea * sample_percent).to_i
  cmp_blocks          = bytes / block_size
  total_blocks        = size / block_size
  random_blocks       = ( [0] + (1...cmp_blocks).map{ (total_blocks*rand).to_i } + [[0, total_blocks-1].max] ).uniq.sort
  test_positions      = random_blocks.map{|block| block * block_size }

  #local_variables.map{|v| "#{v} = #{eval(v).inspect}"}.each{|v| puts v}
  begin
    fa, fb = open(a), open(b)
    result = test_positions.all? do |pos|
      fa.seek(pos); fb.seek(pos)
      fa.read(block_size) == fb.read(block_size)
    end
    fa.close; fb.close
  rescue SystemCallError => e
    puts e.to_s.light_red
    result = false
  end
  result
end

#############################################################################


#############################################################################
#
# Returns: [unique_to_a, common, unique_to_b]
#
# Like a Venn diagram: ( unique_to_a ( common ) unique_to_b )
#
def compare_folders(a, b)

  puts "* Comparing contents...".light_yellow
  puts if OPTIONS.verbose
  
  common_a, unique_to_a = a.compare_to(b)
  common_b, unique_to_b = b.compare_to(a, common_a)
  common = common_a | common_b

  puts
  [unique_to_a, common, unique_to_b]
end

#############################################################################

def title(msg)
  puts ("-"*50).light_blue
  puts "<light_cyan>#{msg}".colorize
  puts ("-"*50).blue
end

def display_unique(folder, unique)
  title "Only in <light_yellow>#{folder.root}</light_yellow> <cyan>(<light_cyan>#{unique.size}</light_cyan> <light_blue>files</light_blue>)</cyan>:"
  display_results unique
  puts  
end

def display_common(common)
  title "Common to both <cyan>(<light_cyan>#{common.size}</light_cyan> <light_blue>files</light_blue>)</cyan>:"
  display_results common
  puts  
end

def display_results(results)
  results.sort.each do |r|
    puts r
  end
end

#############################################################################

def parse_options!  
  ARGV.push("--help") if ARGV.empty?
  
  OptionParser.new do |opts|
    opts.banner = "Usage: folderdiff [options] <folder a> <folder b>"
    opts.separator " "
    opts.separator "Specific options:"
    
    opts.on("-c", "--common", "Show common files") do |opt|
      OPTIONS.common = true
    end
  
    opts.on("-v", "--verbose", "Verbose mode") do |opt|
      OPTIONS.verbose = true
    end
  
    opts.on("", "--version", "Version information") do |opt|
      puts "folderdiff v#{MY_VERSION}"
      puts
      exit
    end

    # No argument, shows at tail.  This will print an options summary.
    # Try it and see!
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      puts
      exit
    end

  end.parse!
end
  
#############################################################################

def main
  parse_options!

  raise "Must pass 2 folders to compare as parameters" unless ARGV.size == 2
  raise "Both folders must exist" unless ARGV.any? and ARGV.all?{|f| File.exists? f}

  a,b = ARGV.map{|path| Folder.new path }

  unique_to_a, common, unique_to_b = compare_folders(a, b)
  
  display_common(common) if OPTIONS.common
  display_unique(a, unique_to_a)
  display_unique(b, unique_to_b)
end

#############################################################################

if $0 == __FILE__
  main
end

#############################################################################
