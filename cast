#!/usr/bin/env ruby
########################################################
gem 'slop', "~> 3.6"
require 'slop'
require 'epitools'
########################################################

opts = Slop.parse(help: true, strict: true) do
  banner "Usage: cast [options]"

  on "p",  "pause",   "Pause/unpause"
  on "a",  "add",     "Enqueue URL"
  on "s",  "scan",    "Scan devices"
  on "d=", "device",  "Set Chromecast device"
  on "t=", "seek",    "Seek to time"
  on "n",  "next",    "Go to next playlist entry"
  on "u=", "url",     "Show an URL"
  on "i",  "info",    "Info about the currently playing thing"
  on "v",  "verbose", "Show extended info"
end

args = ARGV

########################################################

def catt(command, *args, device: nil)
  cmd = ["catt"]
  cmd += ["-d", device] if device
  cmd << command
  cmd += args

  # p cmd; puts
  system *cmd
end

########################################################

def help
  @help ||= `catt --help`
end

def help_commands
  help.split_after(/Commands:/).to_a.last.each_line.map { |line| line.strip.split }.compact
end

def valid_commands
  help_commands.map &:first
end

def config_lines
  path = Path["~/.config/catt/catt.cfg"]
  if path.exists?
    path.each_line
  else
    []
  end
end

def devices
  @devices ||= `catt scan`.each_line.reject { |l| l["Scanning"] }
end

def aliases
  config_lines.split_after("[aliases]").to_a.last
end

def playing?
  `catt status`.each_line.grep(/State: PLAYING/).any?
end

########################################################

def process_command(cmd, args, device: nil)
  case cmd
  when "help", "?"
    puts help
    puts "  device        Set Chromecast device"
    puts "  alises        Show device aliases"
    puts "  devices       Show available devices and aliases"
    puts "  help          Show this!"

  when "device"
    if args.empty?
      if device
        puts "device: #{device}"
      else
        config_lines.grep(/^device/).each &:displayln
      end
    else
      device = args.join(" ")
      puts "Device changed to: #{device.inspect}"
    end

  when "aliases"
    puts aliases

  when "devices"
    puts "Aliases:"
    puts aliases
    puts
    puts "Devices:"
    puts devices

  when "pos"
    puts `catt status`.each_line.grep(/^Time:/)

  when "seek"
    if args.empty?
      process_command("pos")
    else
      process_command("seek", args)
    end

  when "volume"
    if args.empty?
      puts `catt status`.each_line.grep(/^Volume:/)
    else
      volume = args.first.to_i.clamp(0..100)
      puts "Setting volume to #{volume}"
      catt("volume", volume.to_s)
    end

  when "commands"
    p valid_commands

  else
    if valid_commands.include? cmd
      catt(cmd, *args, device: device)
    else
      puts "Error: #{cmd.inspect} is not a valid command"
    end

  end
end

########################################################

def repl(opts={})
  require 'readline'

  Thread.new { help } # pre-cache help

  device = opts[:device]

  loop do
    input = Readline.readline("> ", true)
    unless input and not input.empty?
      puts
      return
    end

    cmd, args = input.split
    args      = [args].flatten.compact

    process_command(cmd, args, device: device)
  end
end

########################################################

if opts.scan?
  catt("scan")
elsif opts.info?
  catt("status")
elsif opts.verbose?
  catt("info")
elsif opts.next?
  catt("skip")
elsif opts.pause?
  if playing?
    puts "Pausing..."
    catt("pause")
  else
    puts "Playing..."
    catt("play")
  end
elsif time = opts[:seek]
  catt("seek", time)
elsif url = opts[:url]
  catt("cast_site", url)
else
  if args.empty?
    repl(opts)
  else
    catt("cast", args.pop) unless opts.add?
    args.each { |arg| catt("add", arg) }
  end
end
