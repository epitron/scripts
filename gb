#!/usr/bin/env ruby
#
#----------------------------------------------
# TODOS:
#----------------------------------------------
# * Print "status" beside each branch (last commit date, truncated hash, truncated description)
# * Only show recently active (within 7 days) branches by default (optional: -a to show all branches)
# * Two-column view:
#   - Left: Local branches, Right: remote branches
#   - Line up matching branches, order by commit date
# * Integrate git-branches functionality
# * auto-stash uncommitted changes when switching branches, and auto-unstash when switching back
# * rename branch also renames remote
# * -D deletes local and remote branches
# * show "remote" before "local"
# * use slop
# * create remote branch (based on current?)
# * prompt for confirmation when doing dangerous things
#   (or things that could be mistakes -- eg: creating a branch)
# * eat ugly git messages and make them colourized and pretty

#################################################################################
require 'epitools'
#################################################################################

class Branches

  attr_accessor :local, :remote, :current

  def initialize
    @local = []
    @remote = []
    @current = nil
  end

  def local?(branch); local.include? branch; end
  def remote?(branch); remote.include? "origin/#{branch}"; end
  def remote_for(branch); remote.find {|e| e == "origin/#{branch}" }; end
  def current?(branch); current == branch; end

  def print

    puts

    [ [:remote, :green], [:local, :yellow] ].each do |type, color|
      puts "<grey>== <light_white>#{type} branches: <grey>=============".colorize
      for branch in send(type)
        selected = (branch == current && type == :local)
        if selected
          puts "   #{branch} <===".bright_yellow
        else
          puts "   #{branch}".send(color)
        end
      end
      puts
    end

  end

end

#################################################################################

def git_repo?
  path = Path.pwd
  loop do
    return true if (path/".git").dir?
    break unless path.dirs.pop
  end
  false
end

def ensure_git_repo
  unless git_repo?
    puts "Error: must be in a git repo."
    exit 1
  end
end

def get_branches
  ensure_git_repo

  branches = Branches.new

  `git branch -a`.lines.map(&:strip).each do |line|
    if line =~ %r{^\* (.+)$}
      line = $1
      branches.current = line
    end

    case line
    when /->/
      # ignore aliases
    when %r{^remotes/(.+)$}
      branches.remote << $1
    else
      branches.local << line
    end
  end

  branches
end


#################################################################################
## Main

args = ARGV

if args.empty?
  # Do nothing!

elsif args.first.in? ["--help", "-h"]

  puts %{usage: gb <branch name>

eg:
  gb existingbranch           => switch to existing branch
  gb newbranch                => create a new branch
  gb origin/remotebranch      => create/checkout/track remote branch
  gb -p [<remote>]            => push current branch to remote (default: origin)
  gb -d branch                => delete local branch
  gb -d origin/branch         => delete remote branch
  gb -t [<remote>[/<branch>]] => track current branch on origin/<branchname> (or <remote>/<branchname>)
  gb -r <new_name>            => rename current branch to <new_name>
  gb -r <src> <dest>          => rename <src> branch to <dest>
}

  exit

elsif args.first.downcase == "-r"
  ## Rename

  args.shift
  branches = get_branches

  case args.size
  when 1
    src  = branches.current
    dest = args.first
  when 2
    src, dest = args
  end

  if branches.local? src
    puts "<grey>* <light_cyan>Renaming <light_yellow>#{src} <light_cyan>to <light_yellow>#{dest}".colorize

    # git branch -m old_branch new_branch         # Rename branch locally
    if system "git branch -m #{src} #{dest}"
      puts "Success!"
      # git push origin :old_branch                 # Delete the old branch
      # git push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote
    end
  end

elsif args.first.downcase == "-d"
  ## Delete

  args.shift
  branches = get_branches
  branch   = args.shift

  if branches.local? branch
    puts "<grey>* <light_cyan>Deleting <light_yellow>#{branch}".colorize
    system("git branch -D #{branch}")
  elsif branches.remote? branch
    if prompt("You sure you wanna delete a remote branch???".light_red, 'yN') == "y"
      puts
      puts "Okay!"
      puts

      remote, branch = branch.split("/")

      puts "<grey>* <light_cyan>Deleting <light_yellow>#{branch} <light_cyan>from <light_green>#{remote}".colorize

      system("git push #{remote} :#{branch}")
    else
      puts "Whew!".light_white
    end
  else
    puts "Unknown branch: #{branch}"
  end

  exit

elsif args.first.downcase == "-p"
  ## Push

  args.shift
  remote  = args.shift || "origin"
  current = get_branches.current

  # Track if not already tracked
  system "git push #{remote} #{current}"

  args = ["-t"]

elsif args.first.downcase == "-t"
  ## Track

  args.shift
  branches = get_branches
  current  = branches.current

  remote = args.shift || "origin/#{current}"

  # unless remote["/"]
  #   remote = "#{remote}/#{current}"
  # end

  # FIXME: Create remote branch (or "git push origin master" ) if branch doesn't exist
  # $ gb -t
  # * master tracking origin/master
  # fatal: branch 'origin/master' does not exist


  puts "<grey>* <light_yellow>#{current} <white>tracking <light_green>#{remote}".colorize
  system("git branch --set-upstream-to #{remote} #{current}")
else
  ## Branch
  branches = get_branches

  branch = args.first.downcase

  if branches.local? branch
    puts "<grey>* <light_white>Switching to <light_yellow>#{branch}".colorize
    system("git checkout #{branch}")
  elsif remote_branch = branches.remote_for(branch)
    puts "<grey>* <light_white>Tracking <light_yellow>#{branch}".colorize
    system("git checkout -b #{branch} --track origin/#{branch}")
  else
    puts "* Creating new branch #{branch}"
    system("git branch #{branch}")
    system("git checkout #{branch}")
  end

end

get_branches.print
