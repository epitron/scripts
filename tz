#!/usr/bin/env ruby

###########################################################
# TODO:
# * Fix Term::Table API
###########################################################

gem 'slop', "~> 3.6"
require 'slop'
require 'nokogiri'
require 'epitools'

###########################################################

ROOT_URL = "https://torrentz2.eu/"

TRACKERS = %w[
  udp://tracker.coppersurfer.tk:6969/announce
  udp://tracker.openbittorrent.com:80/
  http://tracker.openbittorrent.com:80/
  udp://tracker.publicbt.com:80/
  http://tracker.publicbt.com:80/
  http://tracker.opentrackr.org:1337/announce
  udp://p4p.arenabg.ch:1337/announce
  http://tracker.ccc.de:80/
  udp://tracker.ccc.de:80/
  udp://glotorrents.pw:6969/announce
  udp://fr33dom.h33t.com:3310/announce
  http://tracker.ilibr.org:6969/announce
  udp://9.rarbg.com:2710/announce
  udp://9.rarbg.to:2710/announce
  udp://9.rarbg.me:2710/announce
  udp://tracker.istole.it:6969/
  udp://tracker.prq.to/announce
  udp://tracker.glotorrents.com:6969/announce
  http://inferno.demonoid.com:3407/announce
  http://p4p.arenabg.ch:1337/announce
  udp://p4p.arenabg.ch:1337
  udp://torrent.gresille.org:80/announce
  udp://tracker.leechers-paradise.org:6969/announce
  udp://zer0day.ch:1337/announce
  udp://mgtracker.org:6969/announce
  udp://tracker.mg64.net:6969/announce
  http://tracker.best-torrents.net:6969/announce
  udp://open.demonii.com:1337/announce
  http://exodus.desync.com:6969/announce
  http://www.eddie4.nl:6969/announce
  http://bt1.the9.com:6969/announce
  http://tracker.torrent.to:2710/announce
  http://tracker.xpear.de:6969/announce
]

###########################################################

module Settings
  extend self

  def rc
    path = Path["~/.tzrc"]
    path.exists? ? path.read_json : {}
  end

  def client
    rc["client"] || 'deluge'
  end

  def page_size
    rc["page_size"]
  end

  def order
    rc["order"]&.to_sym
  end
end


###########################################################

class Result
  attr_accessor :title, :hash, :votes, :age, :date, :size, :seeds, :peers # :tags

  def initialize(dl)
    if dl.is_a? String
      @hash = dl
      return
    end

    link = dl.at("dt a")

    if link.nil?
      if dt = dl.at("dt")
        @title = dt.text
        @verified, @age, @size, @seeds, @peers, @date = [""] * 6
        return
      else
        raise "Bad dl:\n#{dl}"
      end
    end

    @title = link.text

    if link["href"] =~ /([0-9a-f]{40})/
      @hash = $1
    end

    dd = dl.at("dd")

    # @votes = dd.at(".v").text.strip
    # @age   = dd.at(".a").text
    # @size  = dd.at(".s").text
    # @seeds = dd.at(".u").text
    # @peers = dd.at(".d").text

    #["<span>âœ“</span>", "<span title=\"1444063087\">10 months</span>", "<span>2288 MB</span>", "<span>857</span>", "<span>162</span>"]
    @verified, @age, @size, @seeds, @peers = dd.search("span").map(&:text)
    @date = Time.at dd.at("span[title]")["title"].to_i
  end

  def datestamp
    @date.strftime("%Y-%m-%d")
  end

  def age
    @age.gsub(/ (day|month|week|hour|year|min)s?/) do |m|
      ($1 == "month") ? "mo" : m[1]
    end
  end

  def tracker_params
    TRACKERS.map { |tr| "&tr=#{URI.escape(tr)}" }.join("")
  end

  def magnet_url
    "magnet:?xt=urn:btih:#{hash}#{tracker_params}#{"&dn=#{title}" if title}"
  end

end

###########################################################

def read_url(url)
  begin
    cmd = [
      "curl",
      "-A", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36",
      "--silent",
      "-e", ROOT_URL,
      url
    ]
    IO.popen(cmd, "r") { |io| io.read }
  rescue Errno::ENOENT
    require 'open-uri'
    open(url).read
  end
end

def search(query, page_size=nil, page=nil, order=nil)

  case order
  when :peers, nil
    action = 'search'
  when :date
    action = 'searchA'
  when :rating
    action = 'searchN'
  else
    raise 'Unknown ordering'
  end

  url = "#{ROOT_URL}#{action}"

  opts = {}
  opts["f"] = URI.escape(query) unless query.empty?
  opts["p"] = page || 0

  url += "?" + opts.map { |k,v| "#{k}=#{v}" }.join("&")

  page = Nokogiri::HTML(read_url(url))

  dls = page.search(".results dl")
  dls = dls.take(page_size) if page_size
  dls.map { |dl| Result.new(dl) }.compact
end

def cleanup(title)
  title.gsub(/[\^\*\"]/, '').strip
end

def download_torrent(result)
  puts "<3>* <11>#{result.title} <8>(<10>#{result.seeds}/<2>#{result.peers}<8>)".colorize

  filename = "#{result.hash} - #{cleanup result.title}.torrent"
  if File.exists? filename
    puts "  |_ skipping".light_yellow
    return
  end

  url = "http://torcache.net/torrent/#{result.hash}.torrent"
  open(url) do |t|
    data = t.read
    open(filename, "wb") { |o| o.write(data) }

    puts "  |_ wrote #{data.size} bytes"
  end
rescue OpenURI::HTTPError => e
  puts "  |_ error: #{e}".light_red
end

def mirror(query, pages=10)
  (0..pages).each do |page|
    results = search(query, nil, page)

    break if results.empty?

    puts "* Got #{results.size} results..."

    results.each do |result|
      download_torrent(result)
    end
  end
end

def choose_torrents(results)
  print ">> Torrents to download (eg. 1 3 5-7): "

  begin
    input = $stdin.gets
  rescue Interrupt
    puts
    puts "Nevermind!"
    exit 1
  end

  unless input
    puts
    puts "Fine, be that way!"
    exit 1
  end

  choices = []

  input.split.each do |choice|
    choice.strip!

    case choice
    when /^(\d+)$/
      choices << $1.to_i
    when /^(\d+)-(\d+)$/
      start  = $1.to_i
      finish = $2.to_i
      choices += (start..finish).to_a
    else
      puts "Invalid choice: #{choice}"
    end
  end

  choices.map { |n| results[n-1] }
end

def display(results)
  results.each_with_index.to_a.reverse_each do |r, n|
    number = "<15>#{(n+1).to_s.rjust(3)}."
    # seedpeers = "<10>#{r.seeds}<7>/<2>#{r.peers}"
    seedpeers = "#{r.seeds}/#{r.peers}"
    # line += " <8>[<12>+#{r.votes}<8>]" unless r.votes.empty?
    # line += " <14>#{r.size} <7>(#{r.age})"
    # line = "<10>#{r.seeds.rjust(7)} <8>| <13>#{r.peers.rjust(7)} <8>| <12>#{r.size.rjust(8)} <8>| <11>#{r.age.rjust(4)} <8>| #{number} <8>| <14>#{r.title}"
    line = "<11>#{r.age.rjust(4)} <8>| <12>#{r.size.rjust(8)} <8>| <10>#{seedpeers.rjust(8)} <8>| #{number} <14>#{r.title}"
    # line += " <7>#{r.date} <10>#{r.seeds} <13>#{r.peers}"

    puts line.colorize
  end
end

###########################################################

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: tz [options] <query>"

    on 'd',  'date',    'Sort by date'
    on 'r',  'rating',  'Sort by rating'
    on 'm',  'mirror',  'Retrieve all torrents'
    on 'n=', 'num',     'Number of results (default: #{Settings.page_size})'
    on 'a=', 'add',     'Add MD5 hash'
    on 'v',  'verbose', 'Show details and stuff'
  end

  [opts, ARGV]
end

###########################################################

def open_url(url, verbose=false)
  puts "open url"
  # Make sure the torrent client exists
  cmd = Settings.client.split

  unless Path.which(cmd.first)
    $stdout.puts "Error: Couldn't locate #{Settings.client} in the path"
    exit 1
  end

  puts url if verbose
  puts
  # Fork into the background before running the client
  fork { exec(*cmd, url) }
  # system(*cmd, url)
end

###########################################################

if __FILE__ == $0
  opts, args = parse_options

  query = args.join(" ")

  md5s = args.map do |arg|
    case arg.strip
    when %r{^https?://torrentz2\.eu/(\w{40})}, %r{^https?://idope\.se/torrent/[^/]+/(\w{40})/?}, %r{^https?://torrentproject\.se/(\w{40})/}
      $1
    else
      nil
    end
  end.compact + [opts[:add]]

  md5s.compact!

  if md5s.any?
    Process.daemon(true)
    md5s.each do |md5|
      puts "#{md5}"
      url = Result.new(md5).magnet_url
      open_url(url)
    end
  elsif opts.mirror?
    mirror(query)
  else
    if opts.date?
      order = :date
    elsif opts.rating?
      order = :rating
    else
      order = Settings.order
    end

    page_size = opts[:num]&.to_i || Settings.page_size
    results   = search(query, page_size, nil, order)

    display(results)

    chosen = choose_torrents(results)
    chosen.each do |t|
      open_url(t.magnet_url, opts.verbose?)
    end
  end
end
