#!/usr/bin/env ruby

###########################################################
# TODO:
# * Fix Term::Table API
###########################################################

gem 'slop', "~> 3.6"
require 'slop'

require 'epitools'

###########################################################

ROOT_URL = "https://torrents-csv.ml/"

TRACKERS = [
  "udp://tracker.coppersurfer.tk:6969/announce",
  "udp://tracker.open-internet.nl:6969/announce",
  "udp://tracker.leechers-paradise.org:6969/announce",
  "udp://tracker.internetwarriors.net:1337/announce",
  "udp://tracker.opentrackr.org:1337/announce",
  "udp://9.rarbg.to:2710/announce",
  "udp://9.rarbg.me:2710/announce",
  "http://tracker3.itzmx.com:6961/announce",
  "http://tracker1.itzmx.com:8080/announce",
  "udp://exodus.desync.com:6969/announce",
  "udp://explodie.org:6969/announce",
  "udp://ipv4.tracker.harry.lu:80/announce",
  "udp://denis.stalker.upeer.me:6969/announce",
  "udp://tracker.torrent.eu.org:451/announce",
  "udp://tracker.tiny-vps.com:6969/announce",
  "udp://thetracker.org:80/announce",
  "udp://open.demonii.si:1337/announce",
  "udp://tracker4.itzmx.com:2710/announce",
  "udp://tracker.cyberia.is:6969/announce",
  "udp://retracker.netbynet.ru:2710/announce"
]

###########################################################

def parse_options
  opts = Slop.parse(help: true, strict: true) do
    banner "Usage: tz [options] <query>"

    # on 'd',  'date',    'Sort by date'
    # on 'r',  'rating',  'Sort by rating'
    on 'm',  'mirror',  'Retrieve all torrents'
    on 'p',  'print',   'Print URLs'
    # on 'n=', 'num',     "Number of results (default: #{Settings.page_size})"
    on 'a=', 'add',     'Add MD5 hash'
    on 'v',  'verbose', 'Show details and stuff'
  end

  [opts, ARGV]
end

###########################################################

module Settings
  extend self

  def rc
    path = Path["~/.tzrc"]
    path.exists? ? path.read_json : {}
  end

  def client
    rc["client"] || 'qbittorrent'
  end

  def page_size
    rc["page_size"]
  end

  def order
    rc["order"]&.to_sym
  end
end


###########################################################

module Enumerable

  def partition_map
    a, b = [], []
    each do |e|
      if mapped = yield(e)
        a << mapped
      else
        b << e
      end
    end

    [a, b]
  end

end

###########################################################

class Result

  attr_accessor :title, :seeds, :peers, :date, :size, :votes, :hash

  def self.from_json(json)
    # "completed": 9603,
    # "created_unix": 1582801440,
    # "infohash": "29774d8626332e418cc55b1a6151d5e6503b5bbc",
    # "leechers": 1056,
    # "name": "Altered.Carbon.Season.2.S02.720p.NF.WEB-DL.x265-HETeam",
    # "scraped_date": 1582863685,
    # "seeders": 1462,
    # "size_bytes": 2127687389
    obj = new
    obj.instance_eval do
      @title, @seeds, @peers, @size, @votes, @hash = json.values_at(*%w[name seeders leechers size_bytes completed infohash])
      @date = Time.at json["created_unix"]
    end
    obj
  end

  def self.from_csv(row)
    # infohash;name;size_bytes;created_unix;seeders;leechers;completed;scraped_date
    # ~/src/torrents.csv $ "grep -iE 'altered.state' torrents.csv | fields -d \; 5,6,2|sort -n"
    obj = new
    obj.instance_eval do
      @hash, @title, @size, @date, @seeds, @peers, @votes, _ = row.chomp.split(";")
    end
    obj
  end

  def datestamp
    @date.strftime("%Y-%m-%d")
  end

  def escaped_title
    CGI.escape title.gsub(/[\^\*\"]/, '').strip
  end

  def tracker_params
    # TRACKERS.map { |tr| "&tr=#{tr}" }.join("")
    # TRACKERS.map { |tr| "&tr=#{CGI.escape(tr)}" }.join("")
    TRACKERS.map { |tr| "&tr=#{CGI.escape_html(tr)}" }.join("")
  end

  def magnet_url
    "magnet:?xt=urn:btih:#{hash}#{"&dn=#{escaped_title}" if title}#{tracker_params}"
  end
end

###########################################################

def read_url(url)
  begin
    cmd = [
      "curl",
      "-A", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36",
      "--silent",
      "-e", ROOT_URL,
      url
    ]
    IO.popen(cmd, "r") { |io| io.read }
  rescue Errno::ENOENT
    require 'open-uri'
    open(url).read
  end
end

###########################################################

def open_url(url)
  cmd = Settings.client.split

  unless Path.which(cmd.first)
    $stdout.puts "Error: Couldn't locate #{Settings.client} in the path"
    exit 1
  end

  if $verbose
    puts url
    puts
  end

  # Daemonize to kill the console spam
  Process.daemon(true)
  exec(*cmd, url)
end

###########################################################

def search(query, page=nil)
  url = "#{ROOT_URL}service/search"

  # create the query params
  opts = {}
  opts["type_"] = "torrent"
  opts["q"] = CGI.escape(query) unless query.empty?
  opts["page"] = page || 1

  url += "?" + opts.map { |k,v| "#{k}=#{v}" }.join("&")

  # puts url if $verbose
  puts url
  results = read_url(url).from_json
  pp results if $verbose

  results.map { |result| Result.from_json(result) }.compact
end

###########################################################

def download_torrent(result)
  puts "<3>* <11>#{result.title} <8>(<10>#{result.seeds}/<2>#{result.peers}<8>)".colorize

  filename = "#{result.hash} - #{result.escaped_title}.torrent"
  if File.exists? filename
    puts "  |_ skipping".light_yellow
    return
  end

  url = "http://torcache.net/torrent/#{result.hash}.torrent"
  open(url) do |t|
    data = t.read
    open(filename, "wb") { |o| o.write(data) }

    puts "  |_ wrote #{data.size} bytes"
  end
rescue OpenURI::HTTPError => e
  puts "  |_ error: #{e}".light_red
end

def mirror(query, pages=10)
  (0..pages).each do |page|
    results = search(query, nil, page)

    break if results.empty?

    puts "* Got #{results.size} results..."

    results.each do |result|
      download_torrent(result)
    end
  end
end

def choose_torrents(results)
  print ">> Torrents to download (eg. 1 3 5-7, [n]ext page): "

  begin
    input = $stdin.gets
  rescue Interrupt
    puts
    puts "Nevermind!"
    exit 1
  end

  if input.nil?
    puts
    puts "Fine, be that way!"
    exit 1
  end

  input.strip!

  if input.empty?
    choices = :next_page
  else
    choices = []

    input.split.each do |choice|
      case choice
      when /^n$/i
        choices = :next_page
        break
      when /^(\d+)$/
        choices << $1.to_i
      when /^(\d+)-(\d+)$/
        start  = $1.to_i
        finish = $2.to_i
        choices += (start..finish).to_a
      else
        puts "Invalid choice: #{choice}"
      end
    end
  end

  choices = choices.map { |n| results[n-1] } if choices.is_an? Array
  choices
end

def display(results)
  if results.empty?
    puts "Nothin'!"
    exit 1
  end

  results.each_with_index.to_a.reverse_each do |r, n|
    # seedpeers = "<10>#{r.seeds}<7>/<2>#{r.peers}"
    # line += " <8>[<12>+#{r.votes}<8>]" unless r.votes.empty?
    # line += " <14>#{r.size} <7>(#{r.age})"
    # line = "<10>#{r.seeds.rjust(7)} <8>| <13>#{r.peers.rjust(7)} <8>| <12>#{r.size.rjust(8)} <8>| <11>#{r.age.rjust(4)} <8>| #{number} <8>| <14>#{r.title}"
    # line += " <7>#{r.date} <10>#{r.seeds} <13>#{r.peers}"
    # line = "<11>#{r.age.rjust(4)} <8>| <12>#{r.size.rjust(8)} <8>| <10>#{seedpeers.rjust(8)} <8>| #{number} <14>#{r.title}"

    number    = "#{(n+1).to_s.rjust(3)}."
    seedpeers = "#{r.seeds}/#{r.peers}".rjust(8)
    date      = r.datestamp
    size      = r.size.commatize.rjust(16)
    line      = "<7>#{date} <9>#{size} <2>#{seedpeers} <15>#{number} <7>#{r.title}"

    puts line.colorize
  end
end

###########################################################

if __FILE__ == $0
  opts, args = parse_options
  $verbose = opts.verbose?

  magnets, args = args.partition { |arg| arg[%r{^magnet:.}] }

  # when %r{^https?://torrentz2\.eu/(\w{40})}, %r{^https?://idope\.se/torrent/[^/]+/(\w{40})/?}, %r{^https?://torrentproject\.se/(\w{40})/}
  md5s, args = args.partition_map do |arg|
    if arg.strip =~ %r{^https?://.+/([a-f0-9]{40})}i
      $1
    end
  end
  md5s << opts[:add] if opts[:add]

  magnets += md5s.map { |md5| Result.new(md5).magnet_url }

  if magnets.any?
    # Process.daemon(true)
    magnets.each do |url|
      opts.print? ? (puts url) : (open_url url)
    end
    exit
  end

  query = args.join(" ")

  if opts.mirror?
    mirror(query)
  else
    page = 1
    loop do
      results = search(query, page)

      display(results)

      chosen = choose_torrents(results)
      if chosen == :next_page
        page += 1
      else
        chosen.each { |t| opts.print? ? (puts t.magnet_url) : (open_url t.magnet_url) }
        break
      end
    end
  end

end
