#!/usr/bin/env ruby

# sudoifnotroot, ruby style.
unless Process.uid == 0
  system("sudo", __FILE__, *ARGV)
  exit
end

require 'epitools'

class Package < TypedStruct["name ver rev arch path size mtime"]
  def initialize(path)
    raise path if path.nil?
    
    # Package filename examples:
    #   xdg-utils-1.1.0-2.20120520-any.pkg.tar.xz
    #   cuda-5.0.35-4-x86_64.pkg.tar.xz
    #   lib32-fontconfig-2.10.95-1.1-x86_64.pkg.tar.xz
    if path.filename =~ %r{^(.+)-([^-]+)-([\d\.]+)-([\w_]+)\.pkg\.tar\.(?:\w+)(?:\.part)?$}
      super($1, $2, $3, $4, path, path.size, path.mtime)
    else
      raise "Can't parse: #{path}"
    end
  end

  def version
    "#{ver}-#{rev}"
  end
end

def installed_package_names
  require 'set'
  Set.new `pacman -Q`.each_line.map { |line| line.split.first }
end

num_to_keep = (ARGV.first || "2").to_i

installed = installed_package_names

Path.cd("/var/cache/pacman/pkg") do
  pkgs = Path["*.{xz,zst,gz}"].map {|path| Package.new(path) }
  grouped = pkgs.group_by(&:name)

  all_removals = []

  grouped.sort.each do |name, pkgs|
    versions = pkgs.sort_by { |pkg| pkg.mtime }.reverse

    if installed.include? name
      to_keep   = versions[0...num_to_keep]
      to_remove = versions[num_to_keep..-1] || []
      output    = "+ <11>#{name}: "
    else
      to_keep   = []
      to_remove = versions
      output    = "+ <8>#{name}: "
    end

    all_removals += to_remove

    version_str  = []
    version_str += to_keep.map   { |pkg| "<10>#{pkg.version}" }
    version_str += to_remove.map { |pkg| "<12>#{pkg.version}" }

    output += version_str.join("<8>, ")

    puts output.colorize
  end

  all_removals += Path["*.part"].map {|path| Package.new(path) }

  if all_removals.empty?
    puts
    puts "Nothing to cleanup!"
    puts
    exit
  end

  puts
  puts "Keeping #{num_to_keep} cop(y/ies) of each package..."
  puts

  total_size = all_removals.map(&:size).sum
  if prompt("Remove #{all_removals.size} old packages (#{total_size.commatize} bytes)?", "yN") == "y"
    puts "Deleting..."
    all_removals.each {|pkg| pkg.path.rm }
  else
    puts "Terminating..."
  end

end
